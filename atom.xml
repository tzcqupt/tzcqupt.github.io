<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人学习博客</title>
  
  <subtitle>博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/tzcqupt/tzcqupt.github.io/"/>
  <updated>2022-11-01T12:55:13.475Z</updated>
  <id>https://github.com/tzcqupt/tzcqupt.github.io/</id>
  
  <author>
    <name>tzcqupt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ffmepg</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2022/11/01/ffmepg/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2022/11/01/ffmepg/</id>
    <published>2022-11-01T12:55:13.475Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg 相关</p><h1 id="参数相关"><a href="#参数相关" class="headerlink" title="参数相关"></a>参数相关</h1><p>流程:输入—&gt;处理–&gt;输出</p><p><code>-i</code> ===&gt;input 输入</p><p><code>-c</code> ===&gt;codec 编解码器 ,告诉ffmepg接下来用什么编码器和解码器</p><p>​        <code>-c copy</code> ==&gt;复制照抄输入文件原来编解码器所做的事情</p><blockquote><p>​    老版本的ffmpeg:<code>-c copy</code>&lt;====&gt;<code>-vcodec copy -acodec copy</code></p></blockquote><p>​        <code>-c:v</code> 限定只处理视频画面</p><p>​        <code>-c:a</code> 限定只处理视频里的音频声音</p><p>​        <code>-c:s</code> 限定只处理字幕</p><blockquote><p><code>-c:v libx264</code> 将编码格式换成h164</p><p><code>-c:a libmp3lame</code> 将编码格式换成mp3</p><p>可以直接 <code>-c:v h264 -c:a mp3</code></p></blockquote><p><code>-f</code> ==&gt;format 格式 ,强制输出什么格式,让ffmpeg自行挑选编解码器进行转码输出</p><p><code>-f webm</code> 自己想转的容器格式有什么编码格式或编码器可以支持</p><h2 id="转码思路"><a href="#转码思路" class="headerlink" title="转码思路"></a>转码思路</h2><ol><li><p><code>ffprobe .\input.mp4</code> 查看文件的编码格式,或者直接查看文件属性</p></li><li><p>确定自己的相关的容器或编码格式</p></li><li><p><code>ffmpeg -formats</code>查询ffmpeg支持哪些容器格式</p><p>demuxing 解封装,muxing 封装(转码)</p><p><code>ffmpeg -codecs</code>查询ffmpeg支持哪些编码格式及编码器名</p><p>decoder 解码器名 encoder编码器名</p></li></ol><h2 id="高效转码-编码格式-容器格式"><a href="#高效转码-编码格式-容器格式" class="headerlink" title="高效转码,编码格式/容器格式"></a>高效转码,编码格式/容器格式</h2><p><code>ffprobe .\input.mp4</code> 用于查看文件的详细信息</p><p>一般画面的编码格式 h264</p><p>声音的编码格式 aac</p><p>容器格式: mp4/flv/mkv/avi==&gt;封装格式</p><p>高效转码==&gt;编码格式相同,容器格式不同</p><p>视频编码格式<a href="https://www.bilibili.com/read/cv4480903" target="_blank" rel="noopener">https://www.bilibili.com/read/cv4480903</a></p><p>h264（又称mpeg-4 avc、mpeg-4 part 10）：mp4、flv、avi、mov、wmv、m4v、f4v、3gp、ts</p><p> mpeg4（不只一种，这里指mpeg-4 part 2、divx、xvid）：mp4、avi、mov、wmv、m4v、3gp、ts </p><p> h265（又称hevc、mpeg-h part 2）：mp4、avi、mov、ts </p><p> vp8：avi、wmv、ts、webm </p><p> vp9：mp4、avi、wmv、ts、webm </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ffmpeg 相关&lt;/p&gt;
&lt;h1 id=&quot;参数相关&quot;&gt;&lt;a href=&quot;#参数相关&quot; class=&quot;headerlink&quot; title=&quot;参数相关&quot;&gt;&lt;/a&gt;参数相关&lt;/h1&gt;&lt;p&gt;流程:输入—&amp;gt;处理–&amp;gt;输出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; ==
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker安装相关软件</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2022/02/13/Docker-soft-install/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2022/02/13/Docker-soft-install/</id>
    <published>2022-02-12T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker相关"><a href="#Docker相关" class="headerlink" title="Docker相关"></a>Docker相关</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="Windows-安装Docker"><a href="#Windows-安装Docker" class="headerlink" title="Windows 安装Docker"></a>Windows 安装Docker</h3><h4 id="Windows家庭版开启Hyper-V-可选"><a href="#Windows家庭版开启Hyper-V-可选" class="headerlink" title="Windows家庭版开启Hyper-V(可选)"></a>Windows家庭版开启Hyper-V(可选)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pushd</span> <span class="string">"%~dp0"</span></span><br><span class="line">dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">'findstr /i . hyper-v.txt 2^&gt;nul'</span>) <span class="keyword">do</span> dism /online /norestart /add-package:<span class="string">"%SystemRoot%\servicing\Packages\%%i"</span></span><br><span class="line">del hyper-v.txt</span><br><span class="line">Dism /online /<span class="built_in">enable</span>-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure><h4 id="官网下载安装包进行安装"><a href="#官网下载安装包进行安装" class="headerlink" title="官网下载安装包进行安装"></a>官网下载安装包进行安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;desktop.docker.com&#x2F;win&#x2F;stable&#x2F;amd64&#x2F;Docker%20Desktop%20Installer.exe?utm_source&#x3D;docker&amp;utm_medium&#x3D;webreferral&amp;utm_campaign&#x3D;dd-smartbutton&amp;utm_location&#x3D;module</span><br></pre></td></tr></table></figure><h4 id="Win10-修改docker镜像存储位置"><a href="#Win10-修改docker镜像存储位置" class="headerlink" title="Win10 修改docker镜像存储位置"></a>Win10 修改docker镜像存储位置</h4><ol><li><p>查看dockek是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker Info</span><br></pre></td></tr></table></figure></li><li><p>确保docker使用的Linux Containers(使用的WSL)或者查看上述命令的回显是否如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker Root Dir: &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure></li><li><p>关闭<code>Docker Desktop</code>,使用下面命令查看是否停止了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\tzcqupt&gt; wsl --list -v</span><br><span class="line">  NAME                   STATE           VERSION</span><br><span class="line">  docker-desktop         Stopped         2</span><br><span class="line">  docker-desktop-data    Stopped         2</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，Docker Desktop for Window会创建如下两个发行版（distro)<br>docker-desktop (<code>C:\Users\tzcqupt\AppData\Local\Docker\wsl\distro\ext4.vhdx</code>)<br>docker-desktop-data (<code>C:\Users\tzcqupt\AppData\Local\Docker\wsl\data\ext4.vhdx</code>)</p></blockquote></li><li><p>对<code>docker-desktop</code>和<code>docker-desktop-data</code>分别执行导出,取消注册,导入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#导出</span></span><br><span class="line"> wsl --<span class="built_in">export</span> docker-desktop <span class="string">"D:\\soft\\develop\\docker\\images\\docker-desktop.tar"</span></span><br><span class="line"> wsl --<span class="built_in">export</span> docker-desktop-data <span class="string">"D:\\soft\\develop\\docker\\images\\docker-desktop-data.tar"</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#取消注册</span></span><br><span class="line"> wsl --unregister docker-desktop</span><br><span class="line"> wsl --unregister docker-desktop-data</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#导入</span></span><br><span class="line"> wsl --import docker-desktop-data <span class="string">"D:\\soft\\develop\\docker\\images\\wsl\\data"</span> <span class="string">"D:\\soft\\develop\\docker\\images\\docker-desktop-data.tar"</span> --version 2</span><br><span class="line"></span><br><span class="line">wsl --import docker-desktop <span class="string">"D:\\soft\\develop\\docker\\images\\wsl\\distro"</span> <span class="string">"D:\\soft\\develop\\docker\\images\\docker-desktop.tar"</span> --version 2</span><br></pre></td></tr></table></figure><blockquote><p>导出后,再导入docker才能找到之前的容器,导入新建到wsl文件夹即可</p></blockquote></li></ol><h3 id="安装Docker方式-新"><a href="#安装Docker方式-新" class="headerlink" title="安装Docker方式(新)"></a>安装Docker方式(新)</h3><p>在 CentOS 7安装docker要求系统为64位、系统内核版本为 3.10 以上</p><p><code>uname -r</code>查看内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否已安装docker列表</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="comment"># 安装Docker</span></span><br><span class="line">yum -y install docker</span><br><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 加入开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 查看docker服务状态</span></span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="安装并运行Docker-旧"><a href="#安装并运行Docker-旧" class="headerlink" title="安装并运行Docker(旧)"></a>安装并运行Docker(旧)</h3><ol><li><p>更新yum包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li><li><p>安装必要的系统工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>添加阿里云镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新yum缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装Docker-ce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>查看版本是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure></li><li><p>启动docker后台服务</p><ul><li><p>启动:<code>sudo systemctl start docker</code></p></li><li><p>停止:<code>sudo systemctl stop docker</code></p></li><li><p>重启:<code>sudo systemctl restart docker</code></p></li><li><p>查看状态:<code>systemctl status docker</code></p></li><li><p>开机启动docker:<code>systemctl enable docker</code></p></li></ul></li><li><p>测试运行hello-world</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>新增/修改 <code>/etc/docker/daemon.json</code>,加入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://0xp8b743.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><ol><li><p>查询docker安装过的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure></li><li><p>删除安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce.x86_64 docker-ce-cli.x86_64 -y</span><br></pre></td></tr></table></figure></li><li><p>删除镜像/容器</p></li></ol><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><p>如何使进入容器的用户角色为root</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -u 0 -it 容器名称&#x2F;id bash</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>查看正在运行中的容器:<code>docker ps</code></p><p>查看所有容器：<code>docker ps -a</code></p><p>查看最后一次运行的容器： <code>docker ps -l</code></p><p>查看停止的容器： <code>docker ps -f status=exited</code></p><h3 id="交互式方式创建容器"><a href="#交互式方式创建容器" class="headerlink" title="交互式方式创建容器"></a>交互式方式创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t --name&#x3D;容器名称 镜像名称:标签 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><code>-i</code> 表示运行容器</p><p><code>-t</code> 表示容器启动后会进入其命令行,可以直接 -it ==&gt;容器创建就能登录进去,分配一个伪终端 </p><p>exit退出后,容器后就停止了</p><h3 id="守护式方式创建容器"><a href="#守护式方式创建容器" class="headerlink" title="守护式方式创建容器"></a>守护式方式创建容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><p><code>-d</code> 表示会创建守护式容器在后台,创建后不会自动登录</p><blockquote><p>容器名称要唯一</p></blockquote><h3 id="登录守护式容器"><a href="#登录守护式容器" class="headerlink" title="登录守护式容器"></a>登录守护式容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称(或者容器id) &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><blockquote><p>执行exit退出后，容器仍在运行</p></blockquote><h3 id="停止容器方式"><a href="#停止容器方式" class="headerlink" title="停止容器方式"></a>停止容器方式</h3><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称(或者容器id)</span><br></pre></td></tr></table></figure><h4 id="停用全部运行中的容器"><a href="#停用全部运行中的容器" class="headerlink" title="停用全部运行中的容器"></a>停用全部运行中的容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure><h4 id="删除全部容器"><a href="#删除全部容器" class="headerlink" title="删除全部容器"></a>删除全部容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h4 id="停用并删除所有容器"><a href="#停用并删除所有容器" class="headerlink" title="停用并删除所有容器"></a>停用并删除所有容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称(或者容器id)</span><br></pre></td></tr></table></figure><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v 宿主机目录:容器目录 --name&#x3D;容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure><blockquote><p>相当于创建了这两个目录的映射,任何一方所做的修改都会同步给另外一方</p></blockquote><h3 id="查看容器ip地址"><a href="#查看容器ip地址" class="headerlink" title="查看容器ip地址"></a>查看容器ip地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称(容器id)</span><br></pre></td></tr></table></figure><p>如只查看centos容器的ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; centos</span><br></pre></td></tr></table></figure><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><ol><li><p>查看镜像</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>搜索镜像</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search xxx</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像id</span><br></pre></td></tr></table></figure></li><li><p>删除所有镜像</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &#39;docker images -q&#39;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker里面安装软件"><a href="#Docker里面安装软件" class="headerlink" title="Docker里面安装软件"></a>Docker里面安装软件</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ol><li><p>下载容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;mysql --restart&#x3D;always -p 33306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;root123 centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure><blockquote><p><code>-p</code> 表示端口映射</p><p><code>--restart=always</code> , 当 Docker 重启时,容器自动启动。</p><p><code>-e MYSQL_ROOT_PASSWORD</code>表示MySQL的root用户的密码</p></blockquote></li><li><p>远程登录 <code>192.168.0.108:33306 root/root123</code></p></li></ol><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ol><li><p>下载容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;nginx --restart&#x3D;always -p 80:80 nginx</span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="http://192.168.0.108" target="_blank" rel="noopener">http://192.168.0.108</a></p></li><li><p>进入容器中查看nginx的静态页面存放目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mynginx &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>执行<code>cat /etc/nginx/nginx.conf</code></p><p>得到存放的目录为 <code>/usr/share/nginx/html</code></p></li><li><p>将静态页面拷贝到html目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp html mynginx:&#x2F;usr&#x2F;share&#x2F;nginx</span><br></pre></td></tr></table></figure></li></ol><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ol><li><p>下载容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;redis --restart&#x3D;always -p 6379:6379 redis</span><br></pre></td></tr></table></figure></li></ol><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p><a href="https://www.cnblogs.com/reasonzzy/p/11145026.html" target="_blank" rel="noopener">参考博客</a></p><ol><li><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></li><li><p>提前创建好gitlab的数据和配置等文件夹</p></li><li><p>运行gitlab镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--detach \</span><br><span class="line">--publish 2222:22 \</span><br><span class="line">--publish 8081:80 \</span><br><span class="line">--publish 8443:443 \</span><br><span class="line">--hostname 192.168.0.108 \</span><br><span class="line">-v /usr/local/soft/gitlab/config:/etc/gitlab \</span><br><span class="line">-v /usr/local/soft/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /usr/local/soft/gitlab/data:/var/opt/gitla \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--privileged=true gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/soft/gitlab/config/gitlab.rb</span><br><span class="line"><span class="meta">#</span><span class="bash">将external_url 改为自己的ip地址</span></span><br><span class="line">external_url 'http://192.168.0.108'</span><br><span class="line">vi /usr/local/soft/gitlab/data/gitlab-rails/etc/gitlab.yml</span><br><span class="line"><span class="meta">#</span><span class="bash">搜索关键字 Web server settings,修改host和port</span></span><br></pre></td></tr></table></figure></li><li><p>删除容器,重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stop gitlab</span><br><span class="line">docker rm gitlab</span><br><span class="line"># 重启docker</span><br><span class="line">systemctl restart docker</span><br><span class="line"># 重新创建容器,执行[3]</span><br></pre></td></tr></table></figure></li><li><p>容器启动后,通过<code>docker inspect 容器id</code> 查看容器分配的ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;db7db0f4b7b71c07540977e987b3a9b62f97328d22c493eb06db85d274ea82bb&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;ebbb6ab495a561fb10e4edd610e593b6977014e16a21dc7aa9448dff0acfa037&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.5&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:05&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"># 执行命令查看是否连接成功</span><br><span class="line">curl 172.17.0.5:80</span><br></pre></td></tr></table></figure></li><li><p><a href="http://192.168.0.108:8081/" target="_blank" rel="noopener">登录gitlab</a></p><blockquote><p>设置超级管理员的密码,账号为root 密码为tzcqupt@gitlab</p><p>配置ssh  (id_rsa.pub文件内容放在gitlab服务器上)</p></blockquote></li><li><p><strong>下载在gitlab上创建的项目</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件,重启服务</span></span><br><span class="line">[root@tzcqupt config]# cat gitlab.rb | grep ssh_port</span><br><span class="line"> gitlab_rails['gitlab_shell_ssh_port'] = 2222</span><br></pre></td></tr></table></figure></li></ol><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p><a href="https://www.jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -d \</span><br><span class="line">  -u root \</span><br><span class="line">  --restart always \</span><br><span class="line">  --privileged&#x3D;true \</span><br><span class="line">  --name jenkins \</span><br><span class="line">  -p 8081:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  -v &#x2F;usr&#x2F;bin&#x2F;docker:&#x2F;usr&#x2F;bin&#x2F;docker \</span><br><span class="line">  -v &#x2F;usr&#x2F;local&#x2F;soft&#x2F;jenkins:&#x2F;var&#x2F;jenkins_home \</span><br><span class="line">  -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">  -v &#x2F;usr&#x2F;local&#x2F;soft&#x2F;maven&#x2F;apache-maven-3.5.4:&#x2F;usr&#x2F;local&#x2F;maven \</span><br><span class="line">  jenkinsci&#x2F;blueocean</span><br></pre></td></tr></table></figure><p>后续配置参考 <strong>安装Jenkins章节</strong></p><p>Git/Java/Maven </p><p>docker安装的jenkins容器已经包含了Git和Java,Maven通过-v 挂载的方式</p><blockquote><p>yum方式安装Git到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --installroot 指定目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --nogpgcheck 不进行公钥检查</span></span><br><span class="line">yum -c /etc/yum.conf --installroot=/usr/local/soft/jenkins/share/soft/git --releasever=/ --nogpgcheck  install git</span><br></pre></td></tr></table></figure></blockquote><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ol><li><p>安装PostgreSQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres -d -p 5432:5432 --restart&#x3D;always -e POSTGRES_PASSWORD&#x3D;postgres postgres:13.5</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it postgres psql -U postgres -d postgres</span><br></pre></td></tr></table></figure></li><li><p>查看数据库所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from pg_tables;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><blockquote><p><a href="https://github.com/MaksymBilenko/docker-oracle-12c">Docker 安装Oracle 说明</a><br><a href="https://www.w3cschool.cn/oraclejc/" target="_blank" rel="noopener">Oracle 学习</a></p></blockquote><ol><li><p>安装Oracle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 -p 1521:1521 truevoly&#x2F;oracle-12c</span><br></pre></td></tr></table></figure></li><li><p>数据库连接信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hostname: localhost</span><br><span class="line">port: 1521</span><br><span class="line">sid: xe</span><br><span class="line">service name: xe</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></table></figure></li><li><p>sqlplus连接信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus system&#x2F;oracle@&#x2F;&#x2F;localhost:1521&#x2F;xe</span><br></pre></td></tr></table></figure></li><li><p>Oracle Application Express web management</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;apex</span><br><span class="line">workspace: INTERNAL</span><br><span class="line">user: ADMIN</span><br><span class="line">password: 0Racle$</span><br></pre></td></tr></table></figure></li><li><p>Oracle Enterprise Management console</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;em</span><br><span class="line">user: sys</span><br><span class="line">password: oracle</span><br><span class="line">connect as sysdba: true</span><br></pre></td></tr></table></figure></li><li><p>docker中的sqlplus位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;12.1.0&#x2F;xe</span><br></pre></td></tr></table></figure><h3 id="NIFI"><a href="#NIFI" class="headerlink" title="NIFI"></a>NIFI</h3></li><li><p>安装nifi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart&#x3D;always -p 8080:8080 -e NIFI_WEB_HTTP_PORT&#x3D;&#39;8080&#39; --name nifi apache&#x2F;nifi:1.14.0</span><br></pre></td></tr></table></figure><blockquote><p>默认为https,需要这样修改使用http</p></blockquote></li><li><p>访问nifi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;localhost:8083&#x2F;nifi</span><br></pre></td></tr></table></figure></li></ol><h1 id="Docker环境搭建终极篇"><a href="#Docker环境搭建终极篇" class="headerlink" title="Docker环境搭建终极篇"></a>Docker环境搭建终极篇</h1><h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ol><li>Linux下安装Docker</li><li>Docker安装centos7</li><li>建立各自的目录和Dockerfile,在对应的目录下执行docker的构建命令<code>docker build</code></li><li>将需要的<code>tar.gz</code>文件放在对应的目录下,避免网络问题下载失败导致构建失败.</li></ol><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><code>Dockerfile</code></h2><h3 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a><code>centos7</code></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> tzcqupt</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y passwd openssh-server openssh-clients initscripts net-tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y python2-setuptools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ssh-keygen</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> easy_install supervisor</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'root:root123'</span> | chpasswd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> /usr/sbin/sshd-keygen</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></figure><p><code>docker build -t base/centos7-ssh .</code></p><h3 id="centos7-jdk8u265"><a href="#centos7-jdk8u265" class="headerlink" title="centos7-jdk8u265"></a><code>centos7-jdk8u265</code></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># JDK-8U265</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> base/centos7-ssh</span><br><span class="line"><span class="keyword">MAINTAINER</span> tzcqupt</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y update</span></span><br><span class="line"><span class="comment"># Install libs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install deltarpm rpm make wget tar unzip \</span></span><br><span class="line"><span class="bash">         gcc gcc-c++ -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /home/work/apps/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/<span class="built_in">local</span>/soft/java/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/work/apps/</span></span><br><span class="line"><span class="comment">#RUN wget https://mirror.tuna.tsinghua.edu.cn/AdoptOpenJDK/8/jdk/x64/linux/OpenJDK8U-jdk_x64_linux_hotspot_8u265b01.tar.gz</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> OpenJDK8U-jdk_x64_linux_hotspot_8u265b01.tar.gz /usr/<span class="built_in">local</span>/soft/java/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/soft/java/</span></span><br><span class="line"><span class="comment"># RUN tar -zxvf OpenJDK8U-jdk_x64_linux_hotspot_8u265b01.tar.gz</span></span><br><span class="line"><span class="comment"># RUN rm OpenJDK8U-jdk_x64_linux_hotspot_8u265b01.tar.gz</span></span><br><span class="line"><span class="comment"># RUN mv -f jdk8u265-b01/ /usr/local/soft/java/jdk8u265-b01</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/usr/local/soft/java/jdk8u265-b01</span><br><span class="line"><span class="keyword">ENV</span> PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># open ports</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><p><code>docker build -t base/centos7-jdk8u265 .</code></p><h3 id="centos7-tomcat7"><a href="#centos7-tomcat7" class="headerlink" title="centos7-tomcat7"></a><code>centos7-tomcat7</code></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Tomcat7</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base/centos7-jdk8u265</span><br><span class="line"><span class="keyword">MAINTAINER</span> tzcqupt</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y update</span></span><br><span class="line"><span class="comment"># Install libs</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/work/apps/</span></span><br><span class="line"><span class="comment">#RUN wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.85/bin/apache-tomcat-7.0.85.tar.gz</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-7.0.85.tar.gz /usr/<span class="built_in">local</span>/soft/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/soft/</span></span><br><span class="line"><span class="comment">#RUN tar -zxvf apache-tomcat-7.0.85.tar.gz</span></span><br><span class="line"><span class="comment">#RUN rm apache-tomcat-7.0.85.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> supervisord.conf /etc/supervisord.conf</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/supervisord"</span>]</span></span><br></pre></td></tr></table></figure><p><code>docker build -t base/centos7-tomcat7 .</code></p><h3 id="centos7-jenkins"><a href="#centos7-jenkins" class="headerlink" title="centos7-jenkins"></a><code>centos7-jenkins</code></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jenkins 2.235.5</span></span><br><span class="line"><span class="keyword">FROM</span> base/centos7-tomcat7</span><br><span class="line"><span class="keyword">MAINTAINER</span> tzcqupt</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y git</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y dejavu-sans-fonts</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y fontconfig</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/soft/apache-tomcat-7.0.85/webapps/ROOT/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -fr ./*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget http://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.235.5/jenkins.war</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip jenkins.war</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -fr docs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -fr examples</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -fr manager</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -fr host-manager</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8079</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /usr/<span class="built_in">local</span>/soft/apache-tomcat-7.0.85/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/soft/apache-tomcat-7.0.85/logs/catalina.out</span></span><br></pre></td></tr></table></figure><p><code>docker build -t centos7-jenkins .</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=jenkins --restart=always -p 8079:8080 -p 50000:50000 -v $PWD/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock centos7-jenkins</span><br></pre></td></tr></table></figure><h2 id="Docker可视化容器"><a href="#Docker可视化容器" class="headerlink" title="Docker可视化容器"></a>Docker可视化容器</h2><p>Windows 安装了Docker,自带Docker UI,不需要安装.</p><h3 id="构建Shipyard容器"><a href="#构建Shipyard容器" class="headerlink" title="构建Shipyard容器"></a>构建Shipyard容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull shipyard&#x2F;shipyard </span><br><span class="line">docker pull swarm </span><br><span class="line">docker pull shipyard&#x2F;docker-proxy </span><br><span class="line">docker pull alpine </span><br><span class="line">docker pull microbox&#x2F;etcd </span><br><span class="line">docker pull rethinkdb</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d --restart&#x3D;always --name shipyard-rethinkdb rethinkdb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d -p 4001:4001 -p 7001:7001 --restart&#x3D;always --name shipyard-discovery  microbox&#x2F;etcd:latest -name discovery</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d -p 2375:2375 --hostname&#x3D;$HOSTNAME --restart&#x3D;always --name shipyard-proxy -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -e PORT&#x3D;2375 shipyard&#x2F;docker-proxy:latest</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d --restart&#x3D;always --name shipyard-swarm-manager swarm:latest manage --host tcp:&#x2F;&#x2F;0.0.0.0:3375 etcd:&#x2F;&#x2F;121.37.172.25:4001</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d --restart&#x3D;always --name shipyard-swarm-agent swarm:latest join --addr 121.37.172.25:2375 etcd:&#x2F;&#x2F;121.37.172.25:4001</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti -d --restart&#x3D;always --name shipyard-controller --link shipyard-rethinkdb:rethinkdb --link shipyard-swarm-manager:swarm -p 8081:8080 shipyard&#x2F;shipyard:latest server -d tcp:&#x2F;&#x2F;swarm:3375</span><br></pre></td></tr></table></figure><p>用户名/密码 admin/shipyard</p><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h3 id="创建自己的网络-可选"><a href="#创建自己的网络-可选" class="headerlink" title="创建自己的网络(可选)"></a>创建自己的网络(可选)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=192.168.0.0/24 basenet</span><br></pre></td></tr></table></figure><h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -u root --rm -d -p 8079:8080 -p 50000:50000 -v $PWD/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean</span><br></pre></td></tr></table></figure><blockquote><p><code>$PWD</code>代表当前目录</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker相关&quot;&gt;&lt;a href=&quot;#Docker相关&quot; class=&quot;headerlink&quot; title=&quot;Docker相关&quot;&gt;&lt;/a&gt;Docker相关&lt;/h1&gt;&lt;h2 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Kafka学习</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2022/02/13/Kafka-Learn/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2022/02/13/Kafka-Learn/</id>
    <published>2022-02-12T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka的安装"><a href="#Kafka的安装" class="headerlink" title="Kafka的安装"></a>Kafka的安装</h1><ol><li><p>安装jdk8 <code>sudo apt install openjdk-8-jdk-headless</code></p></li><li><p>zookeeper安装&amp;启动</p><ol><li><p>解压后得到 <code>apache-zookeeper-3.5.7-bin</code> 文件夹,进入<code>conf</code>目录,拷贝<code>zoo_sample.cfg</code>为<code>zoo.cfg</code></p></li><li><p>编辑zoo.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir&#x3D;&#x2F;home&#x2F;tzcqupt&#x2F;logs&#x2F;zookeeper</span><br><span class="line">clientPort&#x3D;2181</span><br></pre></td></tr></table></figure></li><li><p>进入bin目录,执行<code>./zkServer.sh start</code>开启zookeeper服务</p></li></ol></li><li><p>安装kafka</p><ol><li><p>进入解压后的目录<code>kafka_2.11-2.4.0</code>的config目录,编辑<code>server.properties</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#替换为本机ip</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.50.28:9092</span><br><span class="line">advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.50.28:9092</span><br><span class="line">log.dirs&#x3D;&#x2F;home&#x2F;tzcqupt&#x2F;logs&#x2F;kafka</span><br><span class="line">zookeeper.connect&#x3D;localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>启动Kafka</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure></li><li><p>停止Kafka</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-server-stop.sh</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="4"><li><p>wsl 下设置kafka的开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ssh</span></span><br><span class="line">/etc/init.d/ssh start</span><br><span class="line"><span class="comment">#zookeeper</span></span><br><span class="line">/home/tzcqupt/soft/apache-zookeeper-3.5.7-bin/bin/zkServer.sh start</span><br><span class="line">sleep 30s</span><br><span class="line"><span class="comment">#30s后启动kafka</span></span><br><span class="line"><span class="comment">#kafka</span></span><br><span class="line">nohup /home/tzcqupt/soft/kafka_2.11-2.4.0/bin/kafka-server-start.sh /home/tzcqupt/soft/kafka_2.11-2.4.0/config/server.properties &amp;</span><br><span class="line"><span class="comment">#network static ip</span></span><br><span class="line">ip addr add 192.168.50.28/24 broadcast 192.168.50.255 dev eth0 label eth0:1</span><br></pre></td></tr></table></figure></li></ol><h1 id="Kafka常见命令"><a href="#Kafka常见命令" class="headerlink" title="Kafka常见命令"></a>Kafka常见命令</h1><h2 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic tzcqupt-topic</span><br></pre></td></tr></table></figure><h2 id="查看已经创建的Topic信息"><a href="#查看已经创建的Topic信息" class="headerlink" title="查看已经创建的Topic信息"></a>查看已经创建的Topic信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-console-producer.sh --broker-list 192.168.50.28:9092 --topic tzcqupt-topic</span><br></pre></td></tr></table></figure><h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-console-consumer.sh --bootstrap-server 192.168.50.28:9092 --topic tzcqupt-topic --from-beginning</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kafka的安装&quot;&gt;&lt;a href=&quot;#Kafka的安装&quot; class=&quot;headerlink&quot; title=&quot;Kafka的安装&quot;&gt;&lt;/a&gt;Kafka的安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装jdk8 &lt;code&gt;sudo apt install openjdk
      
    
    </summary>
    
    
      <category term="Kafka" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 学习强化总结版</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/09/24/MySQL-summary/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/09/24/MySQL-summary/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h1><h2 id="Windows安装MySQL"><a href="#Windows安装MySQL" class="headerlink" title="Windows安装MySQL"></a>Windows安装MySQL</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>获取Mysql安装包，去官网直接下载：<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></li><li>解压到D盘根目录:D:/mysql-5.7.21</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>若本机已安装mysql，此处将端口设为3307</p><ol><li><p>配置my.ini：在根目录下新建my.ini文件，在[mysqld]下配置：</p></li><li><p>数据库根目录：basedir = D:/mysql-5.7.21-3307</p></li><li><p>数据存放目录：datadir = D:/mysql-5.7.21-3307/data</p></li><li><p>端口：port = 3307</p></li><li><p>添加字符编码的设置：character-set-server=utf8</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment">#设置mysql客户端默认字符集</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default-character-set</span>=utf8 </span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3307端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置mysql的安装目录</span></span><br><span class="line"></span><br><span class="line"><span class="attr">basedir</span> = D:/mysql-<span class="number">5.7</span>.<span class="number">21</span></span><br><span class="line"><span class="attr">datadir</span> = D:/mysql-<span class="number">5.7</span>.<span class="number">21</span>/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许最大连接数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建新表时将使用的默认存储引擎</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>开始执行安装和添加服务的步骤，在cmd中执行如下命令：</p><p><code>D:\mysql-5.7.21\bin&gt;mysqld install mysql --defaults-file=&quot;D:/mysql-5.7.21\my.ini&quot;</code><br>成功安装后会提示：Service successfully installed.</p></li><li><p>安装成功后服务的名称就是mysql</p></li></ol><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>mysql服务安装成功后，就需要初始化数据库了，否则是无法启动服务的。</p><p>在bin目录下执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\mysql-5.7.21\bin&gt;mysqld.exe --defaults-file="D:\mysql-5.7.21\my.ini" --initialize --explicit_defaults_for_timestamp</span><br></pre></td></tr></table></figure><p>default-file 即配置文件路径，必须进行指定。</p><p>–initialize 说明执行数据库初始化。</p><p>–explicit_defaults_for_timestamp说明Timestamp类型的字段，必须进行指定，否则就是NULL。（这个是为了避免麻烦，因为5.6以后的mysql的Timestamp类型字段进行了一些调整）</p><h3 id="启动-停止数据库"><a href="#启动-停止数据库" class="headerlink" title="启动/停止数据库"></a>启动/停止数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>接下来就需要登录修改密码了，登录的临时密码在data目录的的日志文件里是”.err”文件，打开搜索”password”关键字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-11-07T02:39:33.180905Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: <span class="comment">#JheTLHho2!L</span></span><br></pre></td></tr></table></figure><p>临时密码就是：<code>#JheTLHho2!L</code></p><p>登录mysql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\mysql-5.7.21\bin&gt;mysql -u root -p</span><br><span class="line">Enter password:<span class="comment">#JheTLHho2!L</span></span><br></pre></td></tr></table></figure><blockquote><p>登录其他主机mysql</p><p><code>mysql -h ip -uroot -p</code></p></blockquote><p>登录成功后，修改root的密码了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password = password(<span class="string">'root123'</span>);</span><br></pre></td></tr></table></figure><h2 id="Linux安装MySQL"><a href="#Linux安装MySQL" class="headerlink" title="Linux安装MySQL"></a>Linux安装MySQL</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="卸载原有的MySQL"><a href="#卸载原有的MySQL" class="headerlink" title="卸载原有的MySQL"></a>卸载原有的MySQL</h4><ol><li><p>关闭正在运行的MySQL</p><p><code>systemctl stop mysql</code></p></li><li><p>查看MySQL是否运行</p><ul><li><p><code>systemctl status mysql</code></p></li><li><p><code>ps -ef |grep mysql</code></p></li></ul></li><li><p>查看原有的MySQL</p><p><code>rpm -qa|grep -i mysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql-community-libs-5.5.62-2.el7.x86_64</span><br><span class="line">mysql-community-server-5.5.62-2.el7.x86_64</span><br><span class="line">mysql-community-client-5.5.62-2.el7.x86_64</span><br><span class="line">mysql-community-common-5.5.62-2.el7.x86_64</span><br></pre></td></tr></table></figure></li><li><p>卸载原有的MySQL组件</p><p>执行下面的命令依次卸载</p><ul><li><code>yum -y remove mysql-community-client-5.5.62-2.el7.x86_64</code></li><li><code>yum -y remove mysql-community-libs-5.5.62-2.el7.x86_64</code></li><li><code>yum -y remove mysql-community-common-5.5.62-2.el7.x86_64</code></li></ul></li></ol><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><h5 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入自定义的mysql目录</span></span><br><span class="line">[root@VM_0_17_centos ~]<span class="comment">## cd /usr/local/soft/mysql</span></span><br><span class="line"><span class="comment">#下载软件包</span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## wget -c https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar</span></span><br><span class="line"><span class="comment">#解压包</span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## tar -xvf mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar</span></span><br><span class="line"><span class="comment">#查看包</span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## ls</span></span><br><span class="line">mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar                 </span><br><span class="line">mysql-community-libs-5.7.23-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-client-5.7.23-1.el7.x86_64.rpm           </span><br><span class="line">mysql-community-libs-compat-5.7.23-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.23-1.el7.x86_64.rpm           </span><br><span class="line">mysql-community-minimal-debuginfo-5.7.23-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-5.7.23-1.el7.x86_64.rpm            </span><br><span class="line">mysql-community-server-5.7.23-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-5.7.23-1.el7.x86_64.rpm         </span><br><span class="line">mysql-community-server-minimal-5.7.23-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-5.7.23-1.el7.x86_64.rpm  </span><br><span class="line">mysql-community-test-5.7.23-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-devel-5.7.23-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="依次安装MySQL-rpm"><a href="#依次安装MySQL-rpm" class="headerlink" title="依次安装MySQL rpm"></a>依次安装MySQL rpm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos mysql]<span class="comment">#rpm -ivh mysql-community-server-5.7.23-1.el7.x86_64.rpm --force --nodeps</span></span><br><span class="line">rpm -ivh mysql-community-libs-5.7.23-1.el7.x86_64.rpm --force --nodeps</span><br><span class="line">rpm -ivh mysql-community-client-5.7.23-1.el7.x86_64.rpm --force --nodeps</span><br><span class="line">rpm -ivh mysql-community-common-5.7.23-1.el7.x86_64.rpm --force --nodeps</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.23-1.el7.x86_64.rpm --force --nodeps</span><br></pre></td></tr></table></figure><h4 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## systemctl start mysqld</span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## ps -aux|grep mysqld</span></span><br><span class="line">mysql     5983  0.0 16.9 1139408 172280 ?      Sl   11:30   0:01 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">root      8268  0.0  0.0 112712   964 pts/1    R+   12:39   0:00 grep --color=auto mysqld</span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">##</span></span><br></pre></td></tr></table></figure><blockquote><p>启动失败，需要对配置文件进行配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## vim /etc/my.cnf</span></span><br><span class="line"><span class="comment">#配置文件内容</span></span><br><span class="line"><span class="comment">#数据库存放目录，如果不存在旧创建</span></span><br><span class="line">datadir=/var/lib/mysql/data</span><br><span class="line"><span class="comment">#连接文件，如果不存在则创建，并设置mysql用户所有者和mysql组</span></span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="comment">#定义默认时间戳</span></span><br><span class="line">explicit_defaults_for_timestamp=<span class="literal">true</span></span><br><span class="line"><span class="comment">#设置运行用户</span></span><br><span class="line">user=mysql</span><br></pre></td></tr></table></figure><h4 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## systemctl enable mysqld </span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## systemctl daemon-reload</span></span><br></pre></td></tr></table></figure><h4 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h4><ol><li><p>查看默认的root密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## cat /var/log/mysqld.log |grep 'temporary password'</span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">#[Note] A temporary password is generated for root@localhost: iefe_ggtr; </span></span><br><span class="line"><span class="comment">#其中 iefe_ggtr; 就是初始密码了。</span></span><br></pre></td></tr></table></figure></li><li><p>(可选)查询不到密码，需要初始化数据库，生成默认系统库表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## mysqld --initialize --user=mysql --console </span></span><br><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## grep 'temporary password' /var/log/mysqld.log </span></span><br><span class="line">[Note] A temporary password is generated <span class="keyword">for</span> root@localhost: iefe_ggtr</span><br></pre></td></tr></table></figure></li><li><p>登录MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos mysql]<span class="comment">## mysql -uroot -p</span></span><br><span class="line">Enter password: iefe_ggtr</span><br><span class="line"><span class="comment">## 登录成功</span></span><br><span class="line">mysql-&gt;</span><br></pre></td></tr></table></figure></li><li><p>（可选）使用查询到的默认密码登录失败。</p><ol><li><p>修改<code>/etc/my.cnf</code>，在<code>[mysqld]</code>下面添加一行: <code>skip-grant-tables=1</code>，让<code>mysqld</code>启动时不对密码进行验证</p></li><li><p>重启<code>mysqld</code>服务 ：<code>systemctl restart mysqld</code></p></li><li><p>使用 root 用户登录：<code>mysql -uroot</code></p></li><li><p><code>use mysql</code>切换到<code>mysql</code>数据库，更新<code>user</code>表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 网上说明执行这条语句，能将root用户的密码修改为root123</span></span><br><span class="line">update user <span class="built_in">set</span> authentication_string = password ( <span class="string">'root123'</span> ), password_expired = <span class="string">'N'</span> , password_last_changed = now() <span class="built_in">where</span> user = <span class="string">'root'</span> ;</span><br><span class="line"><span class="comment">## 自己实际环境中执行</span></span><br><span class="line">update user <span class="built_in">set</span> authentication_string = password ( <span class="string">'root123'</span> )<span class="built_in">where</span> user = <span class="string">'root'</span> ;</span><br></pre></td></tr></table></figure></li><li><p>退出<code>mysql</code>，修改<code>/etc/my.cnf</code>文件，注释掉之前的<code>skip-grant-tables=1</code>。</p></li><li><p>重启<code>mysqld</code>服务，使用新密码登录即可。</p></li></ol></li></ol><h4 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password = password(<span class="string">'root123'</span>);</span><br></pre></td></tr></table></figure><h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment"># 将skip-grant-tables注释掉</span></span><br><span class="line"><span class="comment"># 刷新配置</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="comment"># 直接登录 mysql -uroot -p</span></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">&gt;mysql update user <span class="built_in">set</span> authentication_string=password(<span class="string">'newpassword'</span>)  <span class="built_in">where</span> user=<span class="string">'root'</span> </span><br><span class="line"><span class="comment"># 退出mysql,编辑配置文件,去掉skip-grant-tables的注释</span></span><br><span class="line"><span class="comment"># 使用新密码登录mysql</span></span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看已安装的依赖包</span><br><span class="line">dpkg --list|grep mysql</span><br><span class="line">#卸载</span><br><span class="line">sudo apt-get remove mysql-common</span><br><span class="line">#卸载不掉可以用这个命令</span><br><span class="line">sudo apt-get autoremove --purge mysql-server-5.7</span><br></pre></td></tr></table></figure><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#更新apt-get，更新后将会使用最新资源库</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">#安装MySQL:</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line">#查看MySQL版本: </span><br><span class="line">mysql -V</span><br><span class="line"></span><br><span class="line">#进入MySQL: </span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">#启动: </span><br><span class="line">sudo service mysql start</span><br><span class="line"></span><br><span class="line">#重启:</span><br><span class="line">sudo service mysql restart </span><br><span class="line"></span><br><span class="line">#关闭: </span><br><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure><h4 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use mysql;</span><br><span class="line">update user set authentication_string&#x3D;PASSWORD(&quot;tzcqupt@root&quot;) where user&#x3D;&#39;root&#39;;</span><br><span class="line">update user set plugin&#x3D;&quot;mysql_native_password&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h4 id="授权远程登录"><a href="#授权远程登录" class="headerlink" title="授权远程登录"></a>授权远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host &#x3D; &#39;%&#39; where user &#x3D; &#39;root&#39;;</span><br></pre></td></tr></table></figure><h4 id="修改编码格式"><a href="#修改编码格式" class="headerlink" title="修改编码格式"></a>修改编码格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;character%&#39;;</span><br><span class="line">#找到mysqld.cnf文件：</span><br><span class="line">find &#x2F; -name mysqld.cnf</span><br><span class="line">##修改的内容</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line"></span><br><span class="line">collation_server&#x3D;utf8_general_ci</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zixuephp.net/article-261.html" target="_blank" rel="noopener">https://zixuephp.net/article-261.html</a></p><p><a href="https://blog.csdn.net/qq_23077403/article/details/85093705" target="_blank" rel="noopener">https://blog.csdn.net/qq_23077403/article/details/85093705</a></p><h1 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h1><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><table><thead><tr><th align="left">类型</th><th align="left">字节数</th><th align="left">无符号值范围</th></tr></thead><tbody><tr><td align="left"><code>unsigned tinyint</code></td><td align="left">1</td><td align="left">0 到 255</td></tr><tr><td align="left"><code>unsigned smallint</code></td><td align="left">2</td><td align="left">0 到 65535</td></tr><tr><td align="left"><code>unsigned int</code></td><td align="left">4</td><td align="left">0 到 43亿</td></tr><tr><td align="left"><code>unsigned bigint</code></td><td align="left">8</td><td align="left">0 到10 <sup>19</sup></td></tr></tbody></table><p><code>int(n)</code> 无论 n 等于多少, int永远占4个字节;n 表示的是显示宽度，不足的用 0 补足，超过的无视长度而直接显示整个数字，但这要整型设置了 <code>unsigned zerofill</code> 才有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE test3 (</span><br><span class="line">       `a` int,</span><br><span class="line">       `b` int(5),</span><br><span class="line">       `c` int(5) unsigned,</span><br><span class="line">       `d` int(5) zerofill,</span><br><span class="line">       `e` int(5) unsigned zerofill,</span><br><span class="line">       `f` int    zerofill,</span><br><span class="line">       `g` int    unsigned zerofill</span><br><span class="line">     );</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test3 values (1,1,1,1,1,1,1),(11,11,11,11,11,11,11),(12345,12345,12345,12345,12345,12345,12345);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test3;</span><br><span class="line">+<span class="comment">-------+-------+-------+-------+-------+------------+------------+</span></span><br><span class="line">| a     | b     | c     | d     | e     | f          | g          |</span><br><span class="line">+<span class="comment">-------+-------+-------+-------+-------+------------+------------+</span></span><br><span class="line">|     1 |     1 |     1 | 00001 | 00001 | 0000000001 | 0000000001 |</span><br><span class="line">|    11 |    11 |    11 | 00011 | 00011 | 0000000011 | 0000000011 |</span><br><span class="line">| 12345 | 12345 | 12345 | 12345 | 12345 | 0000012345 | 0000012345 |</span><br><span class="line">+<span class="comment">-------+-------+-------+-------+-------+------------+------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test3;</span><br><span class="line">| Table | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                   </span><br><span class="line">| test3 | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test3`</span> (</span><br><span class="line">  <span class="string">`a`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`b`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`c`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`d`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> zerofill <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`e`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="keyword">unsigned</span> zerofill <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`f`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> zerofill <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`g`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> zerofill <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>原始的d字段是<code>有符号</code>的,使用了<code>zerofill</code>会自动转为无符号</p></blockquote><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>float/double/decimal</p><ol><li><p>float 数值类型用于表示单精度浮点数值，而 double 数值类型用于表示双精度浮点数值，float 和 double 都是浮点型，而 decimal 是定点型。</p></li><li><p>浮点型和定点型可以用类型名称后加（M，D）来表示(如经纬度<code>decimal(10,7)</code>)，M 表示该值的总共长度，D 表示小数点后面的长度，M 和 D 又称为精度和标度。</p></li><li><p>float 和 double 在不指定精度时，默认会按照实际的精度来显示，而 DECIMAL 在不指定精度时，默认整数为 10，小数为 0。</p></li><li><p>decimal 采用的是<strong>四舍五入</strong>,float 和 double 采用的是<strong>四舍六入五成双</strong></p><blockquote><p><strong>四舍六入五成双</strong>:就是 5 以下舍弃 5 以上进位，如果需要处理数字为 5 的时候，需要看 5 后面是否还有不为 0 的任何数字，如果有，则直接进位，如果没有，需要看 5 前面的数字，若是奇数则进位，若是偶数则将 5 舍掉</p></blockquote></li><li><p><code>float</code>、<code>double</code>会存在精度问题，<code>decimal</code>精度正常的</p></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th align="left">类型</th><th align="left">范围</th><th align="left">存储所需字节</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">char(M)</td><td align="left">[0,m]，m 的范围 [0,2<sup>8</sup>-1]</td><td align="left">m</td><td align="left">定长字符串</td></tr><tr><td align="left">varchar(M)</td><td align="left">[0,m]，m 的范围 [0,2<sup>16</sup>-1]</td><td align="left">m</td><td align="left">0-65535 字节</td></tr><tr><td align="left">tinyblob</td><td align="left">0-255(2<sup>8</sup>-1) 字节</td><td align="left">L+1</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">blob</td><td align="left">0-65535(2<sup>16</sup>-1) 字节</td><td align="left">L+2</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">mediumblob</td><td align="left">0-16777215(2<sup>24</sup>-1) 字节</td><td align="left">L+3</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">longblob</td><td align="left">0-4294967295(2<sup>32</sup>-1) 字节</td><td align="left">L+4</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">tinytext</td><td align="left">0-255(2<sup>8</sup>-1) 字节</td><td align="left">L+1</td><td align="left">短文本字符串</td></tr><tr><td align="left">text</td><td align="left">0-65535(2<sup>16</sup>-1) 字节</td><td align="left">L+2</td><td align="left">长文本数据</td></tr><tr><td align="left">mediumtext</td><td align="left">0-16777215(2<sup>24</sup>-1) 字节</td><td align="left">L+3</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">longtext</td><td align="left">0-4294967295(2<sup>32</sup>-1) 字节</td><td align="left">L+4</td><td align="left">极大文本数据</td></tr></tbody></table><ol><li><p>char 类型占用固定长度，如果存放的数据为固定长度的建议使用 char 类型，如：手机号码、身份证等固定长度的信息。</p></li><li><p>表格中的 L 表示存储的数据本身占用的字节，L 以外所需的额外字节为存放该值的长度所需的字节数。</p><p>MySQL 通过存储值的内容及其长度来处理可变长度的值，这些额外的字节是无符号整数。</p></li></ol><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><table><thead><tr><th align="left">类型</th><th align="left">字节大小</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038 结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="数据类型选择建议"><a href="#数据类型选择建议" class="headerlink" title="数据类型选择建议"></a>数据类型选择建议</h2><ul><li><strong>选小不选大</strong>：一般情况下选择可以正确存储数据的最小数据类型，越小的数据类型通常更快，占用磁盘，内存和 CPU 缓存更小。</li><li><strong>简单就好</strong>：简单的数据类型的操作通常需要更少的 CPU 周期，例如：整型比字符操作代价要小得多，因为字符集和校对规则 (排序规则) 使字符比整型比较更加复杂。</li><li><strong>尽量避免 NULL</strong>：尽量制定列为 NOT NULL，除非真的需要 NULL 类型的值，有 NULL 的列值会使得索引、索引统计和值比较更加复杂。</li><li><strong>浮点类型的建议统一选择 decimal</strong></li><li><strong>记录时间的建议使用 int 或者 bigint 类型，将时间转换为时间戳格式，如将时间转换为秒、毫秒，进行存储，方便走索引</strong></li></ul><h1 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL 操作数据库、表"></a>DDL 操作数据库、表</h1><h2 id="数据库CRUD"><a href="#数据库CRUD" class="headerlink" title="数据库CRUD"></a>数据库CRUD</h2><ol><li>C(Create):创建<ul><li>创建数据库<br><code>create database 数据库名称;</code></li><li>创建数据库，判断不存在，再创建<br><code>create database if not exists 数据库名称;</code></li><li>创建数据库，并指定字符集<br><code>create database 数据库名称 character set 字符集名;</code></li><li>练习:创建db4数据库，判断是否存在，并制定字符集为gbk<br><code>create database if not exists db4 character set gbk;</code></li></ul></li><li>R(Retrieve):查询<ul><li>查询所有数据库的名称<br><code>show databases;</code></li><li>查询某个数据库的字符集:查询某个数据库的创建语句<br><code>show create database 数据库名称;</code></li></ul></li><li>U(Update):修改<br>修改数据库的字符集<br> <code>alter database 数据库名称 character set 字符集名称;</code></li><li>D(Delete):删除<ul><li>删除数据库<br><code>drop database 数据库名称;</code></li><li>判断数据库存在，存在再删除<br><code>drop database if exists 数据库名称;</code></li></ul></li><li>使用数据库  <ul><li>查询当前正在使用的数据库名称<br><code>select database();</code></li><li>使用数据库<br><code>use 数据库名称;</code></li></ul></li></ol><h2 id="操作表CRUD"><a href="#操作表CRUD" class="headerlink" title="操作表CRUD"></a>操作表CRUD</h2><h3 id="C-Create-创建"><a href="#C-Create-创建" class="headerlink" title="C(Create):创建"></a>C(Create):创建</h3><ul><li><p>语法  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">                    列名1 数据类型1,</span><br><span class="line">                    列名2 数据类型2,</span><br><span class="line">                    ....</span><br><span class="line">                    列名n 数据类型n</span><br><span class="line">                 );</span><br></pre></td></tr></table></figure><blockquote><p>注意：最后一列，不需要加逗号(,)</p></blockquote></li><li><p>创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">id int,</span><br><span class="line">name varchar(32),</span><br><span class="line">age int ,</span><br><span class="line">score double(4,1),</span><br><span class="line">birthday date,</span><br><span class="line">insert_time timestamp</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>复制表：<br><code>create table 表名 like 被复制的表名;</code>    </p></li></ul><h3 id="R-Retrieve-：查询"><a href="#R-Retrieve-：查询" class="headerlink" title="R(Retrieve)：查询"></a>R(Retrieve)：查询</h3><ul><li>查询某个数据库中所有的表名称<br><code>show tables;</code></li><li>查询表结构<br><code>desc 表名;</code></li></ul><h3 id="U-Update-修改"><a href="#U-Update-修改" class="headerlink" title="U(Update):修改"></a>U(Update):修改</h3><ol><li>修改表名<br><code>alter table 表名 rename to 新的表名;</code></li><li>修改表的字符集<br><code>alter table 表名 character set 字符集名称;</code></li><li>添加一列<br><code>alter table 表名 add 列名 数据类型;</code></li><li>修改列名称 类型<br><code>alter table 表名 change 列名 新列别 新数据类型;</code><br><code>alter table 表名 modify 列名 新数据类型;</code></li><li>删除列<br><code>alter table 表名 drop 列名;</code></li><li>D(Delete):删除<br><code>drop table 表名;</code><br><code>drop table  if exists 表名 ;</code></li></ol><h1 id="DML-增删改表中数据"><a href="#DML-增删改表中数据" class="headerlink" title="DML 增删改表中数据"></a>DML 增删改表中数据</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>  <code>insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);</code></p><ol><li>列名和值要一一对应。    </li><li>如果表名后，不定义列名，则默认给所有列添加值<br><code>insert into 表名 values(值1,值2,...值n);</code>      </li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ol><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>单表删除  <code>delete from 表名 [where 条件];</code><br>多表删除<code>delete [别名1,别名2] from 表1 [[as] 别名1],表2 [[as] 别名2] [where条件];</code></p><ol><li>如果不加条件，则删除表中所有记录。  </li><li>如果要删除所有记录  <ol><li><code>delete from 表名;</code> – <strong><em>不推荐使用</em></strong>。有多少条记录就会执行多少次删除操作  </li><li><code>TRUNCATE TABLE 表名;</code> – <strong>推荐使用</strong>，效率更高 先删除表，然后再创建一张一样的表。</li></ol></li></ol><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名1 &#x3D; 值1, 列名2 &#x3D; 值2,... [where 条件];</span><br></pre></td></tr></table></figure><blockquote><p>如果不加任何条件，则会将表中所有记录全部修改。</p></blockquote><h1 id="DQL-查询表中的记录-简单查询"><a href="#DQL-查询表中的记录-简单查询" class="headerlink" title="DQL 查询表中的记录 简单查询"></a>DQL 查询表中的记录 简单查询</h1><p>   <code>select * from 表名;</code></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">字段列表</span><br><span class="line">from</span><br><span class="line">表名列表</span><br><span class="line">where</span><br><span class="line">条件列表</span><br><span class="line">group by</span><br><span class="line">分组字段</span><br><span class="line">having</span><br><span class="line">分组之后的条件</span><br><span class="line">order by</span><br><span class="line">排序</span><br><span class="line">limit</span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><ol><li><p>多个字段的查询<br><code>select 字段名1，字段名2... from 表名;</code>  </p><blockquote><p>如果查询所有字段，则可以使用*来替代字段列表。</p></blockquote></li><li><p>去除重复<br><code>distinct</code></p></li><li><p>计算列</p><ol><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li><code>ifnull</code>(列名,默认值)<br>判断列名的值是否为 NULL,如果为 NULL 则返回第二个参数,如果不为 NULL 则返回第一个参数的值。  </li></ol></li><li><p>起别名<code>as</code>  </p><blockquote><p>as也可以省略</p></blockquote></li></ol><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ol><li><p>where子句后跟条件</p></li><li><p>运算符</p><ul><li><code>&gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</code></li><li><code>BETWEEN...AND</code></li><li><code>IN(集合)</code></li><li><code>LIKE：模糊查询</code><br>占位符：</li><li><code>_</code> 单个任意字符</li><li><code>%</code> 多个任意字符</li><li><code>IS NULL</code> </li><li><code>and</code> 或 <code>&amp;&amp;</code></li><li><code>or</code> 或 <code>||</code> </li><li><code>not</code>  或 <code>!</code></li></ul><blockquote><p>比较:数值按照大小比较,字符按照<code>ASCII</code>码对应的值进行比较,比较时按照字符对应的位置一个字符一个字符的比较。</p></blockquote></li></ol><ul><li><p>查询年龄大于20岁</p><p><code>SELECT * FROM student WHERE age &gt; 20;</code>     </p><p><code>SELECT * FROM student WHERE age &gt;= 20;</code></p></li><li><p>查询年龄等于20岁<br><code>SELECT * FROM student WHERE age = 20;</code></p></li><li><p>查询年龄不等于20岁<br><code>SELECT * FROM student WHERE age != 20;</code></p><p><code>SELECT * FROM student WHERE age &lt;&gt; 20;</code></p></li><li><p>查询年龄大于等于20 小于等于30  </p><p><code>SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;</code></p><p><code>SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;</code></p><p><code>SELECT * FROM student WHERE age BETWEEN 20 AND 30;</code></p></li><li><p>查询年龄22岁，18岁，25岁的信息<br><code>SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25</code></p><p><code>SELECT * FROM student WHERE age IN (22,18,25);</code></p></li><li><p>查询英语成绩为null<br><code>SELECT * FROM student WHERE english = NULL;</code></p><blockquote><p>不对的。null值不能使用 = (!=) 判断</p></blockquote><p><code>SELECT * FROM student WHERE english IS NULL;</code></p></li><li><p>查询英语成绩不为null<br><code>SELECT * FROM student WHERE english  IS NOT NULL;</code></p></li><li><p>查询姓马的有哪些？ like<br><code>SELECT * FROM student WHERE NAME LIKE &#39;马%&#39;;</code></p></li><li><p>查询姓名第二个字是化的人<br><code>SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;</code></p></li><li><p>查询姓名是3个字的人<br><code>SELECT * FROM student WHERE NAME LIKE &#39;___&#39;;</code></p></li><li><p>查询姓名中包含德的人<br><code>SELECT * FROM student WHERE NAME LIKE &#39;%德%&#39;;</code></p></li></ul><h2 id="NULL的坑"><a href="#NULL的坑" class="headerlink" title="NULL的坑"></a>NULL的坑</h2><p><strong>查询运算符、like、between and、in、not in对NULL值查询不起效。</strong></p><p><strong>IS NULL/IS NOT NULL（NULL值专用查询）</strong></p><h2 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from students;</span><br><span class="line">select * from students where name like &#39;%&#39;;</span><br></pre></td></tr></table></figure><p>当name没有NULL值时，返回的结果一样。</p><p>当name有NULL值时，<strong>第2个sql查询不出name为NULL的记录</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>like中的%可以匹配一个到多个任意的字符，_可以匹配任意一个字符</strong></li><li><strong>空值查询需要使用IS NULL或者IS NOT NULL，其他查询运算符对NULL值无效</strong></li><li><strong>建议创建表的时候，尽量设置表的字段不能为空，给字段设置一个默认值</strong></li></ul><h1 id="DQL-查询语句-复杂查询"><a href="#DQL-查询语句-复杂查询" class="headerlink" title="DQL 查询语句 复杂查询"></a>DQL 查询语句 复杂查询</h1><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><ul><li>语法：order by 子句<br><code>order by 排序字段1 排序方式1, 排序字段2 排序方式2...</code></li><li>排序方式<ul><li><code>ASC</code>：升序，默认的。</li><li><code>DESC</code>：降序。</li></ul></li></ul><blockquote><p>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。<br>如学生有年龄和成绩,先按照成绩降序排名,如果成绩一样,按照年龄升序排名给出结果</p></blockquote><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>将一列数据作为一个整体，进行纵向的计算。</p><ol><li><code>count</code>：计算个数<ol><li>一般选择非空的列：主键</li><li><code>count(*)</code></li></ol></li><li><code>max</code>：计算最大值</li><li><code>min</code>：计算最小值</li><li><code>sum</code>：计算和</li><li><code>avg</code>：计算平均值</li></ol><blockquote><p>聚合函数的计算，排除<code>null</code>值。  </p><ol><li>选择不包含非空的列进行计算  </li><li><code>IFNULL</code>函数</li></ol></blockquote><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ol><li><p>group by 分组字段；</p><blockquote><p>分组之后查询的字段：分组字段、聚合函数</p></blockquote></li><li><p>where 和 having 的区别？  </p><ol><li>where 在<strong>分组之前</strong>进行限定，如果不满足条件，则不参与分组。having在<strong>分组之后</strong>进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，<strong>having可以进行聚合函数的判断</strong>。</li></ol></li></ol><ul><li><p>按照性别分组。分别查询男、女同学的平均分  </p><p><code>SELECT sex , AVG(math) FROM student GROUP BY sex;</code></p></li><li><p>按照性别分组。分别查询男、女同学的平均分,人数  </p><p><code>SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;</code></p></li><li><p>按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组<br><code>SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;</code></p></li><li><p>按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人<br><code>SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;</code><br><code>SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</code>    </p></li></ul><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ol><li><p>语法：<code>limit</code> 开始的索引,每页查询的条数;</p><blockquote><p>limit [offset,] count;</p><p>offset 表示偏移量,就是跳过多少行记录,offset可以省略,默认为0,表示跳过0行</p><p>count 表示offset行之后开始取数据,取count行记录</p></blockquote></li><li><p>公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数&lt;==&gt;当前页=(索引/条数)+1<br>每页显示3条记录 </p><p><code>SELECT * FROM student LIMIT 0,3;</code> ===&gt; 第1页=(0/3)+1</p><p><code>SELECT * FROM student LIMIT 3,3;</code> ===&gt; 第2页=(3/3)+1</p><p><code>SELECT * FROM student LIMIT 6,3;</code> ===&gt; 第3页=(6/3)+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列 from 表名 limit (page - 1) * pageSize,pageSize;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>limit</code> 是一个MySQL”方言”,limit开始的索引默认为0,从0开始计数</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="获取前n行记录"><a href="#获取前n行记录" class="headerlink" title="获取前n行记录"></a>获取前n行记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 列 from 表 limit 0,n;</span><br><span class="line">#等价于</span><br><span class="line">select 列 from 表 limit n;</span><br></pre></td></tr></table></figure><h4 id="获取最大的一条记录"><a href="#获取最大的一条记录" class="headerlink" title="获取最大的一条记录"></a>获取最大的一条记录</h4><p>如我们需要获取订单金额最大的一条记录，可以这么做：先按照金额降序，然后取第一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a.id 订单编号,a.price 订单金额 from t_order a order by a.price desc limit 1;</span><br><span class="line">#等价于</span><br><span class="line">select a.id 订单编号,a.price 订单金额 from t_order a order by a.price desc limit 0,1;</span><br></pre></td></tr></table></figure><h4 id="获取排名第n到m的记录"><a href="#获取排名第n到m的记录" class="headerlink" title="获取排名第n到m的记录"></a>获取排名第n到m的记录</h4><p>我们需要先跳过n-1条记录，然后取m-n+1条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列 from 表 limit n-1,m-n+1;</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>有学生表，分数表，课程表==&gt;查询每门功课成绩最好的前两名</p><p><code>union 不能在 order by/limit后使用</code>。可以使用select a.* from(select…order by s.score limit 0,2)a union all select b.* from(..) b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select a.* from (select s.*, c.c_name, s2.s_score</span><br><span class="line">from student s</span><br><span class="line">         join score s2 on s.s_id &#x3D; s2.s_id</span><br><span class="line">         left join course c on s2.c_id &#x3D; c.c_id</span><br><span class="line">where s2.c_id &#x3D; &quot;01&quot; order by s2.s_score desc limit 0,2) a</span><br><span class="line">union all</span><br><span class="line">select b.* from (select s.*, c.c_name, s2.s_score</span><br><span class="line">from student s</span><br><span class="line">         join score s2 on s.s_id &#x3D; s2.s_id</span><br><span class="line">         left join course c on s2.c_id &#x3D; c.c_id</span><br><span class="line">where s2.c_id &#x3D; &quot;02&quot;  order by s2.s_score desc limit 0,2) b</span><br><span class="line">union all</span><br><span class="line">select c.* from (select s.*, c.c_name, s2.s_score</span><br><span class="line">from student s</span><br><span class="line">         join score s2 on s.s_id &#x3D; s2.s_id</span><br><span class="line">         left join course c on s2.c_id &#x3D; c.c_id</span><br><span class="line">where s2.c_id &#x3D; &quot;03&quot;</span><br><span class="line">order by s_score desc limit 0,2)c</span><br></pre></td></tr></table></figure><h1 id="MySQL-函数"><a href="#MySQL-函数" class="headerlink" title="MySQL 函数"></a>MySQL 函数</h1><h2 id="数值型函数"><a href="#数值型函数" class="headerlink" title="数值型函数"></a>数值型函数</h2><table><thead><tr><th align="left">函数名称</th><th align="left">作 用</th></tr></thead><tbody><tr><td align="left">abs</td><td align="left">求绝对值</td></tr><tr><td align="left">sqrt</td><td align="left">求二次方根</td></tr><tr><td align="left">mod</td><td align="left">求余数</td></tr><tr><td align="left">ceil 和 ceiling</td><td align="left">两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td align="left">floor</td><td align="left">向下取整，返回值转化为一个BIGINT</td></tr><tr><td align="left">rand</td><td align="left">生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td align="left">round</td><td align="left">对所传参数进行四舍五入</td></tr><tr><td align="left">sign</td><td align="left">返回参数的符号</td></tr><tr><td align="left">pow 和 power</td><td align="left">两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td align="left">sin</td><td align="left">求正弦值</td></tr><tr><td align="left">asin</td><td align="left">求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td align="left">cos</td><td align="left">求余弦值</td></tr><tr><td align="left">acos</td><td align="left">求反余弦值，与函数 COS 互为反函数</td></tr><tr><td align="left">tan</td><td align="left">求正切值</td></tr><tr><td align="left">atan</td><td align="left">求反正切值，与函数 TAN 互为反函数</td></tr><tr><td align="left">cot</td><td align="left">求余切值</td></tr></tbody></table><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th align="left">函数名称</th><th align="left">作 用</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td align="left">concat</td><td align="left">合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td align="left">insert</td><td align="left">替换字符串函数</td></tr><tr><td align="left">lower</td><td align="left">将字符串中的字母转换为小写</td></tr><tr><td align="left">upper</td><td align="left">将字符串中的字母转换为大写</td></tr><tr><td align="left">left</td><td align="left">从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td align="left">right</td><td align="left">从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td align="left">trim</td><td align="left">删除字符串左右两侧的空格</td></tr><tr><td align="left">replace</td><td align="left">字符串替换函数，返回替换后的新字符串</td></tr><tr><td align="left">substr 和 substring</td><td align="left">截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td align="left">reverse</td><td align="left">字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><table><thead><tr><th align="left">函数名称</th><th align="left">作 用</th></tr></thead><tbody><tr><td align="left">curdate 和 current_date</td><td align="left">两个函数作用相同，返回当前系统的日期值</td></tr><tr><td align="left">curtime 和 current_time</td><td align="left">两个函数作用相同，返回当前系统的时间值</td></tr><tr><td align="left">now 和 sysdate</td><td align="left">两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td align="left">unix_timestamp</td><td align="left">获取UNIX时间戳函数，返回一个以 UNIX 时间戳为基础的无符号整数</td></tr><tr><td align="left">from_unixtime</td><td align="left">将 UNIX 时间戳转换为时间格式，与UNIX_TIMESTAMP互为反函数</td></tr><tr><td align="left">month</td><td align="left">获取指定日期中的月份</td></tr><tr><td align="left">monthname</td><td align="left">获取指定日期中的月份英文名称</td></tr><tr><td align="left">dayname</td><td align="left">获取指定曰期对应的星期几的英文名称</td></tr><tr><td align="left">dayofweek</td><td align="left">获取指定日期是一周中是第几天，返回值范围是1~7,1=周日</td></tr><tr><td align="left">week</td><td align="left">获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td align="left">dayofyear</td><td align="left">获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td align="left">dayofmonth</td><td align="left">获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td align="left">year</td><td align="left">获取年份，返回值范围是 1970〜2069</td></tr><tr><td align="left">time_to_sec</td><td align="left">将时间参数转换为秒数</td></tr><tr><td align="left">sec_to_time</td><td align="left">将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td align="left">date_add 和 adddate</td><td align="left">两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td align="left">date_sub 和 subdate</td><td align="left">两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td align="left">addtime</td><td align="left">时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td align="left">subtime</td><td align="left">时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td align="left">datediff</td><td align="left">获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td align="left">date_format</td><td align="left">格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td align="left">weekday</td><td align="left">获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><h2 id="MySQL-聚合函数"><a href="#MySQL-聚合函数" class="headerlink" title="MySQL 聚合函数"></a>MySQL 聚合函数</h2><table><thead><tr><th align="left">函数名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">max</td><td align="left">查询指定列的最大值</td></tr><tr><td align="left">min</td><td align="left">查询指定列的最小值</td></tr><tr><td align="left">count</td><td align="left">统计查询结果的行数</td></tr><tr><td align="left">sum</td><td align="left">求和，返回指定列的总和</td></tr><tr><td align="left">avg</td><td align="left">求平均值，返回指定列数据的平均值</td></tr></tbody></table><h2 id="MySQL-流程控制函数"><a href="#MySQL-流程控制函数" class="headerlink" title="MySQL 流程控制函数"></a>MySQL 流程控制函数</h2><table><thead><tr><th align="left">函数名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">if</td><td align="left">判断，流程控制</td></tr><tr><td align="left">ifnull</td><td align="left">判断是否为空</td></tr><tr><td align="left">case</td><td align="left">搜索语句</td></tr></tbody></table><ol><li><p>IF(expr,v1,v2)</p><p>当 expr 为真是返回 v1 的值，否则返回 v2</p></li><li><p>IFNULL(v1,v2)</p><p>v1为空返回v2，否则返回v1。 </p></li><li><p>case相当于Java的if…else if.. else</p><p><strong>方式1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE  &lt;表达式&gt;</span><br><span class="line">   WHEN &lt;值1&gt; THEN &lt;操作&gt;</span><br><span class="line">   WHEN &lt;值2&gt; THEN &lt;操作&gt;</span><br><span class="line">   ...</span><br><span class="line">   ELSE &lt;操作&gt;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><p><strong>方式2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">    WHEN &lt;条件1&gt; THEN &lt;命令&gt;</span><br><span class="line">    WHEN &lt;条件2&gt; THEN &lt;命令&gt;</span><br><span class="line">    ...</span><br><span class="line">    ELSE commands</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><ol><li><p>数据准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_stu (</span><br><span class="line">  id   INT AUTO_INCREMENT  COMMENT &#39;编号&#39;,</span><br><span class="line">  name VARCHAR(10) COMMENT &#39;姓名&#39;,</span><br><span class="line">  sex  TINYINT COMMENT &#39;性别,0:未知,1:男,2:女&#39;,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) COMMENT &#39;学生表&#39;;</span><br></pre></td></tr></table></figure></li><li><p>方式一写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">      t.name 姓名,</span><br><span class="line">      (CASE t.sex</span><br><span class="line">       WHEN 1</span><br><span class="line">         THEN &#39;男&#39;</span><br><span class="line">       WHEN 2</span><br><span class="line">         THEN &#39;女&#39;</span><br><span class="line">       ELSE &#39;未知&#39; END) 性别</span><br><span class="line">    FROM t_stu t;</span><br></pre></td></tr></table></figure></li><li><p>方式二写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    t.name          姓名,</span><br><span class="line">    (CASE</span><br><span class="line">    WHEN t.sex &#x3D; 1</span><br><span class="line">    THEN &#39;男&#39;</span><br><span class="line">    WHEN t.sex &#x3D; 2</span><br><span class="line">    THEN &#39;女&#39;</span><br><span class="line">    ELSE &#39;未知&#39; END) 性别</span><br><span class="line">    FROM t_stu t;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="MySQL-查询深入"><a href="#MySQL-查询深入" class="headerlink" title="MySQL 查询深入"></a>MySQL 查询深入</h1><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>有两个集合A和B，笛卡尔积表示A集合中的元素和B集合中的元素任意相互关联产生的所有可能的结果。</p><p>假如A中有m个元素，B中有n个元素，<strong>A、B笛卡尔积</strong>产生的结果有<strong>m*n</strong>个结果，相当于循环遍历两个集合中的元素，任意组合。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表1,表2[,表N];</span><br><span class="line">#或者</span><br><span class="line">select 字段 from 表1 join 表2 [join 表N];</span><br></pre></td></tr></table></figure><h4 id="Java-伪代码"><a href="#Java-伪代码" class="headerlink" title="Java 伪代码"></a>Java 伪代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object eleA : A)&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object eleB : B)&#123;</span><br><span class="line">        System.out.print(eleA+<span class="string">","</span>+eleB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>内连接相当于在笛卡尔积的基础上加上了连接的条件。</p><p>当没有连接条件的时候，内连接上升为笛卡尔积。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表1 inner join 表2 on 连接条件;</span><br><span class="line">select 字段 from 表1 join 表2 on 连接条件;</span><br><span class="line">select 字段 from 表1, 表2 [where 关联条件];</span><br></pre></td></tr></table></figure><h4 id="Java-伪代码-1"><a href="#Java-伪代码-1" class="headerlink" title="Java 伪代码"></a>Java 伪代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(Object eleA : A)&#123;</span><br><span class="line">    for(Object eleB : B)&#123;</span><br><span class="line">        if(连接条件是否为true)&#123;</span><br><span class="line">            System.out.print(eleA+&quot;,&quot;+eleB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>分为:主表和从表，要查询的信息<strong>主要</strong>来自于哪个表，谁就是主表。</p><p>外连接查询结果为主表中所有记录。如果从表中有和它匹配的，则显示匹配的值，这部分相当于内连接查询出来的结果；如果从表中没有和它匹配的，则显示null。</p><p><strong>左外链接：使用left join关键字，left join左边的是主表。</strong></p><p><strong>右外连接：使用right join关键字，right join右边的是主表。</strong></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>标量子查询（结果集只有一行一列）</li><li>列子查询（结果集只有一列多行）</li><li>行子查询（结果集有一行多列）</li><li>表子查询（结果集一般为多行多列）</li></ul><p><strong>按子查询出现在主查询中的不同位置分</strong></p><ul><li><p><strong>select后面</strong>：仅仅支持标量子查询。</p></li><li><p><strong>from后面</strong>：支持表子查询</p><blockquote><p>将子查询的结果集充当<code>一张表</code>，要求必须起别名，否者这个表找不到。然后将真实的表和子查询结果表进行连接查询。</p></blockquote></li><li><p><strong>where或having后面</strong>：支持标量子查询（单列单行）、列子查询（单列多行）、行子查询（多列多行）</p></li><li><p><strong>exists后面（即相关子查询）</strong>：表子查询（多行、多列）</p></li></ul><h2 id="MySQL-连接查询内部如何优化"><a href="#MySQL-连接查询内部如何优化" class="headerlink" title="MySQL 连接查询内部如何优化"></a>MySQL 连接查询内部如何优化</h2><p>msql内部使用了一个内存缓存空间，就叫他<code>join_buffer</code>吧，先把外循环的数据放到<code>join_buffer</code>中，然后对从表进行遍历，从表中取一条数据和<code>join_buffer</code>的数据进行比较，然后从表中再取第2条和<code>join_buffer</code>数据进行比较，直到从表遍历完成，使用这方方式来减少从表的io扫描次数，当<code>join_buffer</code>足够大的时候，大到可以存放主表所有数据，那么从表只需要全表扫描一次（即只需要一次全表io读取操作）。</p><p>mysql中这种方式叫做<code>Block Nested Loop</code>。</p><h1 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h1><h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><h3 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性(Atomicity)"></a>原子性(Atomicity)</h3><p>事务的整个过程如原子操作一样，最终要么全部成功，或者全部失败，这个原子性是从最终结果来看的，从最终结果来看这个过程是不可分割的。</p><h3 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h3><p>事务开始之前、执行中、执行完毕，这些时间点，多个人去观察事务操作的数据的时候，看到的数据都是一致的，比如在事务操作过程中，A连接看到的是100，那么B此时也去看的时候也是100，不会说AB看到的数据不一样，他们在某个时间点看到的数据是一致的。</p><h3 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性(Isolation)"></a>隔离性(Isolation)</h3><p>一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><h3 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性(Durability)"></a>持久性(Durability)</h3><p>一个事务一旦提交，他对数据库中数据的改变就应该是永久性的。当事务提交之后，数据会持久化到硬盘，修改是永久性的。</p><h2 id="事务中的问题"><a href="#事务中的问题" class="headerlink" title="事务中的问题"></a>事务中的问题</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>一个事务在执行的过程中读取到了<strong>其他事务还没有提交</strong>的数据。</p><h3 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h3><p>一个事务操作过程中可以读取到其他事务已经提交的数据。</p><p>事务中的每次读取操作，读取到的都是数据库中<strong>其他事务已提交</strong>的最新的数据（相当于当前读）</p><h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p>一个事务操作中对于一个读取操作不管多少次，读取到的结果都是一样的。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读现象例子：</p><p>可重复读模式下，比如有个用户表，手机号码为主键，有两个事物进行如下操作</p><p>事务A操作如下：<br>1、打开事务<br>2、查询号码为X的记录，不存在<br>3、插入号码为X的数据，插入报错（为什么会报错，先向下看）<br>4、查询号码为X的记录，发现还是不存在（由于是可重复读，所以读取记录X还是不存在的）</p><p>事物B操作：在事务A第2步操作时插入了一条X的记录，所以会导致A中第3步插入报错（违反了唯一约束）</p><p>上面操作对A来说就像发生了幻觉一样，明明查询X（A中第二步、第四步）不存在，但却无法插入成功</p><p><strong>幻读可以这么理解：事务中后面的操作（插入号码X）需要上面的读取操作（查询号码X的记录）提供支持，但读取操作却不能支持下面的操作时产生的错误，就像发生了幻觉一样。</strong></p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ol><li><strong>读未提交：READ-UNCOMMITTED</strong></li><li><strong>读已提交：READ-COMMITTED</strong></li><li><strong>可重复读：REPEATABLE-READ</strong></li><li><strong>串行：SERIALIZABLE</strong></li></ol><h3 id="隔离级别出现的问题"><a href="#隔离级别出现的问题" class="headerlink" title="隔离级别出现的问题"></a>隔离级别出现的问题</h3><table><thead><tr><th align="left">隔离级别</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td align="left">READ-UNCOMMITTED</td><td align="left">有</td><td align="left">有</td><td align="left">无</td></tr><tr><td align="left">READ-COMMITTED</td><td align="left">无</td><td align="left">有</td><td align="left">无</td></tr><tr><td align="left">REPEATABLE-READ</td><td align="left">无</td><td align="left">无</td><td align="left">有</td></tr><tr><td align="left">SERIALIZABLE</td><td align="left">无</td><td align="left">无</td><td align="left">无</td></tr></tbody></table><h1 id="MySQL-踩坑点"><a href="#MySQL-踩坑点" class="headerlink" title="MySQL 踩坑点"></a>MySQL 踩坑点</h1><h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><ul><li><strong>NULL作为布尔值的时候，不为1也不为0</strong></li><li><strong>任何值和NULL使用运算符（&gt;、&lt;、&gt;=、&lt;=、!=、&lt;&gt;）或者（in、not in、any/some、all），返回值都为NULL</strong></li><li><strong>当IN和NULL比较时，无法查询出为NULL的记录</strong></li><li><strong>当NOT IN 后面有NULL值时，不论什么情况下，整个sql的查询结果都为空</strong></li><li><strong>判断是否为空只能用IS NULL、IS NOT NULL</strong></li><li><strong>count(字段)无法统计字段为NULL的值，count(*)可以统计值为null的行</strong></li><li><strong>当字段为主键的时候，字段会自动设置为not null</strong></li><li><strong>NULL导致的坑让人防不胜防，强烈建议创建字段的时候字段不允许为NULL，给个默认值</strong></li></ul><h2 id="枚举ENUM"><a href="#枚举ENUM" class="headerlink" title="枚举ENUM"></a>枚举ENUM</h2><h3 id="ENUM-枚举值字面量和内部索引"><a href="#ENUM-枚举值字面量和内部索引" class="headerlink" title="ENUM 枚举值字面量和内部索引"></a>ENUM 枚举值字面量和内部索引</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>在创建表结构时，<code>MySQL</code> 会自动删除 <code>ENUM</code> 枚举值的尾随空格，例如会把 <code>&#39;medium &#39;</code> 转换成 <code>&#39;medium&#39;</code>。</p><h4 id="内部索引"><a href="#内部索引" class="headerlink" title="内部索引"></a>内部索引</h4><p>ENUM 类型中的任何一个枚举值都有一个内部的数字索引.</p><ol><li><p>创建表结构时指定的枚举值都会分配一个内部索引,索引的小标从<code>1</code>开始.</p></li><li><p>空字符串错误值的索引为 <code>0</code>，这样，我们可以直接使用 <code>0</code> 值来查询那些插入的或更新的无效的枚举值</p></li><li><p><code>NULL</code> 值的索引为 <code>NULL</code></p></li><li><p><code>ENUM</code> 最多只能包含 <code>65,535</code> 个不同的枚举值</p><blockquote><p>在老版本,或者取消了严格模式的MySQL中,如果在 <code>ENUM</code> 列中插入无效值（即，允许值列表中不存在的字符串），则会插入空字符串 ( <code>&#39;&#39;</code> ) 作为特殊错误值，这个空字符串可以通过此字符串具有数字值 <code>0</code> 来区分 <strong>正常</strong> 的空字符串</p></blockquote></li></ol><p>当在 ENUM 列上使用 <code>SUM()</code> 或 <code>AVG()</code> 等聚合函数时，因为这些函数的参数必须是一个数字，所以 <code>MySQL</code> 会自动使用它们的索引值作为参数。也就是说，对于需要计算的场景，都会使用内部索引。其实，真实的枚举值，只有在插入或者显示或者查询时才会用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers ENUM(&#39;0&#39;,&#39;1&#39;,&#39;2&#39;)</span><br><span class="line">#枚举成员的字符串值为 &#39;0&#39;、&#39;1&#39; 和 &#39;2&#39;，而数字索引值为 1 、2 和 3</span><br></pre></td></tr></table></figure><h3 id="ENUM-中的-NULL-或空-39-39-值问题"><a href="#ENUM-中的-NULL-或空-39-39-值问题" class="headerlink" title="ENUM 中的 NULL 或空 &#39;&#39; 值问题"></a>ENUM 中的 NULL 或空 <code>&#39;&#39;</code> 值问题</h3><ol><li><p>如果在 ENUM 列中插入无效值（即，允许值列表中不存在的字符串），则会插入空字符串 ( <code>&#39;&#39;</code> ) 作为特殊错误值，这个特殊错误值空字符串的索引为 <code>0</code> ，从而与实际的 <strong>正常</strong> 的空字符串 ( 索引大于 1 ) 区分开来</p><blockquote><p>当然了，如果启用了严格的 SQL 模式 ( <code>sql_mode</code> ) ，尝试插入无效的 ENUM 值会导致错误</p></blockquote></li><li><p>如果一个 <code>ENUM</code> 列添加了 <code>NULL</code> 约束，那么这个 <code>ENUM</code> 列就允许 <code>NULL</code> 值，且默认的值就是 <code>NULL</code></p></li><li><p>如果一个 <code>ENUM</code> 列添加了 <code>NOT NULL</code> 约束，那么它的默认值就是第一个枚举值。</p></li></ol><h3 id="ENUM-枚举值的排序问题"><a href="#ENUM-枚举值的排序问题" class="headerlink" title="ENUM 枚举值的排序问题"></a>ENUM 枚举值的排序问题</h3><p>因为 <code>ENUM</code> 类型存储的是枚举值的内部索引，所以 ENUM 值根据其索引号进行排序，具体显示出来，则取决于定义列是的枚举成员顺序。</p><p>例如，如果在定义列时，指定了 <code>&#39;b&#39;</code> 在 <code>&#39;a&#39;</code> 前面 <code>(&#39;b&#39;，&#39;a&#39;)</code>，那么 <code>&#39;b&#39;</code> 的顺序就会在 <code>&#39;a&#39;</code> 之前，且空字符串在非空字符串之前排序，<code>NULL</code> 值在所有其他枚举值之前排序</p><p>也就是排序的顺序默认是 <code>NULL &#39;&#39; &#39;b&#39; &#39;a&#39;</code></p><blockquote><ol><li>指定<code>ENUM</code>列的排序顺序使用字母顺序表</li><li>使用 <code>ORDER BY CAST (col AS CHAR)</code> 或 <code>ORDER BY CONCAT(col)</code> 确保 enum 列按词法排序而不是索引编号排序</li></ol></blockquote><h3 id="数据类型的限制"><a href="#数据类型的限制" class="headerlink" title="数据类型的限制"></a>数据类型的限制</h3><ol><li>枚举值不能是表达式,即使该表达式用于计算字符串值</li><li>不能使用用户变量作为枚举值</li><li><strong>建议不要使用数字用作枚举值</strong></li></ol><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><code>limit [offset,] count;</code></p><ol><li><p>limit 中offset和count的值不能用表达式</p></li><li><p>limit中offset 和 count都必须大于等于0</p></li><li><p>分页排序时，排序不要有二义性，二义性情况下可能会导致分页结果乱序，可以在后面追加一个主键排序</p><blockquote><p>排序过程中遇到相同的值,增加排序规则</p></blockquote></li></ol><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>分组中select后面的列只能有2种</p><ol><li>出现在group by 后面的列</li><li>使用聚合函数的列</li></ol><p>可以通过子查询的方式避免这种限制</p><p><strong>数据准备</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists t_order;</span><br><span class="line"></span><br><span class="line">-- 创建订单表</span><br><span class="line">create table t_order(</span><br><span class="line">  id int not null AUTO_INCREMENT COMMENT &#39;订单id&#39;,</span><br><span class="line">  user_id bigint not null comment &#39;下单人id&#39;,</span><br><span class="line">  user_name varchar(16) not null default &#39;&#39; comment &#39;用户名&#39;,</span><br><span class="line">  price decimal(10,2) not null default 0 comment &#39;订单金额&#39;,</span><br><span class="line">  the_year SMALLINT not null comment &#39;订单创建年份&#39;,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) comment &#39;订单表&#39;;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into t_order(user_id,user_name,price,the_year) values</span><br><span class="line">  (1001,&#39;路人甲Java&#39;,11.11,&#39;2017&#39;),</span><br><span class="line">  (1001,&#39;路人甲Java&#39;,22.22,&#39;2018&#39;),</span><br><span class="line">  (1001,&#39;路人甲Java&#39;,88.88,&#39;2018&#39;),</span><br><span class="line">  (1002,&#39;刘德华&#39;,33.33,&#39;2018&#39;),</span><br><span class="line">  (1002,&#39;刘德华&#39;,12.22,&#39;2018&#39;),</span><br><span class="line">  (1002,&#39;刘德华&#39;,16.66,&#39;2018&#39;),</span><br><span class="line">  (1002,&#39;刘德华&#39;,44.44,&#39;2019&#39;),</span><br><span class="line">  (1003,&#39;张学友&#39;,55.55,&#39;2018&#39;),</span><br><span class="line">  (1003,&#39;张学友&#39;,66.66,&#39;2019&#39;);</span><br></pre></td></tr></table></figure><p> <strong>需求：获取每个用户下单的最大金额及下单的年份，输出：用户id，最大金额，年份</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#解除mysql分组限制的原始写法,查询出的数据可能不准</span><br><span class="line">SELECT</span><br><span class="line">user_id as 用户id,</span><br><span class="line">max( price ) as 最大金额,</span><br><span class="line">the_year as 年份 </span><br><span class="line">FROM</span><br><span class="line">t_order t </span><br><span class="line">GROUP BY</span><br><span class="line">t.user_id;</span><br><span class="line"># 子查询的写法,避免分组查询限制</span><br><span class="line">SELECT</span><br><span class="line">user_id AS &#96;用户id&#96;,</span><br><span class="line">price AS 最大金额,</span><br><span class="line">the_year AS 年份 </span><br><span class="line">FROM</span><br><span class="line">t_order t1 </span><br><span class="line">WHERE</span><br><span class="line">( t1.user_id, t1.price ) IN ( SELECT t.user_id, MAX( t.price ) FROM t_order t GROUP BY t.user_id ) limit 1;</span><br><span class="line"></span><br><span class="line"># 第二种写法</span><br><span class="line">SELECT</span><br><span class="line">user_id AS &#96;用户id&#96;,</span><br><span class="line">price AS 最大金额,</span><br><span class="line">the_year AS 年份 </span><br><span class="line">FROM</span><br><span class="line">t_order t1,</span><br><span class="line">( SELECT t.user_id uid, MAX( t.price ) pc FROM t_order t GROUP BY t.user_id ) t2 </span><br><span class="line">WHERE</span><br><span class="line">t1.user_id &#x3D; t2.uid </span><br><span class="line">AND t1.price &#x3D; t2.pc </span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL-安装&quot;&gt;&lt;a href=&quot;#MySQL-安装&quot; class=&quot;headerlink&quot; title=&quot;MySQL 安装&quot;&gt;&lt;/a&gt;MySQL 安装&lt;/h1&gt;&lt;h2 id=&quot;Windows安装MySQL&quot;&gt;&lt;a href=&quot;#Windows安装MySQL&quot;
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习比较</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/08/28/design-pattern/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/08/28/design-pattern/</id>
    <published>2020-08-27T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><h2 id="类与类的交互关系"><a href="#类与类的交互关系" class="headerlink" title="类与类的交互关系"></a>类与类的交互关系</h2><ol><li><p>泛化</p><p>​    继承关系</p></li><li><p>实现</p><p>​    接口和实现类</p></li><li><p>聚合</p><p>包含关系,A类对象包含B类对象,B类对象的生命周期可以不依赖A类对象的生命周期,如课程和学生之间的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(B b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b=b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组合</p><p>包含关系,A类对象包含B类对象,B类对象的生命周期依赖A类对象的生命周期,B类对象不能单独存在,如鸟和翅膀的关系.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b=<span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h1&gt;&lt;h2 id=&quot;类与类的交互关系&quot;&gt;&lt;a href=&quot;#类与类的交互关系&quot; class=&quot;headerlink&quot; title=&quot;类与类的交互关系&quot;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法学习笔记</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/06/20/data-structure/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/06/20/data-structure/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关</strong></p><p><strong>系</strong>。</p><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><p>一般情况下,只要算法中不存在循环/递归语句,代码再长,时间复杂度也是O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">8</span>;  </span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum = i + j;</span><br></pre></td></tr></table></figure><h3 id="O-logn-O-nlogn"><a href="#O-logn-O-nlogn" class="headerlink" title="O(logn)/O(nlogn)"></a>O(logn)/O(nlogn)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;   </span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量i的取值为一个等比数列</p><p><img src="http://file.tzcqupt.top/%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97.jpg" alt="等比数列"></p><p>时间复杂度为O(logn) ,底数被忽略</p><p>如果⼀段代码的时间复杂度是O(logn)，我们循环执行n遍，时间复杂度就是O(nlogn)了.</p><p>如归并排序/快速排序的时间复杂度都是O(nlogn)</p><h3 id="O-m-n-、O-m-n"><a href="#O-m-n-、O-m-n" class="headerlink" title="O(m+n)、O(m*n)"></a><strong>O(m+n)、O(m*n)</strong></h3><p>代码中有两个不同的数据规模,m和n</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关</strong></p><p><strong>系</strong>。</p><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>数据元素之间存在一对一的线性关系</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h4><p>顺序存储的线性表称为顺序表,顺序表中的存储元素是连续的.</p><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><p>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息.</p><h3 id="常见的线性结构"><a href="#常见的线性结构" class="headerlink" title="常见的线性结构"></a>常见的线性结构</h3><p>数组、队列、链表和栈</p><h2 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h2><h3 id="常见的非线性结构"><a href="#常见的非线性结构" class="headerlink" title="常见的非线性结构"></a>常见的非线性结构</h3><p>二维数组，多维数组，广义表，树结构，图结构</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><ol><li>记录数组一共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ol><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><p><img src="http://file.tzcqupt.top/img/20200620234609.png" alt=""></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 原始数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] originArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">11</span>];</span><br><span class="line">    originArray[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    originArray[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">    originArray[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    printArray(originArray);</span><br><span class="line">    <span class="comment">// 0. 得到原始数组总不为0的元素的个数sum</span></span><br><span class="line">    <span class="keyword">int</span> sum = getArrayValueCount(originArray, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 1. 稀疏数组定义--sum+1,列始终为3</span></span><br><span class="line">    <span class="keyword">int</span>[][] sparseArray = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 给稀疏数组赋值</span></span><br><span class="line">    sparseArray[<span class="number">0</span>][<span class="number">0</span>] = originArray.length;</span><br><span class="line">    sparseArray[<span class="number">0</span>][<span class="number">1</span>] = originArray[<span class="number">0</span>].length;</span><br><span class="line">    sparseArray[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">    sparseArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    sparseArray[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    sparseArray[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    sparseArray[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    sparseArray[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    sparseArray[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    sparseArray[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    sparseArray[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    sparseArray[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"打印转换后的稀疏数组"</span>);</span><br><span class="line"></span><br><span class="line">    printArray(sparseArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将稀疏数组转换为原始数组</span></span><br><span class="line">    <span class="comment">// 1. 得到稀疏数组的sparseArray[0][0]和sparseArray[0][1]的值初始化数组</span></span><br><span class="line">    <span class="keyword">int</span>[][] targetArray = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArray[<span class="number">0</span>][<span class="number">0</span>]][sparseArray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">    <span class="comment">// 2. 给原始数组赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArray.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sparseArray[<span class="number">0</span>].length - <span class="number">2</span>; j++) &#123;</span><br><span class="line">        targetArray[sparseArray[i][j]][sparseArray[i][j + <span class="number">1</span>]] = sparseArray[i][j + <span class="number">2</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"打印转换后的原始数组"</span>);</span><br><span class="line">    printArray(targetArray);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 计算某个二维数组中不为某个值的元素个数</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> arrays 二维数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 有效元素个数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getArrayValueCount</span><span class="params">(<span class="keyword">int</span>[][] arrays, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrays[i][j] != target) &#123;</span><br><span class="line">          count++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 打印二维数组</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> arrays 数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">        System.out.print(arrays[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义数组"><a href="#自定义数组" class="headerlink" title="自定义数组"></a>自定义数组</h3><ol><li><p>数组中的元素支持泛型</p></li><li><p>数组自动扩容/缩容操作</p></li><li><p>新增/查找/修改/删除元素</p><p><a href="https://gitee.com/tzcqupt/JavaLearn/blob/develop/BaseSkill/src/main/java/com/tang/base/datastructure/array/Array.java" target="_blank" rel="noopener">代码查看</a></p></li></ol><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><h4 id="链表中间插入元素"><a href="#链表中间插入元素" class="headerlink" title="链表中间插入元素"></a>链表中间插入元素</h4><p><img src="http://file.tzcqupt.top/img/20200620232644.png" alt=""></p><h4 id="链表元素的删除"><a href="#链表元素的删除" class="headerlink" title="链表元素的删除"></a>链表元素的删除</h4><p><img src="http://file.tzcqupt.top/img/20200620233236.png" alt=""></p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p> 每个节点中有持有指向下一个节点的指针，只能按照一个方向遍历链表 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleNode</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Object data;<span class="comment">//存储数据</span></span><br><span class="line">  <span class="keyword">private</span> SingleNode nextNode;<span class="comment">//指向下一个节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p> 每个节点中两个指针，分别指向当前节点的上一个节点和下一个节点 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleNode</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Object data;<span class="comment">//存储数据</span></span><br><span class="line">  <span class="keyword">private</span> SingleNode prevNode;<span class="comment">//指向上一个节点</span></span><br><span class="line">  <span class="keyword">private</span> SingleNode nextNode;<span class="comment">//指向下一个节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表的优点"><a href="#链表的优点" class="headerlink" title="链表的优点"></a>链表的优点</h3><ol><li>可以快速定位到上一个或者下一个节点</li><li>可以快速删除数据，只需改变指针的指向即可，这点比数组好</li></ol><h3 id="链表的缺点"><a href="#链表的缺点" class="headerlink" title="链表的缺点"></a>链表的缺点</h3><ol><li>无法向数组那样，通过下标随机访问数据</li><li>查找数据需从第一个节点开始遍历，不利于数据的查找，查找时间和无需数据类似，需要全遍历，最差时间是O(N)</li></ol><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>特点:先进后出</p><p>入栈 push()</p><p>出栈 pop()</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>入队enqueue()</p><p>出队dequeue()</p><h3 id="常规队列"><a href="#常规队列" class="headerlink" title="常规队列"></a>常规队列</h3><p>特点:先进先出</p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><img src="http://file.tzcqupt.top/loop-queue.png" alt="循环队列"></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p> 二叉树是每个结点最多有两个子树的树结构，通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。 </p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li>每个结点都包含一个元素以及n个子树，这里0≤n≤2。</li><li>左子树和右子树是有顺序的，次序不能任意颠倒，左子树的值要<strong>小于</strong>父结点，右子树的值要<strong>大于</strong>父结点。 </li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><p>查询数据的效率不稳定，若树左右比较平衡的时，最差情况为O(logN)，如果插入数据是有序的，退化为了链表，查询时间变成了O(N)</p></li><li><p>数据量大的情况下，会导致树的高度变高，如果每个节点对应磁盘的一个块来存储一条数据，需IO次数大幅增加，显然用此结构来存储数据是不可取的</p></li></ol><h3 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h3><p> 它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 </p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p><code>B杠树</code>, B-树节点中可以放多个元素，主要是为了降低树的高度。 </p><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ol><li>每个节点最多有m个孩子，m称为b树的阶</li><li>除了根节点和叶子节点外，其它每个节点至少有Ceil(m/2)个孩子</li><li>若根节点不是叶子节点，则至少有2个孩子</li><li>所有叶子节点都在同一层，且不包含其它关键字信息</li><li>每个非终端节点包含n个关键字（健值）信息</li><li>关键字的个数n满足：ceil(m/2)-1 &lt;= n &lt;= m-1</li><li>ki(i=1,…n)为关键字，且关键字升序排序</li><li>Pi(i=1,…n)为指向子树根节点的指针。P(i-1)指向的子树的所有节点关键字均小于ki，但都大于k(i-1)</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>不利于范围查找</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ol><li>每个结点至多有m个子女</li><li>除根结点外,每个结点至少有[m/2]个子女，根结点至少有两个子女</li><li>有k个子女的结点必有k个关键字</li><li>父节点中持有访问子节点的指针</li><li>父节点的关键字在子节点中都存在（如上面的1/20/35在每层都存在），要么是最小值，要么是最大值，如果节点中关键字是升序的方式，父节点的关键字是子节点的最小值</li><li>最底层的节点是叶子节点</li><li>除叶子节点之外，其他节点不保存数据，只保存关键字和指针</li><li>叶子节点包含了所有数据的关键字以及data，叶子节点之间用链表连接起来，可以非常方便的支持范围查找</li></ol><h3 id="B-树和B-树总结"><a href="#B-树和B-树总结" class="headerlink" title="B+树和B-树总结"></a>B+树和B-树总结</h3><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ol><li>b+树中一个节点如果有k个关键字，最多可以包含k个子节点（k个关键字对应k个指针）；而b-树对应k+1个子节点（多了一个指向子节点的指针）</li><li>b+树除叶子节点之外其他节点值存储关键字和指向子节点的指针，而b-树还存储了数据，这样同样大小情况下，b+树可以存储更多的关键字</li><li>b+树叶子节点中存储了所有关键字及data，并且多个节点用链表连接，从上图中看子节点中数据从左向右是有序的，这样快速可以支撑范围查找（先定位范围的最大值和最小值，然后子节点中依靠链表遍历范围数据）</li></ol><h4 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h4><ol><li>B-Tree因为非叶子结点也保存具体数据，所以在查找某个关键字的时候找到即可返回。而B+Tree所有的数据都在叶子结点，每次查找都得到叶子结点。所以在同样高度的B-Tree和B+Tree中，B-Tree查找某个关键字的效率更高。</li><li>由于B+Tree所有的数据都在叶子结点，并且结点之间有指针连接，在找大于某个关键字或者小于某个关键字的数据的时候，B+Tree只需要找到该关键字然后沿着链表遍历就可以了，而B-Tree还需要遍历该关键字结点的根结点去搜索。</li><li>由于B-Tree的每个结点（这里的结点可以理解为一个数据页）都存储主键+实际数据，而B+Tree非叶子结点只存储关键字信息，而每个页的大小有限是有限的，所以同一页能存储的B-Tree的数据会比B+Tree存储的更少。这样同样总量的数据，B-Tree的深度会更大，增大查询时的磁盘I/O次数，进而影响查询效率</li></ol><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><ol><li><strong><code>i</code>从0开始，<code>i</code>与<code>i+1</code>比较，如果<code>i&gt;i+1</code>，那么就互换</strong> </li><li><strong><code>i</code>不断增加，直到<code>i（n是数组元素的个数，n-1</code>是数组已经最后一个元素） ，一趟下来，可以让数组元素中最大值排在数组的最后面</strong></li></ol><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="http://file.tzcqupt.top//bubble-sort.gif" alt=""></p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//外层循环是排序的趟数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="comment">//内层循环是当前趟数需要比较的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">        <span class="comment">// 交换,将大的放在后面</span></span><br><span class="line">        <span class="keyword">int</span> temp = array[j + <span class="number">1</span>];</span><br><span class="line">        array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">   </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>它的工作原理是每一次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始(末尾)位置，直到全部待排序的数据元素排完。选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p><p>稳定排序的好处</p><blockquote><p>如果我们只对一串数字排序，那么稳定与否确实不重要，因为一串数字的属性是单一的，就是数字值的大小。但是排序的元素往往不只有一个属性，例如我们对一群人按年龄排序，但是人除了年龄属性还有身高体重属性，在年龄相同时如果不想破坏原先身高体重的次序，就必须用稳定排序算法.</p></blockquote><h4 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h4><p><img src="http://file.tzcqupt.top//select-sort.gif" alt=""></p><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chooseSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    <span class="comment">//记录当前趟数的最大值的角标</span></span><br><span class="line">    <span class="keyword">int</span> pos ;</span><br><span class="line">    <span class="comment">// 临时值</span></span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 新的一趟</span></span><br><span class="line">      pos= <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j]&gt;array[pos])&#123;</span><br><span class="line">          pos=j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//交换</span></span><br><span class="line">      temp = array[pos];</span><br><span class="line">      array[pos] = array[array.length - <span class="number">1</span> - i];</span><br><span class="line">      array[array.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h4><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。</p><h4 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h4><p>不知道数组元素的情况下,<strong>把数组的第一个元素作为已经排好序的有序数据</strong></p><h4 id="图解-2"><a href="#图解-2" class="headerlink" title="图解"></a>图解</h4><p><img src="http://file.tzcqupt.top//insert-sort.gif" alt=""></p><h4 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 插入排序 将一个数据插入到已经排好序的有序数据中 */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      temp = array[i];</span><br><span class="line">      <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 如果前一位(已排序的数据)比当前数据要大</span></span><br><span class="line">      <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp) &#123;</span><br><span class="line">        <span class="comment">// 交换当前数据和前一位数据</span></span><br><span class="line">        array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">        <span class="comment">// 继续循环</span></span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 前者循环是j--,如果不满足while条件,则j+1为该元素的正确位置</span></span><br><span class="line">      array[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h4><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<strong>递归</strong>进行，以此达到整个数据变成有序序列。</p><h4 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h4><p>在数组中找一个支点(任意),经过一趟排序后，支点左边的数都要比支点小，支点右边的数都要比支点大！</p><h4 id="图解-3"><a href="#图解-3" class="headerlink" title="图解"></a>图解</h4><p><img src="http://file.tzcqupt.top/quick-sort.gif" alt=""></p><h4 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSortImpl</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i=left;</span><br><span class="line">   <span class="keyword">int</span> j= right;</span><br><span class="line">   <span class="comment">// 支点</span></span><br><span class="line">   <span class="keyword">int</span> pivot = arr[(i+j)/<span class="number">2</span>];</span><br><span class="line">   <span class="comment">// 左右两边进行扫描,只要没交替,就一直扫描</span></span><br><span class="line">   <span class="keyword">while</span> (i&lt;=j)&#123;</span><br><span class="line">     <span class="comment">//寻找直到比支点大的数</span></span><br><span class="line">     <span class="keyword">while</span> (pivot &gt; arr[i])&#123;</span><br><span class="line">       i++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//寻找直到比支点小的数</span></span><br><span class="line">     <span class="keyword">while</span> (pivot &lt; arr[j])&#123;</span><br><span class="line">       j--;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//此时已经分别找到了比支点小的数(右边)、比支点大的数(左边)，它们进行交换</span></span><br><span class="line">     <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">       <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">       arr[i] = arr[j];</span><br><span class="line">       arr[j] = temp;</span><br><span class="line">       i++;</span><br><span class="line">       j--;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//“左边”再做排序，直到左边剩下一个数(递归出口)</span></span><br><span class="line">     <span class="keyword">if</span> (left &lt; j)&#123;</span><br><span class="line">       quickSortImpl(arr, left, j);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//“右边”再做排序，直到右边剩下一个数(递归出口)</span></span><br><span class="line">     <span class="keyword">if</span> (i &lt; right)&#123;</span><br><span class="line">       quickSortImpl(arr, i, right);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h1&gt;&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/06/02/Linux-related/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/06/02/Linux-related/</id>
    <published>2020-06-01T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="腾讯云相关"><a href="#腾讯云相关" class="headerlink" title="腾讯云相关"></a>腾讯云相关</h1><h2 id="让客户端和腾讯云一直保持连接"><a href="#让客户端和腾讯云一直保持连接" class="headerlink" title="让客户端和腾讯云一直保持连接"></a>让客户端和腾讯云一直保持连接</h2><ol><li><p>修改<code>sshd_config</code>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"># 找到并修改</span></span><br><span class="line"><span class="comment">#服务端每隔多少秒向客户端发送一个心跳数据</span></span><br><span class="line">ClientAliveInterval 30</span><br><span class="line"><span class="comment">#客户端多少次没有响应，服务器自动断开连接</span></span><br><span class="line">ClientAliveCountMax 86400</span><br></pre></td></tr></table></figure></li><li><p>重启<code>sshd</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_17_centos ~]<span class="comment"># service sshd restart</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Xshell-登录腾讯云缓慢"><a href="#Xshell-登录腾讯云缓慢" class="headerlink" title="Xshell 登录腾讯云缓慢"></a>Xshell 登录腾讯云缓慢</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/<span class="built_in">log</span>/btmp</span><br><span class="line">touch /var/<span class="built_in">log</span>/btmp</span><br></pre></td></tr></table></figure><h1 id="软件安装相关"><a href="#软件安装相关" class="headerlink" title="软件安装相关"></a>软件安装相关</h1><h2 id="软件下载相关"><a href="#软件下载相关" class="headerlink" title="软件下载相关"></a>软件下载相关</h2><p>下载github的指定版本,去gitee下载,然后使用maven编译.如下载nacos</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Prelease-nacos -DskipTests clean install -U</span><br></pre></td></tr></table></figure><h2 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h2><blockquote><p>确保安装了Java</p></blockquote><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat-stable&#x2F;jenkins.repo </span><br><span class="line">sudo rpm --import https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat-stable&#x2F;jenkins.io.key</span><br></pre></td></tr></table></figure><h4 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure><p>输入y进行安装即可</p><h3 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h3><ol><li><p><a href="https://mirror.tuna.tsinghua.edu.cn/jenkins/redhat-stable/" target="_blank" rel="noopener">下载<code>.rpm</code>文件</a></p></li><li><p>安装<code>.rpm</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jenkins-2.235.5-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>查看安装位置 <code>rpm -qc jenkins</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]<span class="comment"># rpm -qc jenkins</span></span><br><span class="line">/etc/init.d/jenkins</span><br><span class="line">/etc/logrotate.d/jenkins</span><br><span class="line">/etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure></li><li><p>端口修改<code>vi /etc/sysconfig/jenkins</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_PORT&#x3D;&quot;8081&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动<code>service jenkins start</code></p><blockquote><p>报错需要修改文件<code>/etc/init.d/jenkins</code></p><p>将<code>/usr/bin/java</code>改为自己java的地址</p><p>自己Java地址的查看方式为<code>which java</code></p></blockquote></li></ol><h3 id="WAR包安装"><a href="#WAR包安装" class="headerlink" title="WAR包安装"></a>WAR包安装</h3><ol><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/war/2.251/jenkins.war" target="_blank" rel="noopener">下载WAR包</a></p></li><li><p>将WAR包放在tomcat的webapps下面</p></li><li><p>启动tomcat</p></li><li><p>tomcat启动后,会生成一个.jenkins文件夹在root目录下<code>/root/.jenkins/</code></p></li><li><p>浏览器上输入IP地址(<a href="http://ip:端口/jenkins)即可访问(http://www.tzcqupt.top/jenkins/)">http://ip:端口/jenkins)即可访问(http://www.tzcqupt.top/jenkins/)</a></p></li><li><p>复制生成的密码<code>/root/.jenkins/initialAdminPassword</code></p></li><li><p>进入页面后,安装建议的插件</p></li><li><p>如果插件安装失败,通过<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins下载插件" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins下载插件</a>.</p><p>插件管理中的高级进行上传.</p></li></ol><h3 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h3><p><a href="https://www.jenkins.io/zh/doc/book/installing/#debianubuntu" target="_blank" rel="noopener">安装Jenkins</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;debian&#x2F;jenkins.io.key | sudo apt-key add -</span><br><span class="line">sudo sh -c &#39;echo deb http:&#x2F;&#x2F;pkg.jenkins.io&#x2F;debian-stable binary&#x2F; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;jenkins.list&#39;</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="安装成功但无法访问jenkins"><a href="#安装成功但无法访问jenkins" class="headerlink" title="安装成功但无法访问jenkins"></a>安装成功但无法访问jenkins</h4><ol><li><p>禁用防火墙即可</p><ol><li>关闭防火墙</li></ol><p><code>systemctl stop firewalld.service</code></p><ol start="2"><li>禁止开机启动</li></ol><p><code>systemctl disable firewalld.service</code></p></li><li><p>确保安全组已打开相应端口</p></li></ol><h4 id="插件下载慢的解决办法"><a href="#插件下载慢的解决办法" class="headerlink" title="插件下载慢的解决办法"></a>插件下载慢的解决办法</h4><h5 id="插件下载管理"><a href="#插件下载管理" class="headerlink" title="插件下载管理"></a>插件下载管理</h5><p>进入jenkins的插件下载管理</p><p><code>http://ip:端口/jenkins/pluginManager/advanced</code></p><p>修改 <strong>Update Site</strong>中的URL的值为<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><h5 id="修改default-json"><a href="#修改default-json" class="headerlink" title="修改default.json"></a>修改default.json</h5><p>进入<code>/root/.jenkins/updates</code>中编辑default.json文件</p><p>替换所有插件的下载url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. default.json里面是updates.jenkins-ci.org</span><br><span class="line">:1,$s&#x2F;http:\&#x2F;\&#x2F;updates.jenkins-ci.org\&#x2F;download&#x2F;https:\&#x2F;\&#x2F;mirrors.tuna.tsinghua.edu.cn\&#x2F;jenkins&#x2F;g</span><br><span class="line">2. default.json面是updates.jenkins.io</span><br><span class="line">:1,$s&#x2F;https:\&#x2F;\&#x2F;updates.jenkins.io\&#x2F;download&#x2F;https:\&#x2F;\&#x2F;mirrors.tuna.tsinghua.edu.cn\&#x2F;jenkins&#x2F;g</span><br></pre></td></tr></table></figure><p>替换连接测试url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:1,$s&#x2F;http:\&#x2F;\&#x2F;www.google.com&#x2F;https:\&#x2F;\&#x2F;www.baidu.com&#x2F;g</span><br></pre></td></tr></table></figure><p>保存并退出</p><p>重启jenkins <code>http://ip:端口/jenkins/restart</code></p><h4 id="Jenkins任务下载git仓库失败"><a href="#Jenkins任务下载git仓库失败" class="headerlink" title="Jenkins任务下载git仓库失败"></a>Jenkins任务下载git仓库失败</h4><p>Jenkins源码管理git报错：Host key verification failed</p><ol><li><p>jenkins用户创建ssh-key和gitee通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 切换为jenkins用户</span><br><span class="line">sudo su -s &#x2F;bin&#x2F;bash jenkins</span><br><span class="line"># 执行git命令</span><br><span class="line">git ls-remote -h git@ip:xxx.git HEAD</span><br><span class="line"># 下载失败则生成ssh-key  在gitee上配置</span><br><span class="line">ssh-keygen -t rsa -C &quot;tzcqupt@jenkins.com&quot;</span><br><span class="line"># 在终端提示中输入yes</span><br></pre></td></tr></table></figure></li><li><p>切换jenkins运行角色为root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;default&#x2F;jenkins</span><br><span class="line">#修改jenkins以root用户运行</span><br><span class="line">JENKINS_USER&#x3D;root</span><br><span class="line">JENKINS_GROUP&#x3D;root</span><br><span class="line">#重启jenkins</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置git时-凭证添加后选取不了"><a href="#配置git时-凭证添加后选取不了" class="headerlink" title="配置git时,凭证添加后选取不了"></a>配置git时,凭证添加后选取不了</h4><p>去Jenkins的全局凭证管理里面添加</p><h4 id="Jenkins-执行任务时-没有权限"><a href="#Jenkins-执行任务时-没有权限" class="headerlink" title="Jenkins 执行任务时,没有权限"></a>Jenkins 执行任务时,没有权限</h4><ol><li><p>修改jenkins以root用户运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;default&#x2F;jenkins</span><br><span class="line">#修改jenkins以root用户运行</span><br><span class="line">JENKINS_USER&#x3D;root</span><br><span class="line">JENKINS_GROUP&#x3D;root</span><br><span class="line">#重启jenkins</span><br></pre></td></tr></table></figure></li><li><p>给相关的目录(配置的maven 仓库路径)权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share</span><br><span class="line">#把该目录和子级目录的权限赋值给jenkins用户组</span><br><span class="line">chown -R jenkins:jenkins maven-repo</span><br><span class="line">systemctl restart jenkins.service</span><br></pre></td></tr></table></figure></li></ol><h4 id="Jenkins-执行任务时maven下载jar包失败"><a href="#Jenkins-执行任务时maven下载jar包失败" class="headerlink" title="Jenkins 执行任务时maven下载jar包失败"></a>Jenkins 执行任务时maven下载jar包失败</h4><p>通过<code>apt install maven</code>安装maven 3.6.0下载jar包失败,删除该版本,降低为3.5.4</p><blockquote><p>需要关联软连接 /usr/bin/mvn</p><figure class="highlight plain"><figcaption><span>-s</span><a href="/usr/local/soft/maven/apache-maven-3.5.4/bin/mvn">/usr/bin/mvn```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;ll &#x2F;usr&#x2F;bin&#x2F;mvn </span><br></pre></td></tr></table></figure></blockquote><h4 id="Jenkins离线安装插件"><a href="#Jenkins离线安装插件" class="headerlink" title="Jenkins离线安装插件"></a>Jenkins离线安装插件</h4><p>Jenkins报413错误</p><p>修改nginx的配置文件</p><ol><li><p>查找nginx的配置文件位置</p><p><code>find / -name nginx.conf</code></p></li><li><p>修改nginx的配置文件</p><p>添加<code>client_max_body_size 10M;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.abc.com;</span><br><span class="line"> </span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    add_header Access-Control-Allow-Headers *;</span><br><span class="line">    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line">     </span><br><span class="line">    client_max_body_size 10M;</span><br><span class="line"> </span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">       ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx</p><p><code>nginx -s reload</code></p></li></ol><h3 id="配置gitee"><a href="#配置gitee" class="headerlink" title="配置gitee"></a>配置gitee</h3><p><a href="https://gitee.com/help/articles/4193" target="_blank" rel="noopener">gitee插件文档</a></p><blockquote><p>使用离线安装的方式,前往<a href="https://mirror.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件</a>下载插件</p></blockquote><p>部署Java项目并运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取正在运行的程序pid</span></span><br><span class="line">pid=$(ps -aux|grep $JOB_NAME | grep -v grep| gawk '&#123;print $2&#125;')</span><br><span class="line">if [ $&#123;#pid&#125; != 0 ]</span><br><span class="line">    then kill -9 $pid</span><br><span class="line">fi</span><br><span class="line">cd $WORKSPACE</span><br><span class="line">mvn clean package</span><br><span class="line">nohup java -jar $WORKSPACE/target/$JOB_NAME.jar -Xmx128m -Xms256m -Xss4m &amp;</span><br><span class="line">pid=$(ps -aux|grep $JOB_NAME | grep -v grep| gawk '&#123;print $2&#125;')</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取正在运行的程序的pid并判断其字符串长度，0为不存在(即构建失败)</span></span><br><span class="line">if [ $&#123;#pid&#125; == 0 ]</span><br><span class="line">    then</span><br><span class="line">     echo "*****  BUILD FAILED  ******"</span><br><span class="line">     exit 1</span><br><span class="line">     else</span><br><span class="line">     echo "*****  BUILD SUCCESS  *****"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="卸载Jenkins"><a href="#卸载Jenkins" class="headerlink" title="卸载Jenkins"></a>卸载Jenkins</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service jenkins stop</span><br><span class="line">yum clean all</span><br><span class="line">yum -y remove jenkins</span><br><span class="line">rm -rf &#x2F;var&#x2F;cache&#x2F;jenkins</span><br><span class="line">rm -rf &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;</span><br><span class="line">rm -rf &#x2F;etc&#x2F;init.d&#x2F;jenkins</span><br><span class="line">rm -rf &#x2F;etc&#x2F;logrotate.d&#x2F;jenkins</span><br><span class="line">rm -rf &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br></pre></td></tr></table></figure><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><ol><li><p>下载软件包</p></li><li><p>安装maven软件包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xf apache-maven-3.5.4-bin.tar.gz </span><br><span class="line">mv apache-maven-3.5.4 &#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line"># 与jenkins联合使用时，jenkins会到&#x2F;usr&#x2F;bin&#x2F;下找mvn命令，如果没有回报错</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;maven&#x2F;bin&#x2F;mvn  &#x2F;usr&#x2F;bin&#x2F;mvn　　　　</span><br><span class="line">ll &#x2F;usr&#x2F;local&#x2F;maven&#x2F;</span><br><span class="line">ll &#x2F;usr&#x2F;bin&#x2F;mvn</span><br></pre></td></tr></table></figure></li><li><p>环境变量修改 <code>/etc/profile/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line">export PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATH</span><br><span class="line">#使环境变量生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li><li><p>查看安装的mvn版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which mvn</span><br><span class="line">mvn -version</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装Yapi"><a href="#安装Yapi" class="headerlink" title="安装Yapi"></a>安装Yapi</h2><p><a href="https://yapi.baidu.com/doc/devops/index.ht" target="_blank" rel="noopener">官网内网部署</a></p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="Ubuntu-安装nodejs-npm-git-mongodb"><a href="#Ubuntu-安装nodejs-npm-git-mongodb" class="headerlink" title="Ubuntu 安装nodejs npm git mongodb"></a>Ubuntu 安装<code>nodejs</code> <code>npm</code> <code>git</code> <code>mongodb</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#安装git</span><br><span class="line">sudo apt install git</span><br><span class="line">#安装mongodb(v3.6.3)</span><br><span class="line">sudo apt install mongodb</span><br><span class="line">sudo systemctl enable mongodb</span><br><span class="line">#安装nodejs</span><br><span class="line">sudo apt install nodejs</span><br><span class="line">#安装npm</span><br><span class="line">sudo apt install npm</span><br><span class="line">#查看版本(node 版本最好在v12.x.x版本)</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h4 id="修改安装的nodejs版本"><a href="#修改安装的nodejs版本" class="headerlink" title="修改安装的nodejs版本"></a>修改安装的<code>nodejs</code>版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装n工具管理node版本</span><br><span class="line">npm install n -g</span><br><span class="line">#安装指定版本</span><br><span class="line">n 12.16.3</span><br><span class="line">#卸载指定版本</span><br><span class="line">n rm 0.9.4 v0.10.0</span><br><span class="line">#查看已有的node版本并切换</span><br><span class="line">n</span><br></pre></td></tr></table></figure><h4 id="安装yapi-cli"><a href="#安装yapi-cli" class="headerlink" title="安装yapi-cli"></a>安装<code>yapi-cli</code></h4><p>node 版本安装<code>v12.22.1</code>版本即可,不然会有问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure><h4 id="使用pm2管理node服务"><a href="#使用pm2管理node服务" class="headerlink" title="使用pm2管理node服务"></a>使用<code>pm2</code>管理node服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#安装pm2</span><br><span class="line">sudo npm install -g pm2</span><br><span class="line"># 后台启动</span><br><span class="line">sudo pm2 start &#x2F;usr&#x2F;local&#x2F;soft&#x2F;yapi&#x2F;my-yapi&#x2F;vendors&#x2F;server&#x2F;app.js</span><br><span class="line"># 重命名任务</span><br><span class="line">sudo pm2 start &#x2F;usr&#x2F;local&#x2F;soft&#x2F;yapi&#x2F;my-yapi&#x2F;vendors&#x2F;server&#x2F;app.js --name yapi</span><br><span class="line"># 删除任务(进程)</span><br><span class="line">#sudo pm2 delete [进程名称]</span><br><span class="line">sudo pm2 delete app</span><br><span class="line">#让系统开机启动pm2管理的任务</span><br><span class="line">sudo pm2 startip</span><br><span class="line">#可选-保存修改</span><br><span class="line">sudo pm2 save</span><br></pre></td></tr></table></figure><h3 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a><code>nginx</code> 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在location &#x2F;添加</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">proxy_set_header Connection &quot;upgrade&quot;;</span><br></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h3 id="nginx-ssl-二级域名配置"><a href="#nginx-ssl-二级域名配置" class="headerlink" title="nginx ssl/二级域名配置"></a><strong>nginx ssl/二级域名配置</strong></h3><ol><li><p>dns域名解析配置</p></li><li><p><a href="https://letsencrypt.osfipin.com/" target="_blank" rel="noopener">申请免费ssl</a></p><blockquote><p>验证时,若遇到403,直接修改nginx.conf配置,第一行的<code>user www-data</code>改为<code>user root</code></p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid &#x2F;run&#x2F;nginx.pid;</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;modules-enabled&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 768;</span><br><span class="line"># multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">default_type application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;</span><br><span class="line"></span><br><span class="line">        upstream yapi &#123;</span><br><span class="line">        server 127.0.0.1:3000;</span><br><span class="line">       &#125; </span><br><span class="line"></span><br><span class="line">        server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name tzcqupt.top;</span><br><span class="line">return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">          location &#x2F; &#123;</span><br><span class="line">           root html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> server&#123;</span><br><span class="line">                listen 443;</span><br><span class="line">                ssl on;</span><br><span class="line">                server_name tzcqupt.top;</span><br><span class="line">                ssl_certificate &#x2F;usr&#x2F;local&#x2F;soft&#x2F;ssl&#x2F;tzcqupt-top&#x2F;certificate.crt;</span><br><span class="line">                ssl_certificate_key &#x2F;usr&#x2F;local&#x2F;soft&#x2F;ssl&#x2F;tzcqupt-top&#x2F;private.key;</span><br><span class="line">                ssl_session_timeout 5m;</span><br><span class="line">                ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">                ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">                ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                 root html;</span><br><span class="line"> index index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name yapi.tzcqupt.top;</span><br><span class="line">return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">listen 443;</span><br><span class="line">        ssl on;</span><br><span class="line">server_name yapi.tzcqupt.top;</span><br><span class="line">ssl_certificate &#x2F;usr&#x2F;local&#x2F;soft&#x2F;ssl&#x2F;x-tzcqupt-top&#x2F;certificate.crt;</span><br><span class="line">ssl_certificate_key &#x2F;usr&#x2F;local&#x2F;soft&#x2F;ssl&#x2F;x-tzcqupt-top&#x2F;private.key;</span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">      proxy_pass  http:&#x2F;&#x2F;yapi;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">     proxy_set_header  X-Real-IP        $remote_addr;</span><br><span class="line">    proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header X-NginX-Proxy true;</span><br><span class="line">      proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Linux常用相关操作"><a href="#Linux常用相关操作" class="headerlink" title="Linux常用相关操作"></a>Linux常用相关操作</h1><h2 id="查看Linux服务其内存使用情况"><a href="#查看Linux服务其内存使用情况" class="headerlink" title="查看Linux服务其内存使用情况"></a>查看Linux服务其内存使用情况</h2><ol><li><p><code>free</code> 命令</p><blockquote><ol><li>命令默认单位使kb 使用 <code>free -m</code>和<code>free -g</code>命令查看<code>MB</code>和<code>GB</code>,<code>free -h</code>自动选择合适的单位进行展示</li><li>Mem: 表示物理内存统计</li><li>Swap: 表示硬盘上交换分区的使用情况,shared表示共享内存,</li></ol></blockquote></li><li><p>top 命令</p><p>查看系统的实时负载,包括进程,CPU负载,内存使用等</p></li></ol><h2 id="查看端口情况"><a href="#查看端口情况" class="headerlink" title="查看端口情况"></a>查看端口情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-相关"><a href="#Ubuntu-相关" class="headerlink" title="Ubuntu 相关"></a>Ubuntu 相关</h2><h3 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h3><h3 id="配置网关和镜像地址"><a href="#配置网关和镜像地址" class="headerlink" title="配置网关和镜像地址"></a>配置网关和镜像地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subnet:192.168.66.0&#x2F;24</span><br><span class="line">Address:192.168.66.166</span><br><span class="line">Gateway:192.168.66.2</span><br><span class="line">Name Server:114.114.114.114</span><br><span class="line">#镜像地址</span><br><span class="line">http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Xshell-登录"><a href="#Xshell-登录" class="headerlink" title="Xshell 登录"></a>Xshell 登录</h3><p>确保能访问外网, 给root用户设置密码<code>sudo passwd</code></p><p>安装<code>wget</code>:<code>apt-get install wget</code></p><p>安装<code>SSH</code>:<code>apt-get install ssh</code></p><p>开启远程访问SSH权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#将PermitRootLogin without-password修改为： </span></span><br><span class="line">PermitRootLogin yes </span><br><span class="line"><span class="comment">#重启SSH</span></span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><blockquote><p>查看电脑的VMnet配置,设置为dhcp</p></blockquote><h2 id="脚本相关"><a href="#脚本相关" class="headerlink" title="脚本相关"></a>脚本相关</h2><h3 id="脚本定时将github代码同步到gitee"><a href="#脚本定时将github代码同步到gitee" class="headerlink" title="脚本定时将github代码同步到gitee"></a>脚本定时将github代码同步到gitee</h3><ol><li><p>前提:gitee和github都配置了linux的ssh的密钥</p></li><li><p><code>git clone git@gitee.com:tzcqupt/tzcqupt.git .</code></p><blockquote><p>后面的.表示就下载在当前目录,不新建目录</p></blockquote></li><li><p><code>git remote add github git@github.com:tzcqupt/tzcqupt.github.io.git</code></p></li><li><p>对origin重命名 <code>git remote rename origin gitee</code></p></li><li><p>新建同步脚本 <code>_sync_from_github_to_gitee.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line"></span><br><span class="line">git pull github master</span><br><span class="line"></span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><blockquote><ol><li>首次执行<code>git push</code>,会提示设置 push.default,执行<code>git config --global push.default simple</code>进行设置即可</li><li>在windows上新建的文件拷贝到linux上,需要执行 <code>dos2unix _sync_from_github_to_gitee.sh</code>,否则linux执行该命令系统会报错</li></ol></blockquote></li><li><p>给文件加执行权限<code>chmod +x _sync_from_github_to_gitee.sh</code></p></li><li><p>再增加定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">1 1 */2 * * /usr/<span class="built_in">local</span>/data/git/_sync_from_github_to_gitee.sh</span><br></pre></td></tr></table></figure></li></ol><h1 id="Nginx-RMPT服务器"><a href="#Nginx-RMPT服务器" class="headerlink" title="Nginx RMPT服务器"></a>Nginx RMPT服务器</h1><h2 id="安装Nginx-1"><a href="#安装Nginx-1" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="安装所需的开发包"><a href="#安装所需的开发包" class="headerlink" title="安装所需的开发包"></a>安装所需的开发包</h3><h4 id="Ubuntu系统"><a href="#Ubuntu系统" class="headerlink" title="Ubuntu系统"></a>Ubuntu系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">sudo apt-get install openssl libssl-dev</span><br><span class="line">sudo apt-get install zlib1g.dev</span><br><span class="line">sudo apt-get install zlib1g</span><br><span class="line">sudo apt-get install unzip</span><br></pre></td></tr></table></figure><h4 id="CentOS系统"><a href="#CentOS系统" class="headerlink" title="CentOS系统"></a>CentOS系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install pcre pcre-devel pcre-static pcre-tools</span><br><span class="line">yum install openssl openssl-static openssl-devel</span><br><span class="line">yum install wget unzip</span><br></pre></td></tr></table></figure><h3 id="下载nginx和nginx-rtmp-module"><a href="#下载nginx和nginx-rtmp-module" class="headerlink" title="下载nginx和nginx-rtmp-module"></a>下载nginx和nginx-rtmp-module</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.14.2.tar.gz</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;arut&#x2F;nginx-rtmp-module&#x2F;archive&#x2F;master.zip</span><br><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure><h3 id="编译和安装nginx"><a href="#编译和安装nginx" class="headerlink" title="编译和安装nginx"></a>编译和安装nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.14.2</span><br><span class="line">.&#x2F;configure --with-http_ssl_module --with-http_secure_link_module --add-module&#x3D;..&#x2F;nginx-rtmp-module-master</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>官网安装 具体参照<a href="http://ffmpeg.org/download.html#build-linux" target="_blank" rel="noopener">http://ffmpeg.org/download.html#build-linux</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS安装</span></span><br><span class="line">yum localinstall --nogpgcheck https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm </span><br><span class="line">yum install ffmpeg</span><br><span class="line"><span class="comment">#Ubuntu安装</span></span><br><span class="line">apt-get install ffmpeg</span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>修改<code>/usr/local/nginx/conf/nginx.conf</code>配置文件中<code>pid</code>的配置为<code>/var/run/nginx.pid</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br></pre></td></tr></table></figure><p>创建nginx日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;var&#x2F;log&#x2F;nginx&#x2F;</span><br></pre></td></tr></table></figure><p>创建SystemD自启动文件<code>/lib/systemd/system/nginx.service</code>为如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx t</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>nginx启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service  <span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl start nginx.service   <span class="comment"># 设置启动nginx</span></span><br><span class="line">systemctl stop nginx.service    <span class="comment"># 停止nginx</span></span><br></pre></td></tr></table></figure><h2 id="RTMP配置"><a href="#RTMP配置" class="headerlink" title="RTMP配置"></a>RTMP配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        notify_method get;</span><br><span class="line">        access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;</span><br><span class="line">        chunk_size 4096;</span><br><span class="line">        application live &#123;</span><br><span class="line">            # 开启直播模式</span><br><span class="line">            live on;</span><br><span class="line">            # 允许从任何源push流</span><br><span class="line">            allow publish all;</span><br><span class="line">            # 允许从任何地方来播放流</span><br><span class="line">            allow play all;</span><br><span class="line">            # 20秒内没有push，就断开链接。</span><br><span class="line">            drop_idle_publisher 20s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><h3 id="Nginx-配置校验"><a href="#Nginx-配置校验" class="headerlink" title="Nginx 配置校验"></a>Nginx 配置校验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t</span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><h3 id="添加hls配置"><a href="#添加hls配置" class="headerlink" title="添加hls配置"></a>添加hls配置</h3><ol><li><p>配置rtmp流产生hls文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/nginx/hls/</span><br><span class="line"><span class="comment">#创建存放hls文件的目录, 确保nobody用户可以读写该目录。</span></span><br><span class="line">chown nobody:root /usr/<span class="built_in">local</span>/nginx/hls/</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>配置nginx来访问hls文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rtmp_auto_push</span> <span class="literal">on</span>;</span><br><span class="line"><span class="section">rtmp</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">1935</span>;</span><br><span class="line">        <span class="attribute">notify_method</span> get;</span><br><span class="line">        <span class="attribute">access_log</span>  /var/log/nginx/access.log;</span><br><span class="line">        <span class="attribute">chunk_size</span> <span class="number">4096</span>;</span><br><span class="line">        <span class="attribute">application</span> live &#123;</span><br><span class="line">            <span class="comment"># 开启直播模式</span></span><br><span class="line">            <span class="attribute">live</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="comment"># 允许从任何源push流</span></span><br><span class="line">            <span class="attribute">allow</span> publish all;</span><br><span class="line">            <span class="comment"># 允许从任何地方来播放流</span></span><br><span class="line">            <span class="attribute">allow</span> play all;</span><br><span class="line">            <span class="comment"># 20秒内没有push，就断开链接。</span></span><br><span class="line">            <span class="attribute">drop_idle_publisher</span> <span class="number">20s</span>;</span><br><span class="line">            <span class="comment"># 开启HLS</span></span><br><span class="line">            <span class="attribute">hls</span> <span class="literal">on</span>; <span class="comment"># Enable HTTP Live Streaming</span></span><br><span class="line">            <span class="comment"># Pointing this to an SSD is better as this involves lots of IO</span></span><br><span class="line">            <span class="comment"># 设置hls存放目录</span></span><br><span class="line">            <span class="attribute">hls_path</span> /usr/local/nginx/hls/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置nginx来访问hls文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /hls &#123;</span><br><span class="line">    <span class="section">types</span> &#123;</span><br><span class="line">        application/vnd.apple.mpegurl m3u8;</span><br><span class="line">        video/mp2t ts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache; <span class="comment"># Prevent caching of HLS fragments</span></span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *; <span class="comment"># Allow web player to access our playlist</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="ffmpeg相关操作"><a href="#ffmpeg相关操作" class="headerlink" title="ffmpeg相关操作"></a>ffmpeg相关操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推送</span></span><br><span class="line">ffmpeg -re -i demo.mp4 -c copy -f flv <span class="string">'rtmp://192.168.0.199/live/demo'</span></span><br><span class="line"><span class="comment">#播放</span></span><br><span class="line">ffplay <span class="string">'rtmp://192.168.0.199/live/xiaozhupeiqi'</span></span><br></pre></td></tr></table></figure><h1 id="Nginx-代理相关"><a href="#Nginx-代理相关" class="headerlink" title="Nginx 代理相关"></a>Nginx 代理相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https 配置</span></span><br><span class="line">server &#123;</span><br><span class="line">       listen 443 ssl;  <span class="comment"># 1.1版本后这样写</span></span><br><span class="line">       server_name www.tzcqupt.top; <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">       ssl_certificate /etc/nginx/1_www.tzcqupt.top_bundle.crt;  <span class="comment"># 指定证书的位置，绝对路径</span></span><br><span class="line">       ssl_certificate_key /etc/nginx/2_www.tzcqupt.top.key;  <span class="comment"># 绝对路径，同上</span></span><br><span class="line">       ssl_session_timeout 5m;</span><br><span class="line">       ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#按照这个协议配置</span></span><br><span class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">       ssl_prefer_server_ciphers on;</span><br><span class="line">       location / &#123;</span><br><span class="line">           root   html; <span class="comment">#站点目录，绝对路径</span></span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">        location /blog/ &#123;</span><br><span class="line">          proxy_pass https://127.0.0.1/;</span><br><span class="line">       &#125;</span><br><span class="line">       location /redRain/ &#123;</span><br><span class="line">       <span class="comment">#代理到docker 里面的nginx</span></span><br><span class="line">       proxy_pass http://127.0.0.1:801/;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h1 id="WSL2-相关"><a href="#WSL2-相关" class="headerlink" title="WSL2 相关"></a>WSL2 相关</h1><p>Windows中安装Linux子系统Ubuntu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#列举相关的wsl服务,查看状态</span><br><span class="line">wsl -l --verbose</span><br></pre></td></tr></table></figure><h2 id="将安装的Ubuntu迁移到非系统盘"><a href="#将安装的Ubuntu迁移到非系统盘" class="headerlink" title="将安装的Ubuntu迁移到非系统盘"></a>将安装的<code>Ubuntu</code>迁移到非系统盘</h2><ol><li><p>下载 <a href="https://github.com/DDoSolitary/LxRunOffline/releases">LxRunOffline</a>,并解压</p></li><li><p>在解压后的目录打开PowerShell, 使用<code>LxRunOffline.exe list</code>命令查看你可以使用子系统名称 </p></li><li><p>使用 <code>lxrunoffline move</code> 进行迁移 ， -n 指定你要迁移的系统名 ，-d 指定你新系统的迁移路径 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\LxRunOffline.exe move -n Ubuntu-20.04 -d D:\soft\develop\Ubuntu20</span><br></pre></td></tr></table></figure><blockquote><p>若出现Couldn’t set the case sensitive attribute of the directory ….</p><p>Reason: Indicates that the directory trying to be deleted is not empty.</p><p>参考官方 <a href="https://github.com/DDoSolitary/LxRunOffline/issues/150">issue</a></p><p>下载<a href="https://ddosolitary-builds.sourceforge.io/LxRunOffline/LxRunOffline-v3.5.0-11-gfdab71a-msvc.zip重新解压执行" target="_blank" rel="noopener">https://ddosolitary-builds.sourceforge.io/LxRunOffline/LxRunOffline-v3.5.0-11-gfdab71a-msvc.zip重新解压执行</a></p></blockquote></li><li><p>使用<code>LxRunOffline.exe get-dir</code> 查询系统目录，可见已经更改成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\LxRunOffline.exe get-dir -n Ubuntu-20.04</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ubuntu-配置"><a href="#Ubuntu-配置" class="headerlink" title="Ubuntu 配置"></a>Ubuntu 配置</h2><h3 id="Xshell相关工具连接登录"><a href="#Xshell相关工具连接登录" class="headerlink" title="Xshell相关工具连接登录"></a>Xshell相关工具连接登录</h3><ol><li><p>安装ssh服务</p><p><code>sudo apt-get install openssh-server</code></p><p> <code>sudo apt-get install ssh</code></p></li><li><p>开启ssh服务<code>service ssh start</code></p></li><li><p>修改配置,允许远程连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">添加配置:PasswordAuthentication yes</span><br></pre></td></tr></table></figure></li><li><p>重启ssh服务 <code>service ssh restart</code></p></li></ol><h3 id="间接固定WSL2-的Ubuntu的ip地址"><a href="#间接固定WSL2-的Ubuntu的ip地址" class="headerlink" title="间接固定WSL2 的Ubuntu的ip地址"></a>间接固定WSL2 的Ubuntu的ip地址</h3><blockquote><p>WSL2 启动后,每次会为Ubuntu分配新的ip地址</p></blockquote><ol><li><p>在子系统中新建文件<code>/etc/init.wsl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ssh</span></span><br><span class="line">/etc/init.d/ssh start</span><br><span class="line"><span class="comment">#network static ip</span></span><br><span class="line">ip addr add 192.168.50.28/24 broadcast 192.168.50.255 dev eth0 label eth0:1</span><br></pre></td></tr></table></figure></li><li><p>在Windows上新建bat文件,并发送快捷方式到桌面上,设置快捷方式的运行权限为管理员权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl -d Ubuntu-20.04 -u root &#x2F;etc&#x2F;init.wsl</span><br><span class="line">netsh interface ip add address &quot;vEthernet (WSL)&quot; 192.168.50.93 255.255.255.0</span><br></pre></td></tr></table></figure><blockquote><p><code>Ubuntu-20.04</code> 为在Windows上使用<code>wsl -l</code>命令列举的Ubuntu名称</p></blockquote></li><li><p>测试,重启电脑,或者使用<code>wsl -t Ubuntu-20.04</code>关闭Ubuntu后,再点快捷方式,使用Xshell相关工具连接.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;腾讯云相关&quot;&gt;&lt;a href=&quot;#腾讯云相关&quot; class=&quot;headerlink&quot; title=&quot;腾讯云相关&quot;&gt;&lt;/a&gt;腾讯云相关&lt;/h1&gt;&lt;h2 id=&quot;让客户端和腾讯云一直保持连接&quot;&gt;&lt;a href=&quot;#让客户端和腾讯云一直保持连接&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Linux/"/>
    
      <category term="腾讯云" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>前端相关学习笔记</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/06/02/front-web/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/06/02/front-web/</id>
    <published>2020-06-01T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端其他知识"><a href="#前端其他知识" class="headerlink" title="前端其他知识"></a>前端其他知识</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ol><li><p>如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置<code>text-align:center</code> 来实现的</p></li><li><p>定宽块状元素</p><p>设置左右margin 值为auto来实现居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>定宽块状元素水平居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是定宽块状元素，我要水平居中显示。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>块级元素</p><p>把块级元素放在一排显示:display: flex</p><p>横轴显示参数justify-content</p><p>纵轴显示参数aligin-items</p></li></ol><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>::after</p><p>::before</p><h2 id="层布局模型"><a href="#层布局模型" class="headerlink" title="层布局模型"></a>层布局模型</h2><p>绝对定位:<code>position:absolute</code> 相对于其父元素来说,没有就是body</p><p><code>position:relative</code>相对于自己的以前位置</p><p><code>position:fixed</code>固定不动</p><p>相对其他元素定位:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span> 父元素==&gt;参照父元素定位 position:relative</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        子元素===&gt;position:absolute</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p><a href="https://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="noopener">学习教程</a></p><blockquote><p>微信小程序中若要求兼容到iOS8以下版本，需要开启样式自动补全。开启样式自动补全，在“设置”—“项目设置”—勾选“上传代码时样式自动补全”。</p></blockquote><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为Flex布局。</p><blockquote><p>行内元素也可以使用Flex布局.</p><p>设置为Flex布局后,元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>容器:<code>flex container</code></p><p>项目 <code>flex item</code></p><p>主轴:<code>main axis</code></p><p>交叉轴:<code>cross axis</code></p><p>主轴起点<code>main start</code></p><p>主轴终点 <code>main end</code></p><p>交叉轴起点 <code>cross start</code></p><p>交叉轴终点 <code>cross end</code></p><p><img src="http://file.tzcqupt.top/img/flex%E5%B8%83%E5%B1%80.png" alt="Flex布局"></p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>决定主轴的方向,默认row,主轴为水平方向,起点在左端.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>默认是一行排列,一行放不下,如何换行.默认nowrap,不换行.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">wrap:换行,第一行在上方</span></span><br><span class="line"><span class="comment">wrap-reverse 换行,第一行在下方</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>justify-content属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start左对齐</span></span><br><span class="line"><span class="comment">flex-end 右对齐</span></span><br><span class="line"><span class="comment">center 居中</span></span><br><span class="line"><span class="comment">space-between 两端对齐，项目之间的间隔都相等。</span></span><br><span class="line"><span class="comment">space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>align-items属性定义项目在交叉轴上<code>cross axis</code>如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start：交叉轴的起点对齐。</span></span><br><span class="line"><span class="comment">flex-end：交叉轴的终点对齐。</span></span><br><span class="line"><span class="comment">center：交叉轴的中点对齐。</span></span><br><span class="line"><span class="comment">baseline: 项目的第一行文字的基线对齐。</span></span><br><span class="line"><span class="comment">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-start：与交叉轴的起点对齐。</span></span><br><span class="line"><span class="comment">flex-end：与交叉轴的终点对齐。</span></span><br><span class="line"><span class="comment">center：与交叉轴的中点对齐。</span></span><br><span class="line"><span class="comment">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span></span><br><span class="line"><span class="comment">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span></span><br><span class="line"><span class="comment">stretch（默认值）：轴线占满整个交叉轴。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">   <span class="comment">/*auto (1 1 auto) 和 none (0 0 auto)。*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">学习网站</a></p><h3 id="babel转换为es5"><a href="#babel转换为es5" class="headerlink" title="babel转换为es5"></a>babel转换为es5</h3><p>若高级功能node不支持,使用babel转换成ES5</p><ol><li><p>babel转换配置,项目根目录添加<code>.babelrc</code>文件 </p></li><li><p>安装es6转换模块</p><figure class="highlight plain"><figcaption><span>install babel‐preset‐es2015 ‐‐save‐dev ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 全局安装命令行工具 </span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;cnpm install babel‐cli ‐g</span><br></pre></td></tr></table></figure></li><li><p>使用 </p><figure class="highlight plain"><figcaption><span>js文件名 ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 变量声明let</span><br><span class="line"></span><br><span class="line">1. es6之前,使用var关键字声明变量,无论声明在哪,都会被当作声明在函数的最顶部</span><br><span class="line"></span><br><span class="line">2. es6 let表示变量(函数内部),const表示常量(代码块内部),再次给const声明的常量赋值会报错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 模板字符串</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">&#x2F;&#x2F;es5 </span><br><span class="line">var name &#x3D; &#39;lux&#39; </span><br><span class="line">console.log(&#39;hello&#39; + name) </span><br><span class="line">&#x2F;&#x2F; es5 </span><br><span class="line">var msg &#x3D; &quot;Hi \ man!&quot; </span><br><span class="line">&#x2F;&#x2F;es6 字符串格式化$&#123;&#125;</span><br><span class="line">const name &#x3D; &#39;lux&#39; </span><br><span class="line">console.log(&#96;hello $&#123;name&#125;&#96;) &#x2F;&#x2F;hello lux</span><br><span class="line">&#x2F;&#x2F; es6 使用(&#96;&#96;)拼接多行字符串</span><br><span class="line">const template &#x3D; &#96;&lt;div&gt; </span><br><span class="line">&lt;span&gt;hello world&lt;&#x2F;span&gt; </span><br><span class="line">&lt;&#x2F;div&gt;&#96;</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### 函数默认参数</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">function action(num &#x3D; 200) &#123; </span><br><span class="line">    console.log(num) &#125;</span><br><span class="line">action() &#x2F;&#x2F;200 </span><br><span class="line">action(300) &#x2F;&#x2F;300</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### 箭头函数</span><br><span class="line"></span><br><span class="line">1. 省略function关键字来创建函数</span><br><span class="line">2. 省略return</span><br><span class="line">3. **继承当前上下文的this关键字**</span><br><span class="line"></span><br><span class="line">### 对象初始化简写</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">&#x2F;&#x2F;es5</span><br><span class="line">function people(name, age) &#123; </span><br><span class="line">    return &#123; </span><br><span class="line">        name: name, </span><br><span class="line">        age: age </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;es6</span><br><span class="line">function people(name, age) &#123; </span><br><span class="line">    return &#123; </span><br><span class="line">        name, </span><br><span class="line">        age </span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### 解构</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">&#x2F;&#x2F;es5</span><br><span class="line">const people &#x3D; &#123; </span><br><span class="line">    name: &#39;lux&#39;, </span><br><span class="line">    age: 20 </span><br><span class="line">&#125;</span><br><span class="line">const name &#x3D; people.name </span><br><span class="line">const age &#x3D; people.age </span><br><span class="line">console.log(name + &#39; ‐‐‐ &#39; + age)</span><br><span class="line">&#x2F;&#x2F;es6</span><br><span class="line">&#x2F;&#x2F;对象</span><br><span class="line">const people&#x3D;&#123;</span><br><span class="line">    name:&#39;lux&#39;,</span><br><span class="line">    age:20</span><br><span class="line">&#125;</span><br><span class="line">const &#123;name,age&#125;&#x3D;people</span><br><span class="line">console.log(&#39;$&#123;name&#125;---$&#123;age&#125;&#39;)</span><br><span class="line">&#x2F;&#x2F;数组 </span><br><span class="line">const color &#x3D; [&#39;red&#39;, &#39;blue&#39;] </span><br><span class="line">const [first, second] &#x3D; color </span><br><span class="line">console.log(first) &#x2F;&#x2F;&#39;red&#39; </span><br><span class="line">console.log(second) &#x2F;&#x2F;&#39;blue&#39;</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#### Spread Operator </span><br><span class="line"></span><br><span class="line">用于...组装对象或者数组</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">&#x2F;&#x2F;数组 </span><br><span class="line">const color &#x3D; [&#39;red&#39;, &#39;yellow&#39;] </span><br><span class="line">const colorful &#x3D; [...color, &#39;green&#39;, &#39;pink&#39;] </span><br><span class="line">console.log(colorful) &#x2F;&#x2F;[red, yellow, green, pink] &#x2F;&#x2F;对象 </span><br><span class="line">const alp &#x3D; &#123; fist: &#39;a&#39;, second: &#39;b&#39;&#125; </span><br><span class="line">const alphabets &#x3D; &#123; ...alp, third: &#39;c&#39; &#125; </span><br><span class="line">console.log(alphabets) </span><br><span class="line">&#x2F;&#x2F;&#123; &quot;fist&quot;: &quot;a&quot;, &quot;second&quot;: &quot;b&quot;, &quot;third&quot;: &quot;c&quot;</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#### improt、export 导入导出模块</span><br><span class="line"></span><br><span class="line">~~~js</span><br><span class="line">&#x2F;&#x2F;lib.js</span><br><span class="line">let fn0&#x3D;function()&#123; </span><br><span class="line">    console.log(&#39;fn0...&#39;); </span><br><span class="line">&#125;</span><br><span class="line">export &#123;fn0&#125;</span><br><span class="line">&#x2F;&#x2F; demo.js</span><br><span class="line">import &#123;fn0&#125; from &#39;.&#x2F;lib&#39;</span><br><span class="line">fn0();</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">&gt; node 8.x不支持,需要使用babel命令行工具执行</span><br><span class="line"></span><br><span class="line"># 微信小程序</span><br><span class="line"></span><br><span class="line">## [路由](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;)</span><br><span class="line"></span><br><span class="line">| 名称                                                         | 功能说明                                         |</span><br><span class="line">| :----------------------------------------------------------- | :----------------------------------------------- |</span><br><span class="line">| [wx.switchTab](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;wx.switchTab.html) | 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面 |</span><br><span class="line">| [wx.reLaunch](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;wx.reLaunch.html) | 关闭所有页面，打开到应用内的某个页面             |</span><br><span class="line">| [wx.redirectTo](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;wx.redirectTo.html) | 关闭当前页面，跳转到应用内的某个页面             |</span><br><span class="line">| [wx.navigateTo](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;wx.navigateTo.html) | 保留当前页面，跳转到应用内的某个页面             |</span><br><span class="line">| [wx.navigateBack](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;wx.navigateBack.html) | 关闭当前页面，返回上一页面或多级页面             |</span><br><span class="line"></span><br><span class="line">### &#96;wx.navigateTo&#96;</span><br><span class="line"></span><br><span class="line">保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 [wx.navigateBack](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;wx.navigateBack.html) 可以返回到原页面。小程序中页面栈最多十层。</span><br><span class="line"></span><br><span class="line">#### 请求参数</span><br><span class="line"></span><br><span class="line">**Object object**</span><br><span class="line"></span><br><span class="line">| 属性     | 类型     | 默认值 | 必填 | 说明                                                         |</span><br><span class="line">| :------- | :------- | :----- | :--- | :----------------------------------------------------------- |</span><br><span class="line">| url      | string   |        | 是   | 需要跳转的应用内非 tabBar 的页面的路径 (代码包路径), 路径后可以带参数。参数与路径之间使用 &#96;?&#96; 分隔，参数键与参数值用 &#96;&#x3D;&#96; 相连，不同参数用 &#96;&amp;&#96; 分隔；如 &#39;path?key&#x3D;value&amp;key2&#x3D;value2&#39; |</span><br><span class="line">| events   | Object   |        | 否   | 页面间通信接口，用于监听被打开页面发送到当前页面的数据。基础库 2.7.3 开始支持。 |</span><br><span class="line">| success  | function |        | 否   | 接口调用成功的回调函数                                       |</span><br><span class="line">| fail     | function |        | 否   | 接口调用失败的回调函数                                       |</span><br><span class="line">| complete | function |        | 否   | 接口调用结束的回调函数（调用成功、失败都会执行）             |</span><br><span class="line"></span><br><span class="line">#### &#96;object.success&#96; 回调函数</span><br><span class="line"></span><br><span class="line">##### 参数</span><br><span class="line"></span><br><span class="line">**Object res**</span><br><span class="line"></span><br><span class="line">| 属性           | 类型                                                         | 说明                 |</span><br><span class="line">| :------------- | :----------------------------------------------------------- | :------------------- |</span><br><span class="line">| &#96;eventChannel&#96; | [EventChannel](https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;api&#x2F;route&#x2F;EventChannel.html) | 和被打开页面进行通信 |</span><br><span class="line"></span><br><span class="line">#### 示例代码</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: &#39;test?id&#x3D;1&#39;,</span><br><span class="line">  events: &#123;</span><br><span class="line">    &#x2F;&#x2F; 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span><br><span class="line">    acceptDataFromOpenedPage: function(data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    someEvent: function(data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    &#x2F;&#x2F; 通过eventChannel向被打开页面传送数据</span><br><span class="line">    res.eventChannel.emit(&#39;acceptDataFromOpenerPage&#39;, &#123; data: &#39;test&#39; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;test.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad: function(option)&#123;</span><br><span class="line">    console.log(option.query)</span><br><span class="line">    const eventChannel &#x3D; this.getOpenerEventChannel()</span><br><span class="line">    eventChannel.emit(&#39;acceptDataFromOpenedPage&#39;, &#123;data: &#39;test&#39;&#125;);</span><br><span class="line">    eventChannel.emit(&#39;someEvent&#39;, &#123;data: &#39;test&#39;&#125;);</span><br><span class="line">    &#x2F;&#x2F; 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据</span><br><span class="line">    eventChannel.on(&#39;acceptDataFromOpenerPage&#39;, function(data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="编程注意事项"><a href="#编程注意事项" class="headerlink" title="编程注意事项"></a>编程注意事项</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">msg</span>: <span class="string">'Hello World'</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//在这次setData对界面渲染完毕后触发</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>setData其一般调用格式是 setData(data, callback)，其中data是由多个key: value构成的Object对象。</p></blockquote><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><ol><li><p>属性值必须被包裹在双引号中.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">data-test</span>=<span class="string">"&#123;&#123;test&#125;&#125;"</span>&gt;</span> hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>没有被定义的不能输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span></span><br><span class="line">&#123;</span><br><span class="line">  var2: undefined,</span><br><span class="line">  <span class="selector-tag">var3</span>: <span class="selector-tag">null</span>,</span><br><span class="line">  <span class="selector-tag">var4</span>: "<span class="selector-tag">var4</span>"</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;view&gt;&#123;&#123;var1&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;var2&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;var3&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;var4&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>全局变量</p><blockquote><p>在app.js中定义全局变量时,避免变量名称为<code>globalData</code>,测试其他js文件引用会有问题</p></blockquote></li><li><p>js文件引用</p><blockquote><p>在a.js文件中通过<code>module.exports</code>导出方法,b.js中通过<code>require</code>(<strong>相对路径</strong>)引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="keyword">var</span> multiplyBy2 = <span class="built_in">require</span>(<span class="string">'./../demo1/demo1'</span>)</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端其他知识&quot;&gt;&lt;a href=&quot;#前端其他知识&quot; class=&quot;headerlink&quot; title=&quot;前端其他知识&quot;&gt;&lt;/a&gt;前端其他知识&lt;/h1&gt;&lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水
      
    
    </summary>
    
    
      <category term="前端" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="前端" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java 自己开发经验总结</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/30/Java-experience/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/30/Java-experience/</id>
    <published>2020-05-29T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="和-的用法"><a href="#和-的用法" class="headerlink" title="#和$的用法"></a>#和$的用法</h2><ol><li><p>当传递的参数作为sql中的变量是,使用#</p></li><li><p>当传递的参数作为sql的特殊字段时,使用$接收.如接收该参数作为列名,排序字段asc/desc</p><blockquote><p>如传递的参数有order和sort 其中order表示排序依据的字段,sort传递的时asc/desc表示是升序还是降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mapper接口</span></span><br><span class="line"><span class="function">List&lt;SysMenu&gt; <span class="title">findMenuByPage</span><span class="params">(QueryDTO queryDTO)</span></span>;</span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryDTO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer offset;</span><br><span class="line">  <span class="keyword">private</span> Integer limit;</span><br><span class="line">  <span class="keyword">private</span> String order;</span><br><span class="line">  <span class="comment">/** 排序的字段 */</span></span><br><span class="line">  <span class="keyword">private</span> String sort;</span><br><span class="line">  <span class="comment">/** 搜索 */</span></span><br><span class="line">  <span class="keyword">private</span> String search;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findMenuByPage"</span> <span class="attr">resultType</span>=<span class="string">"com.tang.car.entity.SysMenu"</span> <span class="attr">parameterType</span>=<span class="string">"com.tang.car.dto.QueryDTO"</span>&gt;</span></span><br><span class="line">        select m.*,p.name as parentName from sys_menu m</span><br><span class="line">        ,sys_menu p</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"search!=null and search!='' "</span>&gt;</span></span><br><span class="line">                and m.name like concat('%',#&#123;search&#125;,'%')</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            and m.menu_id=p.menu_id</span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sort!=null and sort!='' "</span>&gt;</span></span><br><span class="line">            order by #&#123;sort&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--pagerhelper 的 springboot 配置方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DataGridResult <span class="title">findByPage</span><span class="params">(QueryDTO queryDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用分页插件</span></span><br><span class="line">    PageHelper.offsetPage(queryDTO.getOffset(), queryDTO.getLimit());</span><br><span class="line">    CarExample example = <span class="keyword">new</span> CarExample();</span><br><span class="line">    String sort = queryDTO.getSort();</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(sort)) &#123;</span><br><span class="line">        example.setOrderByClause(<span class="string">"id "</span> + queryDTO.getOrder());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Car&gt; cars = carMapper.selectByExample(example);</span><br><span class="line">    PageInfo&lt;Car&gt; info = <span class="keyword">new</span> PageInfo&lt;&gt;(cars);</span><br><span class="line">    <span class="keyword">long</span> total = info.getTotal();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataGridResult(total, cars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="数据验证部分"><a href="#数据验证部分" class="headerlink" title="数据验证部分"></a>数据验证部分</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.9.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Valid"><a href="#Valid" class="headerlink" title="@Valid"></a>@Valid</h3><h4 id="实体类注解验证"><a href="#实体类注解验证" class="headerlink" title="实体类注解验证"></a>实体类注解验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="comment">// 产品编号</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 不能为空</span></span><br><span class="line"><span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户编号</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 不能为空</span></span><br><span class="line"><span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易日期</span></span><br><span class="line"><span class="meta">@Future</span> <span class="comment">// 只能是将来的日期</span></span><br><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>) <span class="comment">// 日期格式化转换</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 不能为空</span></span><br><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 价格</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 不能为空</span></span><br><span class="line"><span class="meta">@DecimalMin</span>(value = <span class="string">"0.1"</span>) <span class="comment">// 最小值0.1元</span></span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数量</span></span><br><span class="line"><span class="meta">@Min</span>(<span class="number">1</span>) <span class="comment">// 最小值为1</span></span><br><span class="line"><span class="meta">@Max</span>(<span class="number">100</span>) <span class="comment">// 最大值</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 不能为空</span></span><br><span class="line"><span class="keyword">private</span> Integer quantity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易金额</span></span><br><span class="line"><span class="meta">@NotNull</span> <span class="comment">// 不能为空</span></span><br><span class="line"><span class="meta">@DecimalMax</span>(<span class="string">"500000.00"</span>) <span class="comment">// 最大金额为5万元</span></span><br><span class="line"><span class="meta">@DecimalMin</span>(<span class="string">"1.00"</span>) <span class="comment">// 最小交易金额1元</span></span><br><span class="line"><span class="keyword">private</span> Double amount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邮件</span></span><br><span class="line"><span class="meta">@Pattern</span>(<span class="comment">// 正则式</span></span><br><span class="line">regexp = <span class="string">"^([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)*@"</span></span><br><span class="line">+ <span class="string">"([a-zA-Z0-9]*[-_]?[a-zA-Z0-9]+)+[\\.][A-Za-z]&#123;2,3&#125;([\\.][A-Za-z]&#123;2&#125;)?$"</span>,</span><br><span class="line"><span class="comment">// 自定义消息提示</span></span><br><span class="line">message = <span class="string">"不符合邮件格式"</span>)</span><br><span class="line">    <span class="comment">//javax.validation.constraints.@Email(message = "邮箱格式错误")</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备注</span></span><br><span class="line"><span class="meta">@Size</span>(min = <span class="number">0</span>, max = <span class="number">256</span>) <span class="comment">// 0到255个字符</span></span><br><span class="line"><span class="keyword">private</span> String note;</span><br></pre></td></tr></table></figure><h4 id="其他业务验证"><a href="#其他业务验证" class="headerlink" title="其他业务验证"></a>其他业务验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断验证是否为Transaction，如果是则进行验证</span></span><br><span class="line">        <span class="keyword">return</span> Transaction<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line">        Transaction trans = (Transaction) target;</span><br><span class="line">        <span class="comment">//求交易金额和价格×数量的差额</span></span><br><span class="line">        <span class="keyword">double</span> dis = trans.getAmount() - (trans.getPrice() * trans.getQuantity());</span><br><span class="line">        <span class="comment">//如果差额大于0.01，则认为业务错误</span></span><br><span class="line">        <span class="keyword">if</span> (Math.abs(dis) &gt; <span class="number">0.01</span>) &#123;</span><br><span class="line">            <span class="comment">//加入错误信息</span></span><br><span class="line">            errors.rejectValue(<span class="string">"amount"</span>, <span class="keyword">null</span>, <span class="string">"交易金额和购买数量与价格不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定器-InitBinder"><a href="#绑定器-InitBinder" class="headerlink" title="绑定器@InitBinder"></a>绑定器@InitBinder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validate"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(DataBinder binder)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 数据绑定器加入验证器</span></span><br><span class="line">binder.setValidator(<span class="keyword">new</span> TransactionValidator());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证方法"><a href="#验证方法" class="headerlink" title="验证方法"></a>验证方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validator"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">validator</span><span class="params">(@Valid Transaction trans, Errors errors)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">// 获取错误列表</span></span><br><span class="line">        List&lt;ObjectError&gt; oes = errors.getAllErrors();</span><br><span class="line">        <span class="keyword">if</span> (oes.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ObjectError oe : oes) &#123;</span><br><span class="line">                String key = <span class="keyword">null</span>;</span><br><span class="line">                String msg = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 字段错误</span></span><br><span class="line">                <span class="keyword">if</span> (oe <span class="keyword">instanceof</span> FieldError) &#123;</span><br><span class="line">                    FieldError fe = (FieldError) oe;</span><br><span class="line">                    key = fe.getField();<span class="comment">// 获取错误验证字段名</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 非字段错误</span></span><br><span class="line">                    key = oe.getObjectName();<span class="comment">// 获取验证对象名称</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 错误信息</span></span><br><span class="line">                msg = oe.getDefaultMessage();</span><br><span class="line">                errMap.put(key, msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errMap.put(<span class="string">"success"</span>, trans.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> errMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Validated"><a href="#Validated" class="headerlink" title="@Validated"></a>@Validated</h3><blockquote><p><strong>加入组别验证</strong></p></blockquote><h4 id="实体类注解"><a href="#实体类注解" class="headerlink" title="实体类注解"></a>实体类注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindPojo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//inferface : 只是作为标记一个组别 可以在vo验证的某个字段上面加入多个组别,这样没有加入的组别就不会验证这个字段</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"can not be null"</span>, groups = &#123;groupKey<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">key</span></span>;</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"can not be null"</span>)</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> Date startDate;</span><br><span class="line">    <span class="keyword">private</span> Date endDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">groupKey</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定器-InitBinder-1"><a href="#绑定器-InitBinder-1" class="headerlink" title="绑定器@InitBinder"></a>绑定器@InitBinder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果没有业务验证，在实体类中没有验证时间，可以加在绑定器中</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间类型转换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(ServletRequestDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.registerCustomEditor(Date<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">new</span> <span class="title">CustomDateEditor</span>(</span></span><br><span class="line">                        new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"), true));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="验证方法-1"><a href="#验证方法-1" class="headerlink" title="验证方法"></a>验证方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testKey"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testBind</span><span class="params">(@Validated(&#123;BindPojo.groupKey.class&#125;)</span> BindPojo bindPojo,</span></span><br><span class="line"><span class="function">                           BindingResult result) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *   实体类中虽然标记了desc不能为null，但是验证的是加入了groupKey的这个组别。所以desc为null是可以提交的</span></span><br><span class="line"><span class="comment">         *  http://localhost:8080/SpringMVCLearn/testKey?key=key&amp;desc=desc&amp;startDate=2020-04-17 16:17:17&amp;endDate=2020-04-17 16:17:17</span></span><br><span class="line"><span class="comment">         *  http://localhost:8080/SpringMVCLearn/testKey?key=key&amp;startDate=2020-04-17 16:17:17&amp;endDate=2020-04-17 16:17:17</span></span><br><span class="line"><span class="comment">         *  http://localhost:8080/SpringMVCLearn/testKey?desc=desc&amp;startDate=2020-04-17 16:17:17&amp;endDate=2020-04-17 16:17:17</span></span><br><span class="line"><span class="comment">         *  因为initBinder绑定器绑定了校验时间的要求，所以这样时间会校验不通过</span></span><br><span class="line"><span class="comment">         *  http://localhost:8080/SpringMVCLearn/testKey?key=key&amp;desc=desc&amp;startDate=2020-047 16:17:17&amp;endDate=2020-04-17 16:17:17</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//数据校验</span></span><br><span class="line">            <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">                Map&lt;String, String&gt; errorMsg = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                <span class="keyword">for</span> (FieldError fieldError : result.getFieldErrors()) &#123;</span><br><span class="line">                    errorMsg.put(fieldError.getObjectName() + <span class="string">"."</span> + fieldError.getField(),</span><br><span class="line">                            fieldError.getDefaultMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> errorMsg.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> bindPojo.toString() + <span class="string">"success"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="SpringAOP"><a href="#SpringAOP" class="headerlink" title="SpringAOP"></a>SpringAOP</h2><h3 id="利用自定义注解和AOP实现日志记录"><a href="#利用自定义注解和AOP实现日志记录" class="headerlink" title="利用自定义注解和AOP实现日志记录"></a>利用自定义注解和AOP实现日志记录</h3><h4 id="声明自定义注解"><a href="#声明自定义注解" class="headerlink" title="声明自定义注解"></a>声明自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "用户操作"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写AOP切面"><a href="#编写AOP切面" class="headerlink" title="编写AOP切面"></a>编写AOP切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogAdvice</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.tang.car.log.MyLog)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 开发通知 */</span></span><br><span class="line">  <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"myPointcut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterRet</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">    Method method = signature.getMethod();</span><br><span class="line">    MyLog annotation = method.getAnnotation(MyLog<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 得到用户的操作</span></span><br><span class="line">    String operation = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(annotation)) &#123;</span><br><span class="line">      operation = annotation.value();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到用户的ip</span></span><br><span class="line">    String ip = IPUtils.getIpAddr(HttpContextUtils.getHttpServletRequest());</span><br><span class="line">    <span class="comment">// 得到参数</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    String jsonString = JSON.toJSONString(args);</span><br><span class="line">    <span class="comment">// 得到方法名称</span></span><br><span class="line">    String methodName = joinPoint.getTarget().getClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">    log.info(Instant.now() + <span class="string">"|"</span> + operation + <span class="string">"|"</span> + ip + <span class="string">"|"</span> + methodName + <span class="string">"|"</span> + jsonString);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyLog</span>(<span class="string">"菜单更新"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyCarResult <span class="title">updateMenu</span><span class="params">(@RequestBody SysMenu menu)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = sysMenuService.update(menu);</span><br><span class="line">  <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> MyCarResult.ok(<span class="string">"修改成功!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MyCarResult.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="SpringBoot集成Druid监控SQL"><a href="#SpringBoot集成Druid监控SQL" class="headerlink" title="SpringBoot集成Druid监控SQL"></a>SpringBoot集成Druid监控SQL</h2><h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DataSource配置</span></span><br><span class="line"><span class="meta">spring.datasource.initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.datasource.minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.datasource.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">spring.datasource.maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">spring.datasource.timeBetweenEvictionRunsMillis</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">spring.datasource.minEvictableIdleTimeMillis</span>=<span class="string">300000</span></span><br><span class="line"><span class="meta">spring.datasource.validationQuery</span>=<span class="string">SELECT 1 FROM DUAL</span></span><br><span class="line"><span class="meta">spring.datasource.testWhileIdle</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.testOnBorrow</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.datasource.testOnReturn</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.datasource.poolPreparedStatements</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.maxPoolPreparedStatementPerConnectionSize</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">spring.datasource.filters</span>=<span class="string">stat,wall</span></span><br></pre></td></tr></table></figure><h3 id="其他初始化配置"><a href="#其他初始化配置" class="headerlink" title="其他初始化配置"></a>其他初始化配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//spring的配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="comment">//加载properties文件，以spring.datasource开头的部分构建数据源</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问方式localhost:8080/druid</span></span><br><span class="line"><span class="comment">// 用户名/密码都是druid</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"druidStatViewServlet"</span>, urlPatterns = <span class="string">"/druid/*"</span>,</span><br><span class="line">        initParams = &#123;</span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"loginUsername"</span>, value = <span class="string">"druid"</span>),</span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"loginPassword"</span>, value = <span class="string">"druid"</span>),</span><br><span class="line"><span class="comment">//      @WebInitParam(name = "allow",value = "127.0.0.1"),// IP白名单 (没有配置或者为空，则允许所有访问)</span></span><br><span class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"resetEnable"</span>, value = <span class="string">"false"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatViewServlet</span> <span class="keyword">extends</span> <span class="title">StatViewServlet</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"druidWebStatFilter"</span>, urlPatterns = <span class="string">"/*"</span>,</span><br><span class="line">        initParams = &#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"exclusions"</span>, value = <span class="string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span>)&#125;)</span><br><span class="line"><span class="comment">//exclusions 不拦截资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidWebStatFilter</span> <span class="keyword">extends</span> <span class="title">WebStatFilter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为加了@WebServlet注解,需要被SpringBoot扫描到,所以在SpringBoot启动类上需要加注解@ServletComponentScan(basePackages = “com.tang.car.config”)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;h2 id=&quot;和-的用法&quot;&gt;&lt;a href=&quot;#和-的用法&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="经验总结" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="经验总结" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 优化学习</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/23/MySQL-optimize/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/23/MySQL-optimize/</id>
    <published>2020-05-22T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-基本架构"><a href="#MySQL-基本架构" class="headerlink" title="MySQL 基本架构"></a>MySQL 基本架构</h1><h2 id="基础说明"><a href="#基础说明" class="headerlink" title="基础说明"></a>基础说明</h2><p><img src="http://file.tzcqupt.top/MySQL-base.png" alt=""></p><p>MySQL 分为 Server 层和存储引擎层两部分</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>存储引擎层负责数据的存储和提取.</p><h1 id="Explain关键字"><a href="#Explain关键字" class="headerlink" title="Explain关键字"></a>Explain关键字</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p><a href="https://downloads.mysql.com/docs/sakila-db.zip" target="_blank" rel="noopener">MySQL官网提供的影院数据库</a></p><h2 id="使用explain查询SQL的执行计划"><a href="#使用explain查询SQL的执行计划" class="headerlink" title="使用explain查询SQL的执行计划"></a>使用explain查询SQL的执行计划</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from film;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">film</td><td align="left">NULL</td><td align="left">ALL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">1000</td><td align="left">100</td><td align="left">NULL</td></tr></tbody></table><h2 id="执行计划的字段解释和举例"><a href="#执行计划的字段解释和举例" class="headerlink" title="执行计划的字段解释和举例"></a>执行计划的字段解释和举例</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>数字越大越先执行，如果数字一样大，那么就从上往下依次执行，id列为null就表示这是一个结果集，不需要使用它来进行查询。</p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><h4 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h4><p>表示不需要union操作或者不包含子查询的简单select查询，有连接查询时，外层的查询为simple，且只有一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from film where film_id &#x3D;2;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">film</td><td align="left">NULL</td><td align="left">const</td><td align="left">PRIMARY</td><td align="left">PRIMARY</td><td align="left">2</td><td align="left">const</td><td align="left">1</td><td align="left">100</td><td align="left">NULL</td></tr></tbody></table><h4 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h4><p>一个需要union操作或者含有子查询的select，位于最外层的查询，select_type即为primary，且只有一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select film_id from film</span><br><span class="line">union all select film_id from film_actor;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">PRIMARY</td><td align="left">film</td><td align="left">NULL</td><td align="left">index</td><td align="left">NULL</td><td align="left">idx_fk_language_id</td><td align="left">1</td><td align="left">NULL</td><td align="left">1000</td><td align="left">100</td><td align="left">Using index</td></tr><tr><td align="left">2</td><td align="left">UNION</td><td align="left">film_actor</td><td align="left">NULL</td><td align="left">index</td><td align="left">NULL</td><td align="left">idx_fk_film_id</td><td align="left">2</td><td align="left">NULL</td><td align="left">5462</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p>union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union。</p><h4 id="union-result"><a href="#union-result" class="headerlink" title="union result"></a>union result</h4><p>包含union的结果集，在union和union all语句中,因为它不需要参与查询，所以id字段为null。</p><h4 id="dependent-union"><a href="#dependent-union" class="headerlink" title="dependent union"></a>dependent union</h4><p>与union一样，出现在union 或union all语句中，但是这个查询要受到外部查询的影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from film_category where film_id</span><br><span class="line">in (select film_id from film union all select film_id from film_actor);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">PRIMARY</td><td align="left">film_category</td><td align="left">NULL</td><td align="left">ALL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">1000</td><td align="left">100</td><td align="left">Using where</td></tr><tr><td align="left">2</td><td align="left">DEPENDENT SUBQUERY</td><td align="left">film</td><td align="left">NULL</td><td align="left">eq_ref</td><td align="left">PRIMARY</td><td align="left">PRIMARY</td><td align="left">2</td><td align="left">func</td><td align="left">1</td><td align="left">100</td><td align="left">Using index</td></tr><tr><td align="left">3</td><td align="left">DEPENDENT UNION</td><td align="left">film_actor</td><td align="left">NULL</td><td align="left">ref</td><td align="left">idx_fk_film_id</td><td align="left">idx_fk_film_id</td><td align="left">2</td><td align="left">func</td><td align="left">1</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><h4 id="subquery"><a href="#subquery" class="headerlink" title="subquery"></a>subquery</h4><p>除了from子句中包含的子查询外，其他地方出现的子查询都可能是subquery。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select (select 1 from film);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">PRIMARY</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">NULL</td><td align="left">No tables used</td></tr><tr><td align="left">2</td><td align="left">SUBQUERY</td><td align="left">film</td><td align="left">NULL</td><td align="left">index</td><td align="left">NULL</td><td align="left">idx_fk_language_id</td><td align="left">1</td><td align="left">NULL</td><td align="left">1000</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><h4 id="dependent-subquery"><a href="#dependent-subquery" class="headerlink" title="dependent subquery"></a>dependent subquery</h4><p>与dependent union类似，表示这个subquery的查询要受到外部表查询的影响。</p><h4 id="derived"><a href="#derived" class="headerlink" title="derived"></a>derived</h4><p>from子句中出现的子查询，也叫做派生表，其他数据库中可能叫做内联视图或嵌套select。</p><h4 id="materialization"><a href="#materialization" class="headerlink" title="materialization"></a>materialization</h4><p>物化通过将子查询结果作为一个临时表来加快查询执行速度，正常来说是常驻内存，下次查询会再次引用临时表。</p><h3 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h3><p>显示的查询表名，如果查询使用了别名，那么这里显示的是别名，如果不涉及对数据表的操作，那么这显示为null，如果显示为尖括号括起来的就表示这个是临时表，后边的N就是执行计划中的id，表示结果来自于这个查询产生。如果是尖括号括起来的，与类似，也是一个临时表，表示这个结果来自于union查询的id为M,N的结果集。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><blockquote><p>依次性能从好到差：system，const，eq_ref，ref，fulltext，ref_or_null，unique_subquery，index_subquery，range，index_merge，index，ALL，除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引。一般来说，好的sql查询至少达到range级别，最好能达到ref。</p></blockquote><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>表中只有<strong>一行数据</strong>或者是空表，且只能用于myisam和memory表，如果是Innodb引擎表，type列在这个情况通常都是all或者index。</p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>使用唯一索引或者主键，返回记录一定是<strong>1行记录</strong>的等值where条件时，通常type是const，其他数据库也叫做唯一索引扫描。</p><h4 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h4><p>出现在要连接多个表的查询计划中，驱动表循环获取数据，这行数据是第二个表的主键或者唯一索引，作为条件查询只返回一条数据，且必须为not null，唯一索引和主键是多列时，只有所有的列都用作比较时才会出现eq_ref。</p><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>不像eq_ref那样要求连接顺序，也没有主键和唯一索引的要求，只要使用相等条件检索时就可能出现，常见与辅助索引的等值查找或者多列主键、唯一索引中，使用第一个列之外的列作为等值查找也会出现，总之，返回数据不唯一的等值查找就可能出现。</p><h4 id="fulltext"><a href="#fulltext" class="headerlink" title="fulltext"></a>fulltext</h4><p>全文索引检索，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引。</p><h4 id="ref-or-null"><a href="#ref-or-null" class="headerlink" title="ref_or_null"></a>ref_or_null</h4><p>与ref方法类似，只是增加了null值的比较，实际用的不多。</p><h4 id="unique-subquery"><a href="#unique-subquery" class="headerlink" title="unique_subquery"></a>unique_subquery</h4><p>用于where中的in形式子查询，子查询返回不重复值唯一值。</p><h4 id="index-subquery"><a href="#index-subquery" class="headerlink" title="index_subquery"></a>index_subquery</h4><p>用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重。</p><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>索引范围扫描，常见于使用&gt;,&lt;,is null,between ,in ,like等运算符的查询中。</p><h4 id="index-merge"><a href="#index-merge" class="headerlink" title="index_merge"></a>index_merge</h4><p>表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取多个索引，性能可能大部分时间都不如range。</p><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>索引全表扫描，把索引从头到尾扫一遍，常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询。</p><h4 id="all"><a href="#all" class="headerlink" title="all"></a>all</h4><p>这个就是全表扫描数据文件，然后再在server层进行过滤返回符合要求的记录。</p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a><strong>possible_keys</strong></h3><p>查询可能使用到的索引。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>查询真正使用到的索引，type为index_merge时，这里可能出现两个以上的索引，其他的select_type这里只会出现一个。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a><strong>key_len</strong></h3><p>用于处理查询的索引长度，如果是单列索引，那就是整个索引长度，如果是多列索引，那么查询不一定都能使用到所有的列，具体使用到了多少个列的索引，这里就会计算进去，没有使用到的列不会计算进去。留意下这个列的值，算一下你的多列索引总长度就知道有没有使用到所有的列了。另外，key_len只计算where条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到key_len中。</p><h3 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h3><p>如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>这里是执行计划中估算的扫描行数，不是精确值。</p><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a><strong>extra</strong></h3><h4 id="no-tables-used"><a href="#no-tables-used" class="headerlink" title="no tables used"></a>no tables used</h4><p>不带from字句的查询或者From dual查询。</p><h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h4><p>查询的列未被索引覆盖，并且where筛选条件是索引的前导列，意味着用到了索引，但是部分字段未被索引覆盖，必须通过“回表”来实现，不是纯粹地用到了索引，也不是完全没用到索引。</p><h4 id="using-index"><a href="#using-index" class="headerlink" title="using index"></a>using index</h4><p>查询时不需要回表查询，直接通过索引就可以获取查询的数据。</p><h4 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h4><p>查询的列未被索引覆盖，where筛选条件非索引的前导列。</p><h4 id="Using-where-Using-index"><a href="#Using-where-Using-index" class="headerlink" title="Using where Using index"></a>Using where Using index</h4><p>查询的列被索引覆盖，并且where筛选条件是索引列之一但是不是索引的前导列，意味着无法直接通过索引查找来查询到符合条件的数据。(常见复合索引的后列 如index(id,name) 查询的条件为name)</p><h4 id="Using-index-condition"><a href="#Using-index-condition" class="headerlink" title="Using index condition"></a>Using index condition</h4><p>与Using where类似，查询的列不完全被索引覆盖，where条件中是一个前导列的范围。</p><h4 id="using-temporary"><a href="#using-temporary" class="headerlink" title="using temporary"></a>using temporary</h4><p>表示使用了临时表存储中间结果。临时表可以是内存临时表和磁盘临时表，执行计划中看不出来，需要查看status变量，used_tmp_table，used_tmp_disk_table才能看出来。</p><h4 id="using-filesort"><a href="#using-filesort" class="headerlink" title="using filesort"></a>using filesort</h4><p>mysql 会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时mysql会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况下一般也是要考虑使用索引来优化的。</p><h4 id="using-intersect"><a href="#using-intersect" class="headerlink" title="using intersect"></a>using intersect</h4><p>表示使用and的各个索引的条件时，该信息表示是从处理结果获取交集。</p><h4 id="using-union"><a href="#using-union" class="headerlink" title="using union"></a>using union</h4><p>表示使用or连接各个使用索引的条件时，该信息表示从处理结果获取并集。</p><h4 id="using-sort-union-using-sort-intersection"><a href="#using-sort-union-using-sort-intersection" class="headerlink" title="using sort_union/using sort_intersection"></a>using sort_union/using sort_intersection</h4><p>用and和or查询信息量大时，先查询主键，然后进行排序合并后返回结果集。</p><h4 id="firstmatch-tb-name"><a href="#firstmatch-tb-name" class="headerlink" title="firstmatch(tb_name)"></a>firstmatch(tb_name)</h4><p>5.6.x开始引入的优化子查询的新特性之一，常见于where字句含有in()类型的子查询。如果内表的数据量比较大，就可能出现这个。</p><h4 id="loosescan-m-n"><a href="#loosescan-m-n" class="headerlink" title="loosescan(m..n)"></a>loosescan(m..n)</h4><p>5.6.x之后引入的优化子查询的新特性之一，在in()类型的子查询中，子查询返回的可能有重复记录时，就可能出现这个。</p><h3 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h3><p>使用explain extended时会出现这个列，5.7之后的版本默认就有这个字段，不需要使用explain extended了。这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数。</p><h1 id="MySQL优化"><a href="#MySQL优化" class="headerlink" title="MySQL优化"></a>MySQL优化</h1><h2 id="慢查询的总体优化思路"><a href="#慢查询的总体优化思路" class="headerlink" title="慢查询的总体优化思路"></a>慢查询的总体优化思路</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>优化更需要优化的SQL</li><li>定位优化对象的性能瓶颈</li><li>明确的优化目标</li><li>从explain执行计划入手</li></ul><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="永远用小结果集驱动大的结果集-小表-left-join-大表"><a href="#永远用小结果集驱动大的结果集-小表-left-join-大表" class="headerlink" title="永远用小结果集驱动大的结果集 (小表 left join 大表 )"></a>永远用小结果集驱动大的结果集 (小表 left join 大表 )</h4><ul><li>尽可能在索引中完成排序(order by 字段最好加了索引)</li><li>只取出自己需要的列，不要用select *</li><li>仅使用最有效的过滤条件</li><li>尽可能避免复杂的join和子查询</li><li>小心使用order by，group by，distinct语句(尽量走索引)</li><li>合理设计并利用索引</li></ul><h2 id="单表查询优化"><a href="#单表查询优化" class="headerlink" title="单表查询优化"></a>单表查询优化</h2><ol><li>明确需要的字段,而不是<code>select *</code></li><li>使用连接JOIN 代替子查询</li><li>使用分页语句(limit [offset,] rows) 或者where 字句时,有什么限制条件就尽量加上,查一条就limit 1</li></ol><h2 id="多表查询优化"><a href="#多表查询优化" class="headerlink" title="多表查询优化"></a>多表查询优化</h2><p>多表查询包括 <code>INNER JOIN</code>/<code>LEFT JOIN</code>/<code>RIGHT JOIN</code></p><p><code>cross join(交叉连接)</code>==&gt; 两个表的笛卡尔积</p><h3 id="JOIN-实现原理"><a href="#JOIN-实现原理" class="headerlink" title="JOIN 实现原理"></a>JOIN 实现原理</h3><p>MySQL 中的JOIN算法==&gt;Nested Loop Join,就是通过驱动表的结果集作为循环基础数据,然后一条一条的通过该结果集中的数据作为过滤条件到下一个表中查询数据,然后合并结果.</p><h3 id="优化结论"><a href="#优化结论" class="headerlink" title="优化结论"></a>优化结论</h3><ol><li><p>内连接加上<code>ON</code>限定条件,否则会被解释为交叉连接</p></li><li><p>连接表格使用<code>,</code>会被解释为交叉连接</p></li><li><p>超大型数据尽可能不写子查询,使用JOIN替换</p><ol><li><strong>当查询出来的数据需要进一步处理时,采用子查询,可读性和效率都更好</strong></li><li>特定的场景,如直接从数据库中读取,采用<code>JOIN</code>比<code>WHERE</code> 快</li></ol></li><li><p>使用<code>UNION</code>来代替手动创建的临时表</p><ol><li><code>UNION</code>就是把两次或多次查询结果合并起来</li><li><code>UNION</code>会去掉重复的行,而<code>UNION ALL</code>不会</li><li>子句中有<code>ORDER BY/LIMIT</code>需要用括号<code>()</code>包起来,推荐放到所有字句后,对最终合并的结果来排序或筛选</li></ol></li><li><p>尽量避免在 <code>WHERE</code>子句中对字段进行<code>NULL</code>值判断,否则将导致引擎放弃使用索引而进行全表扫描.</p></li><li><p><code>IN</code>和<code>NOT IN</code>也要慎用,否则导致全盘扫描</p><ol><li><p>对于连续的数值,采用<code>BETWEEN AND</code></p></li><li><p>采用 <code>EXISTS</code>代替<code>IN</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num in(1,2,3)</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&gt;</span><br><span class="line">select id from t where num between 1 and 3</span><br><span class="line"></span><br><span class="line">select num from a where num in(select num from b)</span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&gt;</span><br><span class="line">select num from a where exists(select 1 from b where num&#x3D;a.num)</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>尽量使用数字型字段</strong>,若只包含数值信息的字段尽量不要设计为字符型,这会降低查询和连接的性能,增加内存开销. 是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了 </p></li><li><p>尽量使用表变量来代替临时表</p></li><li><p>索引才能将MySQL的查询优化得更好</p></li></ol><h2 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h2><h3 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'slow_query_log'</span>  </span><br><span class="line"><span class="comment">--查看是否开启慢查询日志</span></span><br><span class="line"><span class="comment">-- 查看慢查询的日志位置</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%log%'</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log_file=<span class="string">'/var/lib/mysql/VM_0_17_centos-slow.log'</span>;</span><br><span class="line"><span class="comment">--慢查询日志的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log =<span class="keyword">on</span>;</span><br><span class="line"><span class="comment">--开启慢查询日志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time=<span class="number">1</span>;  </span><br><span class="line"><span class="comment">--大于1秒钟的数据记录到慢日志中，如果设置为默认0，则会有大量的信息存储在磁盘中，磁盘很容易满掉</span></span><br></pre></td></tr></table></figure><h3 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h3><ol><li><p>MySQL提供的 <strong>mysqldumpslow</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#slow记录最多的10个语句</span><br><span class="line">mysqldumpslow -s r -t 10 &#x2F;VM_0_17_centos-slow.log </span><br><span class="line">#按照时间排序前10中含有 left join的</span><br><span class="line">mysqldumpslow -s r -t 10 -g &quot;left join&quot; &#x2F;VM_0_17_centos-slow.log</span><br></pre></td></tr></table></figure></li><li><p><strong>mysqlsla</strong>工具</p><p> mysqlsla会自动判断日志类型,建立一个配置文件<code>.mysqlsla</code>在文件里写上<code>top=100</code>,这样会打印出前100条结果.参数说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">queries total: 总查询次数 unique:去重后的sql数量</span><br><span class="line">sorted by : 输出报表的内容排序</span><br><span class="line"></span><br><span class="line">最重大的慢sql统计信息, 包括 平均执行时间, 等待锁时间, 结果行的总数, 扫描的行总数.</span><br><span class="line"></span><br><span class="line">Count, sql的执行次数及占总的slow log数量的百分比.</span><br><span class="line">Time, 执行时间, 包括总时间, 平均时间, 最小, 最大时间, 时间占到总慢sql时间的百分比.</span><br><span class="line">95% of Time, 去除最快和最慢的sql, 覆盖率占95%的sql的执行时间.</span><br><span class="line">Lock Time, 等待锁的时间.</span><br><span class="line">95% of Lock , 95%的慢sql等待锁时间.</span><br><span class="line">Rows sent, 结果行统计数量, 包括平均, 最小, 最大数量.</span><br><span class="line">Rows examined, 扫描的行数量.</span><br><span class="line">Database, 属于哪个数据库</span><br><span class="line">Users, 哪个用户,IP, 占到所有用户执行的sql百分比</span><br><span class="line">Query abstract, 抽象后的sql语句</span><br><span class="line">Query sample, sql语句</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他优化原则"><a href="#其他优化原则" class="headerlink" title="其他优化原则"></a>其他优化原则</h2><ol><li><p>不在数据库做运算,运算迁移至业务层</p></li><li><p>数据库命名简洁明确(长度不超过30个字符)</p></li><li><p>控制列数量(字段少而精,字段数建议在20以内)</p></li><li><p>平衡范式与冗余(效率优先,往往牺牲范式)</p></li><li><p>拒绝3B(big sql语句,big transaction,big batch)</p></li><li><p>用好数值类型(用合适的字段类型节约空间)</p></li><li><p>字符转化为数字(节约空间,提高查询性能)</p></li><li><p>避免使用NULL 字段(NULL 字段很难查询优化,NULL 字段的索引需要额外空间,NULL 字段的复合索引无效)</p></li><li><p>少用text类型(尽量使用varchar类型代替)</p></li><li><p>合理使用索引(改善查询,减慢更新,索引一定不是越多越好)</p></li><li><p>字符字段建前缀索引</p></li><li><p>不在索引做列运算</p></li><li><p>innodb引擎 主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键);不用外键,由程序保证约束</p></li><li><p>不适用select *</p></li><li><p>OR 改写为 IN(字段没有索引的情况下,性能差别较大)</p></li><li><p>OR 改写为 union(索引无效变有效)</p></li><li><p>使用UNION ALL 代替UNION( UNION 有去重开销)</p></li><li><p>分页limit 优化(偏移量越大,执行越慢)</p></li></ol><h2 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h2><ol><li>符合索引尽量全匹配</li><li>最佳左前缀法则(带头索引不能死,中间索引不能断)</li><li>不要在索引上左任何操作(计算,函数,自动/手动类型转换),否则会导致索引失效而转向全表扫描</li><li>mysql存储引擎不能继续使用索引中范围条件(between,&lt; ,&gt;,in)</li><li>尽量使用覆盖索引(子查询索引的列==&gt;索引列和查询列一致),减少 select *</li><li>索引字段上使用(!= 或者 &lt;&gt;)判断时,会导致索引失效而转向全表扫描</li><li>索引字段上使用(is null /is not null)判断时,会导致索引失效而转向全表扫描(<strong>mysql 8</strong> 时索引不会失效)</li><li>索引字段使用 like 以通配符开头(‘% 字符串’)时,会导致索引失效而转向全表扫描</li><li>索引字段是字符串,但查询时不加单引号’,’会导致索引失效而转向全表扫描</li><li>索引字段上使用(or)判断时,会导致索引失效而转向全表扫描</li></ol><h1 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h1><h2 id="索引的基本原理"><a href="#索引的基本原理" class="headerlink" title="索引的基本原理"></a>索引的基本原理</h2><p> 通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件 ===&gt;<strong>把无序的数据变成有序的数据</strong></p><ol><li><p>把创建了索引的列的内容进行排序</p></li><li><p>对排序结果生成倒排表</p></li><li><p>在倒排表内容上拼上数据地址链</p></li><li><p>在查询的时候，先拿到倒排表内容，再取出数据地址链，从而拿到具体数据</p></li></ol><h2 id="硬盘中数据的读取"><a href="#硬盘中数据的读取" class="headerlink" title="硬盘中数据的读取"></a>硬盘中数据的读取</h2><h3 id="硬盘中的概念"><a href="#硬盘中的概念" class="headerlink" title="硬盘中的概念"></a>硬盘中的概念</h3><p>以机械硬盘为例.</p><h4 id="扇区"><a href="#扇区" class="headerlink" title="扇区"></a>扇区</h4><p> 磁盘存储的最小单位，扇区一般大小为512Byte。 </p><h4 id="硬盘块"><a href="#硬盘块" class="headerlink" title="硬盘块"></a>硬盘块</h4><p> 文件系统与磁盘交互的的最小单位（计算机系统读写磁盘的最小单位），一个磁盘块由连续几个（2^n）扇区组成，块一般大小一般为4KB。 </p><h4 id="硬盘读取数据"><a href="#硬盘读取数据" class="headerlink" title="硬盘读取数据"></a>硬盘读取数据</h4><p> 磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为<strong>寻道时间、旋转延迟、传输时间</strong>三个部分 .</p><h5 id="寻道时间"><a href="#寻道时间" class="headerlink" title="寻道时间"></a>寻道时间</h5><p> 磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下 </p><h5 id="旋转延迟"><a href="#旋转延迟" class="headerlink" title="旋转延迟"></a>旋转延迟</h5><p> 旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms </p><h5 id="传输时间"><a href="#传输时间" class="headerlink" title="传输时间"></a>传输时间</h5><p> 传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计 </p><h2 id="InnoDB-中的索引"><a href="#InnoDB-中的索引" class="headerlink" title="InnoDB 中的索引"></a>InnoDB 中的索引</h2><h3 id="索引解释"><a href="#索引解释" class="headerlink" title="索引解释"></a>索引解释</h3><p><strong>InnoDB中有2种索引：</strong>主键索引（聚集索引）、辅助索引（非聚集索引）。</p><p><strong>主键索引：</strong>每个表只有一个主键索引，叶子节点同时保存了主键的值也数据记录。</p><p><strong>辅助索引：</strong>叶子节点保存了索引字段的值以及主键的值。</p><p>辅助索引的查询过程在MySQL中叫做回表.</p><h3 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h3><ol><li>最左前缀匹配原则，组合索引非常重要的原则，MySQL会一直向右匹配直到遇到范围查询(<code>&gt;、&lt;、between、like</code>)就停止匹配，比如<code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立<code>(a,b,c,d)</code>顺序的索引，d是用不到索引的，如果建立<code>(a,b,d,c)</code>的索引则都可以用到，a,b,d的顺序可以任意调整。 </li><li>较频繁作为查询条件的字段才去创建索引 </li><li>更新频繁字段不适合创建索引 </li><li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。 </li><li>定义有外键的数据列一定要建立索引。</li><li>对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。 </li><li>对于定义为text、image和bit的数据类型的列不要建立索引。 </li></ol><h2 id="MySQL中的页"><a href="#MySQL中的页" class="headerlink" title="MySQL中的页"></a>MySQL中的页</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>MySQL中和磁盘交互的最小单位称为页，页是MySQL内部定义的一种数据结构，默认为16kb，相当于4个磁盘块，也就是说MySQL每次从磁盘中读取一次数据是16KB，要么不读取，要读取就是16KB，此值可以修改的。 </p><h3 id="页结构"><a href="#页结构" class="headerlink" title="页结构"></a>页结构</h3><p> MySQL中页是InnoDB 中存储数据的基本单位，也是MySQL中管理数据的最小单位，和磁盘交互的时候都是以页来进行的，默认是16kb，MySQL中采用b+树存储数据，页相当于b+树中的一个节点。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL-基本架构&quot;&gt;&lt;a href=&quot;#MySQL-基本架构&quot; class=&quot;headerlink&quot; title=&quot;MySQL 基本架构&quot;&gt;&lt;/a&gt;MySQL 基本架构&lt;/h1&gt;&lt;h2 id=&quot;基础说明&quot;&gt;&lt;a href=&quot;#基础说明&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>消息队列入门学习笔记</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/10/mq-Learn/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/10/mq-Learn/</id>
    <published>2020-05-09T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AMQP和JMS区别"><a href="#AMQP和JMS区别" class="headerlink" title="AMQP和JMS区别"></a>AMQP和JMS区别</h1><p>MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><h2 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a><strong>AMQP</strong></h2><p>AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级<a href="https://baike.baidu.com/item/消息/1619218" target="_blank" rel="noopener">消息</a>队列协议，是<a href="https://baike.baidu.com/item/应用层/4329788" target="_blank" rel="noopener">应用层</a>协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/<a href="https://baike.baidu.com/item/中间件/452240" target="_blank" rel="noopener">中间件</a>不同产品，不同的开发语言等条件的限制。<a href="https://baike.baidu.com/item/Erlang" target="_blank" rel="noopener">Erlang</a>中的实现有<a href="https://baike.baidu.com/item/RabbitMQ" target="_blank" rel="noopener">RabbitMQ</a>等。</p><h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a><strong>JMS</strong></h2><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/JMS%E8%A7%A3%E9%87%8A.PNG" alt="JMS概念"></p><h3 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a><strong>区别和联系</strong></h3><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li><li>基于JMS产品:ActiveMQ/RocketMQ,基于AMQP:RabbitMQ,erlang语言开发,稳定性好</li></ul><p><span id="rabbitmq"></span></p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>MQ全称为Message Queue，即消息队列， RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开 发中应用非常广泛。<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ官方地址</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p><a href="http://erlang.org/download/otp_win64_20.3.exe" target="_blank" rel="noopener">Erlang/OTP 20.3版本</a>和<a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.7.3">RabbitMQ3.7.3版本</a></p></li><li><p>erlang安装完之后配置环境变量ERLANG_HOME=D:\soft\erl9.3,添加到path中</p></li><li><p>在rabbitmq的sbin目录安装管理插件<code>rabbitmq-plugins.bat enable rabbitmq_management</code></p></li><li><p>重新启动服务，访问<a href="http://localhsot:15672" target="_blank" rel="noopener">http://localhsot:15672</a>  guest/guest</p><blockquote><p>当卸载重新安装时会出现RabbitMQ服务注册失败，此时需要进入注册表清理erlang<br>搜索RabbitMQ、ErlSrv，将对应的项全部删除。</p></blockquote></li><li><p>安装<code>rabbitmq-delayed-message-exchange</code>插件，可以更方便的实现延迟队列</p><ol><li>选择对应版本的插件下载。下载地址：<a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a></li><li>下载完成后，拷贝到RabbitMQ安装目录里的plugins文件夹下。</li><li>使用<code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code> 开启插件，在使用命令 <code>rabbitmq-plugins list</code> 查询安装的所有插件，确认安装是否成功。</li></ol></li></ol><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue。 </p><p>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过滤。</p><p>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。 </p><p>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送到MQ。</p><p>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。</p><h2 id="消息发布接收流程"><a href="#消息发布接收流程" class="headerlink" title="消息发布接收流程"></a>消息发布接收流程</h2><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a><strong>发送消息</strong></h3><ol><li>生产者和Broker建立TCP连接</li><li>生产者和Broker建立通道Channel</li><li>生产者通过通道消息发送给Broker,由Exchange将消息转发</li><li>Exchange将消息转发到指定的Queue(队列)</li></ol><h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a><strong>接收消息</strong></h3><ol><li><p>消费者和Broker建立TCP连接</p></li><li><p>消费者和Broker建立通道Channel</p></li><li><p>消费者监听指定的Queue</p></li><li><p>当有消息到达Queue时Broker默认将消息推送给消费者</p></li><li><p>消费者接收到消息</p></li></ol><h3 id="消息确认机制ACK"><a href="#消息确认机制ACK" class="headerlink" title="消息确认机制ACK"></a><strong>消息确认机制ACK</strong></h3><p>自动ACK：消息一旦被接收,消费者自动发送ACK</p><p>手动ACK：消息接收后，不会发送ACK，需要手动调用</p><p>如何选择：看消息的重要性</p><h2 id="交换器类型"><a href="#交换器类型" class="headerlink" title="交换器类型"></a>交换器类型</h2><h3 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h3><p>它会把所有发送到该交换器的消息路由到所有与该交换器绑定的队列中，即<strong>无视RoutingKey和BindingKey的匹配规则</strong>。</p><h3 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h3><p>它会把消息路由到那些BindingKey和RoutingKey<strong>完全匹配</strong>的队列中。</p><h3 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h3><p>对direct的扩展，direct规则是严格意义上的匹配，换言之Routing Key必须与Binding Key相匹配的时候才将消息传送给Queue，那么topic这个规则就是模糊匹配，可以通过通配符满足一部分规则就可以传送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(topicExchange,<span class="string">"bind001.topic.key"</span>, goJson.toJSONString());</span><br><span class="line"></span><br><span class="line">rabbitTemplate.convertAndSend(topicExchange,<span class="string">"bind002.topic.key"</span>, goJson.toJSONString());</span><br><span class="line"></span><br><span class="line">BindingBuilder.bind(AMessage).to(topicExchange).with(<span class="string">"*.bind.key"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列AMessage使用*.bind.key绑定到topicExchange交换机上,这样生产的两条消息都会在消息队列A中</span></span><br></pre></td></tr></table></figure><h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><p>根据发送的消息内容中的headers属性进行匹配。</p><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><h4 id="Work-queues"><a href="#Work-queues" class="headerlink" title="Work queues"></a>Work queues</h4><ol><li>一条消息只会被一个消费者接收；</li><li>rabbit采用轮询的方式将消息是平均发送给消费者的；</li><li>消费者在处理完某条消息后，才会收到下一条消息。</li></ol><h3 id="Publish-Subscribe-发布订阅模式"><a href="#Publish-Subscribe-发布订阅模式" class="headerlink" title="Publish/Subscribe 发布订阅模式"></a>Publish/Subscribe 发布订阅模式</h3><p>两者区别：</p><ol><li>work queues不用定义交换机Exchange，Publish/Subscribe需要定义交换机</li><li>Publish/Subscribe的生产方面是面向交换机发送消息，work queues的生产方面是面向队列发送消息（底层使用默认的交换机）</li><li>Publish/Subscribe需要设置队列和交换机的绑定，work queues不需要设置（实质上会绑定到默认的交换机）</li></ol><p>相同点</p><p>实现的发布/订阅效果是一样，多个消费端监听同一个队列不会重复消费消息</p><ol><li><p>Routing</p></li><li><p>Topics</p></li><li><p>Header</p></li><li><p>RPC</p></li></ol><h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h2><h3 id="添加启动器"><a href="#添加启动器" class="headerlink" title="添加启动器"></a>添加启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在配置文件中添加rabbitMQ地址"><a href="#在配置文件中添加rabbitMQ地址" class="headerlink" title="在配置文件中添加rabbitMQ地址"></a>在配置文件中添加rabbitMQ地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h3 id="监听者"><a href="#监听者" class="headerlink" title="监听者"></a>监听者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"spring.test.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"spring.test.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC</span><br><span class="line">            ),</span><br><span class="line">            key = &#123;<span class="string">"#.#"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Componet：类上的注解，注册到Spring容器</p></li><li><p>@RabbitListener：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性：</p><ul><li><p>bindings：指定绑定关系，可以有多个。值是<code>@QueueBinding</code>的数组。<code>@QueueBinding</code>包含下面属性：</p></li><li><p>value：这个消费者关联的队列。值是<code>@Queue</code>，代表一个队列</p><p>durable表示是否持久化</p></li><li><p>exchange：队列所绑定的交换机，值是<code>@Exchange</code>类型</p></li><li><p>key：队列和交换机绑定的<code>RoutingKey</code></p></li></ul></li></ul><h3 id="发送消息-1"><a href="#发送消息-1" class="headerlink" title="发送消息"></a>发送消息</h3><p>利用Spring提供的<code>AmqpTemplate</code>的<code>convertAndSend(String exchange,String routingKey,Object message)</code>方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AMQP和JMS区别&quot;&gt;&lt;a href=&quot;#AMQP和JMS区别&quot; class=&quot;headerlink&quot; title=&quot;AMQP和JMS区别&quot;&gt;&lt;/a&gt;AMQP和JMS区别&lt;/h1&gt;&lt;p&gt;MQ是消息通信的模型，并不是具体实现。现在实现MQ的有两种主流方式：AMQP
      
    
    </summary>
    
    
      <category term="消息队列" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMQ" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>定时/延迟任务处理</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/10/time-task/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/10/time-task/</id>
    <published>2020-05-09T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="延迟任务"><a href="#延迟任务" class="headerlink" title="延迟任务"></a>延迟任务</h1><p>需要延迟执行的任务，使用场景:</p><ol><li>红包 24 小时未被查收，需要延迟执退还业务；</li><li>每个月账单日，需要给用户发送当月的对账单；</li><li>订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。</li></ol><h2 id="实现思路分析"><a href="#实现思路分析" class="headerlink" title="实现思路分析"></a>实现思路分析</h2><p>在某个时间节点执行某个任务。</p><ol><li><p>一直死循环判断当前时间节点有没有要执行的任务</p></li><li><p>使用JDK或者其他工具类</p><p>JDK工具:DelayQueue、ScheduledExecutorService</p><p>其他工具:Redis、MQ、Netty</p></li></ol><h2 id="延迟任务实现"><a href="#延迟任务实现" class="headerlink" title="延迟任务实现"></a>延迟任务实现</h2><h3 id="任务调用"><a href="#任务调用" class="headerlink" title="任务调用"></a>任务调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayTaskExample</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放定时任务的Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Long&gt; TaskMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"程序启动时间:"</span> + LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 添加定时任务</span></span><br><span class="line">        TaskMap.put(<span class="string">"task-1"</span>, Instant.now().plusSeconds(<span class="number">3</span>).toEpochMilli());</span><br><span class="line">        TaskMap.put(<span class="string">"task-2"</span>, Instant.now().plusSeconds(<span class="number">5</span>).toEpochMilli());</span><br><span class="line">        <span class="comment">// 调用无限循环实现延迟任务</span></span><br><span class="line">        <span class="comment">/// loopTask();</span></span><br><span class="line">        <span class="comment">// 调用固定频率实现延迟任务</span></span><br><span class="line">        <span class="comment">/// scheduledExecutorServiceTask();</span></span><br><span class="line">        <span class="comment">// DelayQueue 方式</span></span><br><span class="line">        DelayQueue delayQueue = <span class="keyword">new</span> DelayQueue();</span><br><span class="line">        <span class="comment">// 添加延迟任务</span></span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> DelayElement(<span class="number">1000</span>));</span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> DelayElement(<span class="number">3000</span>));</span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> DelayElement(<span class="number">5000</span>));</span><br><span class="line">        log.info(<span class="string">"开始时间:"</span> +  DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> Date()));</span><br><span class="line">        <span class="keyword">while</span> (!delayQueue.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 执行延迟任务</span></span><br><span class="line">            log.info(delayQueue.take().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"结束时间:"</span> +  DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无限循环实现延迟任务"><a href="#无限循环实现延迟任务" class="headerlink" title="无限循环实现延迟任务"></a>无限循环实现延迟任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无限循环实现延迟任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loopTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Long itemLong = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        Iterator it = TaskMap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry) it.next();</span><br><span class="line">            itemLong = (Long) entry.getValue();</span><br><span class="line">            <span class="comment">// 有任务需要执行</span></span><br><span class="line">            <span class="keyword">if</span> (Instant.now().toEpochMilli() &gt;= itemLong) &#123;</span><br><span class="line">                <span class="comment">// 延迟任务，业务逻辑执行</span></span><br><span class="line">                log.info(<span class="string">"执行任务:"</span> + entry.getKey() +</span><br><span class="line">                        <span class="string">" ，执行时间:"</span> + LocalDateTime.now());</span><br><span class="line">                <span class="comment">// 删除任务</span></span><br><span class="line">                TaskMap.remove(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ScheduledExecutorSevice实现延迟任务"><a href="#ScheduledExecutorSevice实现延迟任务" class="headerlink" title="ScheduledExecutorSevice实现延迟任务"></a><code>ScheduledExecutorSevice</code>实现延迟任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现固定频率 一直循环执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scheduledExecutorServiceTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">    service.scheduleAtFixedRate(</span><br><span class="line">            () -&gt; log.info(<span class="string">"正在执行任务,执行时间:"</span> + LocalDateTime.now()), <span class="number">2</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DelayQueue实现延迟任务"><a href="#DelayQueue实现延迟任务" class="headerlink" title="DelayQueue实现延迟任务"></a><code>DelayQueue</code>实现延迟任务</h3><p><code>DelayQueue</code> 是一个支持延时获取元素的无界阻塞队列，队列中的元素必须实现 Delayed 接口，并重写 <code>getDelay(TimeUnit)</code> 和 <code>compareTo(Delayed)</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayElement</span> <span class="keyword">implements</span> <span class="title">Delayed</span></span>&#123;</span><br><span class="line">    <span class="comment">// 延迟截止时间（单面:毫秒）</span></span><br><span class="line">    <span class="keyword">long</span> delayTime = System.currentTimeMillis();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayElement</span><span class="params">(<span class="keyword">long</span> delayTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delayTime = (<span class="keyword">this</span>.delayTime + delayTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取剩余时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列里元素的排序依据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> Date(delayTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis实现延迟任务"><a href="#Redis实现延迟任务" class="headerlink" title="Redis实现延迟任务"></a><code>Redis</code>实现延迟任务</h3><h4 id="通过数据判断的方式"><a href="#通过数据判断的方式" class="headerlink" title="通过数据判断的方式"></a>通过数据判断的方式</h4><p><strong>SpringBoot整合Redis的方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis 配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不依赖redis的异步客户端--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis客户端驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY_QUEUE_KEY =<span class="string">"springboot:task:delayQueue"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> delayTime = Instant.now().plusSeconds(<span class="number">30</span>).getEpochSecond();</span><br><span class="line">        <span class="keyword">try</span> (Jedis jedis = <span class="keyword">new</span> Jedis())&#123;</span><br><span class="line">            jedis.zadd(DELAY_QUEUE_KEY, delayTime, <span class="string">"order_1"</span>);</span><br><span class="line">            <span class="comment">// 继续添加测试数据</span></span><br><span class="line">            jedis.zadd(DELAY_QUEUE_KEY, Instant.now().plusSeconds(<span class="number">2</span>).getEpochSecond(), <span class="string">"order_2"</span>);</span><br><span class="line">            jedis.zadd(DELAY_QUEUE_KEY, Instant.now().plusSeconds(<span class="number">2</span>).getEpochSecond(), <span class="string">"order_3"</span>);</span><br><span class="line">            jedis.zadd(DELAY_QUEUE_KEY, Instant.now().plusSeconds(<span class="number">7</span>).getEpochSecond(), <span class="string">"order_4"</span>);</span><br><span class="line">            jedis.zadd(DELAY_QUEUE_KEY, Instant.now().plusSeconds(<span class="number">10</span>).getEpochSecond(), <span class="string">"order_5"</span>);</span><br><span class="line">            <span class="comment">// 开启延迟队列</span></span><br><span class="line">            doDelayQueue(jedis);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列消费</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doDelayQueue</span><span class="params">(Jedis jedis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 当前时间</span></span><br><span class="line">            Instant nowInstant = Instant.now();</span><br><span class="line">            <span class="comment">// 上一秒时间</span></span><br><span class="line">            <span class="keyword">long</span> lastSecond = nowInstant.plusSeconds(-<span class="number">1</span>).getEpochSecond();</span><br><span class="line">            <span class="keyword">long</span> nowSecond = nowInstant.getEpochSecond();</span><br><span class="line">            <span class="comment">// 查询当前时间的所有任务</span></span><br><span class="line">            Set&lt;String&gt; data = jedis.zrangeByScore(DELAY_QUEUE_KEY, lastSecond, nowSecond);</span><br><span class="line">            <span class="keyword">for</span> (String item : data) &#123;</span><br><span class="line">                <span class="comment">// 消费任务</span></span><br><span class="line">                log.info(<span class="string">"消费:"</span> + item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除已经执行的任务</span></span><br><span class="line">            jedis.zremrangeByScore(DELAY_QUEUE_KEY, lastSecond, nowSecond);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 每秒轮询一次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ实现延迟任务"><a href="#RabbitMQ实现延迟任务" class="headerlink" title="RabbitMQ实现延迟任务"></a><code>RabbitMQ</code>实现延迟任务</h3><p><code>RabbitMQ</code> 实现延迟队列的方式有两种:</p><ul><li>通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；</li><li>使用 <code>rabbitmq-delayed-message-exchange</code> 插件实现延迟功能，插件安装方式参考<a href="https://tzcqupt.gitee.io/2020/05/10/mq-Learn/#RabbitMQ" target="_blank" rel="noopener">消息队列文章</a>。</li></ul><h4 id="SpringBoot配置RabbitMQ"><a href="#SpringBoot配置RabbitMQ" class="headerlink" title="SpringBoot配置RabbitMQ"></a><code>SpringBoot</code>配置<code>RabbitMQ</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RabbitMQ配置</span></span><br><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br></pre></td></tr></table></figure><h4 id="RabbitMQ延迟队列配置"><a href="#RabbitMQ延迟队列配置" class="headerlink" title="RabbitMQ延迟队列配置"></a><code>RabbitMQ</code>延迟队列配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"springboot.delay.order"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"delayed_exchange"</span>;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DelayedConfig.QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置默认的交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CustomExchange <span class="title">customExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">20</span>);</span><br><span class="line">        args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">//参数二为类型:必须是x-delayed-message</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DelayedConfig.EXCHANGE_NAME, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列到交换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queue 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">(Queue queue, CustomExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(DelayedConfig.QUEUE_NAME).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送端配置"><a href="#发送端配置" class="headerlink" title="发送端配置"></a>发送端配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedSender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"消息发送时间:"</span> + Instant.now());</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(DelayedConfig.EXCHANGE_NAME, DelayedConfig.QUEUE_NAME, msg, message -&gt; &#123;</span><br><span class="line">            message.getMessageProperties().setHeader(<span class="string">"x-delay"</span>, <span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收端配置"><a href="#接收端配置" class="headerlink" title="接收端配置"></a>接收端配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"springboot.delay.order"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"消息接收时间:"</span> + Instant.now());</span><br><span class="line">        log.info(<span class="string">"消息内容:"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= TaskApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DelayedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DelayedSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestMqDelay</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sender.send(<span class="string">"Hi Admin."</span>);</span><br><span class="line">        <span class="comment">// 等待接收程序执行之后，再退出测试</span></span><br><span class="line">        Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h1><h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz-jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a><code>Job</code></h3><p>任务接口，代表一个任务，要执行的具体内容。此接口中只有一个方法，自定义任务类需实现该接口。</p><p><code>JobExecutionContext</code>类提供了调度上下文的各种信息。Job运行时的信息保存在 <code>JobDataMap</code>实例中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException</span>;</span><br><span class="line"><span class="comment">//自己的任务类</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RamJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello quartz,first Job!!"</span>+ Instant.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JobDetail"><a href="#JobDetail" class="headerlink" title="JobDetail"></a><code>JobDetail</code></h3><p>Quartz在每次执行Job时，都重新创建一个Job实例，所以它不直接接受一个Job的实例，相反它接收一个Job实现类，以便运行时通过<code>newInstance()</code>的反射机制实例化Job。</p><p>代表一个具体的可执行的调度程序，<code>Job</code>是这个可执行调度程序所要执行的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JobDetail jobDetail =</span><br><span class="line">               JobBuilder.newJob(RamJob<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                       // <span class="title">job</span>描述</span></span><br><span class="line">                       .withDescription("this is a ram job")</span><br><span class="line">                       <span class="comment">// job的name和group</span></span><br><span class="line">                       .withIdentity(<span class="string">"ram job"</span>, <span class="string">"ramGroup"</span>)</span><br><span class="line">                       .build();</span><br></pre></td></tr></table></figure><h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a><code>Trigger</code></h3><p>任务触发器，什么时候去触发自定义的任务，===&gt;设置任务的调度策略。</p><h4 id="SimpleTrigger"><a href="#SimpleTrigger" class="headerlink" title="SimpleTrigger"></a><code>SimpleTrigger</code></h4><p>适用于在某一特定的时间执行一次，或者在某一特定的时间以某一特定时间间隔执行多次。上述功能决定了 <code>SimpleTrigger</code>的参数包括 <code>start-time</code>,<code>end-time</code>, <code>repeat count</code>, 以及 <code>repeat interval</code>。</p><h4 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a><code>CronTrigger</code></h4><p>使用<a href="https://cron.qqe2.com/" target="_blank" rel="noopener">corn表达式</a>进行任务调度，<code>CronTrigger</code> 主要适用于基于日历的调度安排。</p><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a><code>Calendar</code></h3><p>它是一些日历特定时间点的集合，一个<code>Trigger</code>可以和多个<code>Calendar</code>关联，以便排除或包含某些时间点。</p><p>假设，我们安排每周星期一早上10:00执行任务，但是如果碰到法定的节日，任务则不执行，这时就需要在Trigger触发机制的基础上使用 Calendar进行定点排除。针对不同时间段类型，Quartz在<code>org.quartz.impl.calendar</code>包下提供了若干个<code>Calendar</code> 的实现类，如<code>AnnualCalendar</code>、<code>MonthlyCalendar</code>、<code>WeeklyCalendar</code>分别针对每年、每月和每周进行定义。</p><p>举例使用:安排一个任务，每小时运行一次，并将五一节和国际节排除在外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.calendar.AnnualCalendar;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.quartz.TriggerUtils;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarExample</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">SchedulerFactory sf = <span class="keyword">new</span> StdSchedulerFactory();   </span><br><span class="line">Scheduler scheduler = sf.getScheduler();   </span><br><span class="line"><span class="comment">//①法定节日是以每年为周期的，所以使用AnnualCalendar   </span></span><br><span class="line">AnnualCalendar holidays = <span class="keyword">new</span> AnnualCalendar();   </span><br><span class="line"><span class="comment">//②五一劳动节  </span></span><br><span class="line">Calendar laborDay = <span class="keyword">new</span> GregorianCalendar();   </span><br><span class="line">laborDay.add(Calendar.MONTH,<span class="number">5</span>);   </span><br><span class="line">laborDay.add(Calendar.DATE,<span class="number">1</span>);  </span><br><span class="line"><span class="comment">// ②-1:排除的日期，如果设置为false则为包含  </span></span><br><span class="line">holidays.setDayExcluded(laborDay, <span class="keyword">true</span>); </span><br><span class="line"><span class="comment">//③国庆节  </span></span><br><span class="line">Calendar nationalDay = <span class="keyword">new</span> GregorianCalendar();   </span><br><span class="line">nationalDay.add(Calendar.MONTH,<span class="number">10</span>);   </span><br><span class="line">nationalDay.add(Calendar.DATE,<span class="number">1</span>);  </span><br><span class="line"><span class="comment">//③-1:排除该日期  </span></span><br><span class="line">holidays.setDayExcluded(nationalDay, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//④向Scheduler注册日历  </span></span><br><span class="line">scheduler.addCalendar(<span class="string">"holidays"</span>, holidays, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//⑤4月1号 上午10点 </span></span><br><span class="line">Date runDate = TriggerUtils.getDateOf(<span class="number">0</span>,<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">JobDetail job = <span class="keyword">new</span> JobDetail(<span class="string">"job1"</span>, <span class="string">"group1"</span>, SimpleJob<span class="class">.<span class="keyword">class</span>)</span>;   </span><br><span class="line">SimpleTrigger trigger = <span class="keyword">new</span> SimpleTrigger(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>, runDate,  <span class="keyword">null</span>,   </span><br><span class="line">  SimpleTrigger.REPEAT_INDEFINITELY, <span class="number">60L</span> * <span class="number">60L</span> * <span class="number">1000L</span>);  </span><br><span class="line"><span class="comment">//⑥让Trigger应用指定的日历规则  </span></span><br><span class="line">trigger.setCalendarName(<span class="string">"holidays"</span>);</span><br><span class="line">scheduler.scheduleJob(job, trigger);   </span><br><span class="line">scheduler.start();  </span><br><span class="line">  </span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a><code>Scheduler</code></h3><p> 代表一个Quartz的独立运行容器，Trigger和JobDetail可以注册到Scheduler中，两者在 Scheduler中拥有各自的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据，Trigger的组及名称必须唯一，JobDetail的组和名称也必须唯一（但可以和Trigger的组和名称相同，因为它们是不同类型的）。</p><p>Scheduler可以将Trigger绑定到某一JobDetail中，这样当Trigger触发时，对应的Job就被执行。一个Job可以对应 多个Trigger，但一个Trigger只能对应一个Job。可以通过SchedulerFactory创建一个Scheduler实例。 Scheduler拥有一个SchedulerContext，它类似于ServletContext，保存着Scheduler上下文信息，Job和 Trigger都可以访问SchedulerContext内的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StdSchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line">scheduler.scheduleJob(jobDetail, trigger);</span><br></pre></td></tr></table></figure><h4 id="misfire"><a href="#misfire" class="headerlink" title="misfire"></a><code>misfire</code></h4><p>错过的，指本来应该被执行但实际没有被执行的任务调度</p><h3 id="入门代码"><a href="#入门代码" class="headerlink" title="入门代码"></a>入门代码</h3><h4 id="RamJob"><a href="#RamJob" class="headerlink" title="RamJob"></a><code>RamJob</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RamJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello quartz,first Job!!"</span>+ Instant.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RamQuartz"><a href="#RamQuartz" class="headerlink" title="RamQuartz"></a><code>RamQuartz</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RamQuartz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException, InterruptedException </span>&#123;</span><br><span class="line">        StdSchedulerFactory schedulerFactory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line">        Scheduler scheduler = schedulerFactory.getScheduler();</span><br><span class="line">        JobDetail jobDetail =</span><br><span class="line">                JobBuilder.newJob(RamJob<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                        // <span class="title">job</span>描述</span></span><br><span class="line">                        .withDescription("this is a ram job")</span><br><span class="line">                        <span class="comment">// job的name和group</span></span><br><span class="line">                        .withIdentity(<span class="string">"ram job"</span>, <span class="string">"ramGroup"</span>)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="comment">// job开始运行的时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">3</span> * <span class="number">1000L</span>);</span><br><span class="line">        Trigger trigger =</span><br><span class="line">                TriggerBuilder.newTrigger()</span><br><span class="line">                        .withDescription(<span class="string">"job trigger"</span>)</span><br><span class="line">                        .withIdentity(<span class="string">"ram trigger"</span>, <span class="string">"ram trigger group"</span>)</span><br><span class="line">                        <span class="comment">// 开始运行时间</span></span><br><span class="line">                        <span class="comment">//.startAt(startTime)</span></span><br><span class="line">                        .startNow()</span><br><span class="line">                        <span class="comment">// SimpleTrigger只需执行一次或者在给定时间触发并且重复N次且每次执行延迟一定时间的任务。</span></span><br><span class="line">                        <span class="comment">// .withSchedule(SimpleScheduleBuilder.simpleSchedule())</span></span><br><span class="line">                        <span class="comment">//CronTrigger:按照日历触发,例如“每个周五”,每个月10日中午或者10:15分 corn表达式https://cron.qqe2.com/</span></span><br><span class="line">                        <span class="comment">//.withSchedule(CronScheduleBuilder.cronSchedule("0/5 * * * * ? *"))</span></span><br><span class="line">                        .withSchedule(CalendarIntervalScheduleBuilder.calendarIntervalSchedule().withIntervalInSeconds(<span class="number">1</span>))</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="comment">// 注册任务和调度器</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        scheduler.start();</span><br><span class="line">        log.info(<span class="string">"job任务启动时间"</span> + Instant.now());</span><br><span class="line">        <span class="comment">//scheduler.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="任务持久化"><a href="#任务持久化" class="headerlink" title="任务持久化"></a>任务持久化</h2><h3 id="RAMJobStore"><a href="#RAMJobStore" class="headerlink" title="RAMJobStore"></a><code>RAMJobStore</code></h3><p>Quartz的默认调度程序都存储在JVM的内存里面。</p><h3 id="JDBCJobStore"><a href="#JDBCJobStore" class="headerlink" title="JDBCJobStore"></a><code>JDBCJobStore</code></h3><p>配置Quartz，将任务信息存储在数据库中。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong><a href="https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore/tables_mysql.sql">MySQL数据库文件</a></strong>下载</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_FIRED_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_PAUSED_TRIGGER_GRPS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SCHEDULER_STATE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_LOCKS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPLE_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPROP_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CRON_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_BLOB_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_JOB_DETAILS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CALENDARS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_JOB_DETAILS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_CLASS_NAME   <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_DURABLE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_NONCONCURRENT <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_UPDATE_DATA <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">    NEXT_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PREV_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_TYPE <span class="built_in">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    START_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    END_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    MISFIRE_INSTR <span class="built_in">SMALLINT</span>(<span class="number">2</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPLE_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REPEAT_COUNT <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REPEAT_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TIMES_TRIGGERED <span class="built_in">BIGINT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CRON_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CRON_EXPRESSION <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TIME_ZONE_ID <span class="built_in">VARCHAR</span>(<span class="number">80</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPROP_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_1 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_2 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_3 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    INT_PROP_1 <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INT_PROP_2 <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LONG_PROP_1 <span class="built_in">BIGINT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LONG_PROP_2 <span class="built_in">BIGINT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DEC_PROP_1 <span class="built_in">NUMERIC</span>(<span class="number">13</span>,<span class="number">4</span>) <span class="literal">NULL</span>,</span><br><span class="line">    DEC_PROP_2 <span class="built_in">NUMERIC</span>(<span class="number">13</span>,<span class="number">4</span>) <span class="literal">NULL</span>,</span><br><span class="line">    BOOL_PROP_1 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    BOOL_PROP_2 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">    <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_BLOB_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    BLOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CALENDARS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR <span class="built_in">BLOB</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,CALENDAR_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_PAUSED_TRIGGER_GRPS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_FIRED_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    ENTRY_ID <span class="built_in">VARCHAR</span>(<span class="number">95</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FIRED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    SCHED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    IS_NONCONCURRENT <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,ENTRY_ID)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SCHEDULER_STATE</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_CHECKIN_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CHECKIN_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,INSTANCE_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_LOCKS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LOCK_NAME  <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,LOCK_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#quartz.properties</span></span><br><span class="line"><span class="comment">#调度标识名 集群中每一个实例都必须使用相同的名称 （区分特定的调度器实例）</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span>:<span class="string">DefaultQuartzScheduler</span></span><br><span class="line"><span class="comment">#ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的）</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceId</span>=<span class="string">AUTO</span></span><br><span class="line"><span class="comment">#数据保存方式为持久化 </span></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span> =<span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="comment">#表的前缀 </span></span><br><span class="line"><span class="meta">org.quartz.jobStore.tablePrefix</span> = <span class="string">QRTZ_</span></span><br><span class="line"><span class="comment">#设置为TRUE不会出现序列化非字符串类到 BLOB 时产生的类版本问题</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.useProperties = true</span></span><br><span class="line"><span class="comment">#加入集群 true 为集群 false不是集群</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.isClustered</span> = <span class="string">false</span></span><br><span class="line"><span class="comment">#调度实例失效的检查时间间隔 </span></span><br><span class="line"><span class="meta">org.quartz.jobStore.clusterCheckinInterval</span>=<span class="string">20000 </span></span><br><span class="line"><span class="comment">#容许的最大作业延长时间 </span></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span> =<span class="string">60000</span></span><br><span class="line"><span class="comment">#ThreadPool 实现的类名 </span></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span>=<span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="comment">#线程数量 </span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span> = <span class="string">10</span></span><br><span class="line"><span class="comment">#线程优先级 </span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span> = <span class="string">5（threadPriority 属性的最大值是常量 java.lang.Thread.MAX_PRIORITY，等于10。最小值为常量 java.lang.Thread.MIN_PRIORITY，为1）</span></span><br><span class="line"><span class="comment">#自创建父线程</span></span><br><span class="line"><span class="comment">#org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread= true </span></span><br><span class="line"><span class="comment">#数据库别名</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.dataSource</span> = <span class="string">qzDS</span></span><br><span class="line"><span class="comment">#设置数据源</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.URL</span>=<span class="string">jdbc:mysql://localhost:3306/quartz</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">org.quartz.dataSource.qzDS.maxConnection</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><h1 id="SpringCloud整合Quartz"><a href="#SpringCloud整合Quartz" class="headerlink" title="SpringCloud整合Quartz"></a><code>SpringCloud整合Quartz</code></h1><p>场景：业务代码采用的一个数据库，配置quartz采用的是另外的一个数据库来保存任务信息。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>物业费模块<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span><span class="comment">&lt;!-- 代码库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-ali<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public//<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus 持久层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring Cloud --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--quartz 任务调度框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a><code>yaml</code>配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">code-test</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span>  <span class="comment">#返回json对象时过滤null属性</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">primary:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># ?serverTimezone=GMT%2B8 是必须的</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/code-test?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root123</span></span><br><span class="line"> <span class="attr">scheduler:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># ?serverTimezone=GMT%2B8 是必须的</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/quartz-test?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root123</span></span><br><span class="line"><span class="comment">#mybatis-plus在代码中配置</span></span><br><span class="line"><span class="comment">#SpringCloud相关配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#在springCloud中服务的InstanceID默认值是:主机名：应用名：应用端口</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">15</span> <span class="comment">#每隔N秒发送心跳续约,默认30</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">30</span> <span class="comment">#如果N秒不发eureka就剔除当前注册实例,默认90</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#Eureka优先发布服务的IP地址而不是主机名,当应用程序向eureka注册时,它将使用其IP地址而不是其主机名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#定期更新eureka server拉去服务节点清单,快速感知服务下线</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span> <span class="comment">#指示从eureka服务器获取注册表信息的频率（以秒为单位）（网关项目可以缩小该值）,默认30</span></span><br><span class="line">    <span class="attr">instance-info-replication-interval-seconds:</span> <span class="number">10</span> <span class="comment">#每隔N秒扫描一次本地实例,如果有变化向服务重新注册（以秒为单位）,默认30</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8761/eureka/,http://127.0.0.1:8762/eureka/</span></span><br><span class="line">    <span class="attr">healthcheck:</span>  <span class="comment">#健康检查</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">2000</span> <span class="comment">#http建立socket超时时间(毫秒),ribbon请求连接的超时时间,默认值2000（则表示连接服务的时间,一般不用配置太久,1~2秒左右就可以了）</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2500</span> <span class="comment">#http读取响应socket超时时间,负载均衡超时时间,默认值5000（当调用某个服务等待时间过长的时候, 对超时报错/熔断生效的是ReadTimeout）</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment">#同一台实例最大重试次数,不包括首次调用</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数,切换相同Server的次数,默认1(不包括首次server)</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment">#是否所有操作都重试,POST请求注意多次提交错误。默认false,设定为false的话,只有get请求会重试</span></span><br><span class="line">  <span class="attr">ServerListRefreshInterval:</span> <span class="number">5000</span> <span class="comment">#调整刷新server list的时间间隔参数,默认30秒</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span> <span class="comment">#feign整合hystrix的开关</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">threadpool:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">coreSize:</span> <span class="number">50</span> <span class="comment">#当使用线程隔离策略时,线程池的核心大小(Hystrix线程池大小默认为10)</span></span><br><span class="line">      <span class="attr">maximumSize:</span> <span class="number">100</span> <span class="comment">#当Hystrix隔离策略为线程池隔离模式时,最大线程池大小的配置</span></span><br><span class="line">      <span class="attr">allowMaximumSizeToDivergeFromCoreSize:</span> <span class="literal">true</span> <span class="comment">#此属性语序配置的maximumSize生效</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="comment">#default全局有效,service id指定应用有效</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span> <span class="comment"># 断路器配置</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">20</span> <span class="comment">#当在配置时间窗口内达到此数量的失败后,进行断路。默认:20个</span></span><br><span class="line">        <span class="attr">errorThresholdpercentage:</span> <span class="number">50</span> <span class="comment">#出错百分比阈值,当达到此阈值后,开始断路。默认:50%</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">5000</span> <span class="comment">#触发短路的时间值,当该值设为5000时,则当触发circuit break后的5000毫秒内都会拒绝request,也就是5000毫秒后才会关闭circuit。默认:5000</span></span><br><span class="line">        <span class="attr">forceOpen:</span> <span class="literal">false</span>   <span class="comment">#强制打开断路器,如果打开这个开关,那么拒绝所有request,默认false</span></span><br><span class="line">        <span class="attr">forceClosed:</span> <span class="literal">false</span>  <span class="comment">#强制关闭断路器 如果这个开关打开,circuit将一直关闭且忽略,默认false</span></span><br><span class="line">      <span class="attr">execution:</span> <span class="comment">#熔断器配置</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#如果enabled为true,则会有两个执行方法超时的配置(ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds,此时谁的值小谁生效),</span></span><br><span class="line">          <span class="comment">#如果enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span> <span class="comment">#断路器超时时间,默认1000ms(为了确保重试机制的正常运作,理论上（以实际情况为准）建议hystrix的超时时间为:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout)</span></span><br><span class="line">            <span class="attr">interruptOnTimeout:</span> <span class="literal">true</span> <span class="comment">#超时时是否立马中断</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><h2 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h2><blockquote><p>这里的数据源采用的是properties配置，上面的yaml只是配置参考。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.primary"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">primaryDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"primaryDataSource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">primaryDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> primaryDataSourceProperties().initializeDataSourceBuilder().type(HikariDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置<span class="doctag">@Transactional</span>注解事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(primaryDataSource());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.scheduler"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceProperties <span class="title">quartzDataSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DataSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"quartzDataSource"</span>)</span><br><span class="line"><span class="meta">@QuartzDataSource</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">quartzDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> quartzDataSourceProperties().initializeDataSourceBuilder().type(HikariDataSource<span class="class">.<span class="keyword">class</span>).<span class="title">build</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-Plus配置"><a href="#MyBatis-Plus配置" class="headerlink" title="MyBatis-Plus配置"></a><code>MyBatis-Plus</code>配置</h2><h3 id="Meta元素处理器"><a href="#Meta元素处理器" class="headerlink" title="Meta元素处理器"></a>Meta元素处理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill ..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"createTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill ...."</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主配置"><a href="#主配置" class="headerlink" title="主配置"></a>主配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(MyBatisPlusMetaObjectHandler<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 分页插件 */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 逻辑删除标志 */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MyBatisPlusMetaObjectHandler metaObjectHandler;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 当容器里没有指定的Bean的情况下创建该对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MybatisSqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @Qualifier(<span class="string">"primaryDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">    MybatisSqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">    <span class="comment">// 设置数据源</span></span><br><span class="line">    sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">    Resource[] resources;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      resources = resolver.getResources(<span class="string">"classpath:/mapper/*.xml"</span>);</span><br><span class="line">      sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">"com.tang.code.entity"</span>);</span><br><span class="line">      sqlSessionFactoryBean.setTypeEnumsPackage(<span class="string">"com.tang.code.entity.enums"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      log.info(<span class="string">"找不到mapper文件"</span> + e.getMessage());</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> TangException(ResultCodeEnum.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSessionFactoryBean.setMapperLocations(resources);</span><br><span class="line">    GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">    GlobalConfig.DbConfig dbConfig = <span class="keyword">new</span> GlobalConfig.DbConfig();</span><br><span class="line">    dbConfig</span><br><span class="line">        .setDbType(DbType.MYSQL)</span><br><span class="line">        .setIdType(IdType.AUTO)</span><br><span class="line">        <span class="comment">// 逻辑删除</span></span><br><span class="line">        .setLogicDeleteValue(<span class="string">"2"</span>)</span><br><span class="line">        .setLogicNotDeleteValue(<span class="string">"1"</span>)</span><br><span class="line">        .setTableUnderline(<span class="keyword">true</span>);</span><br><span class="line">    globalConfig.setDbConfig(dbConfig);</span><br><span class="line">    <span class="comment">// 元素处理器</span></span><br><span class="line">    globalConfig.setMetaObjectHandler(metaObjectHandler);</span><br><span class="line">    sqlSessionFactoryBean.setGlobalConfig(globalConfig);</span><br><span class="line">    <span class="comment">// 全局配置</span></span><br><span class="line">    MybatisConfiguration configuration = <span class="keyword">new</span> MybatisConfiguration();</span><br><span class="line">    configuration.setLogImpl(StdOutImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    sqlSessionFactoryBean.setConfiguration(configuration);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MapperScannerConfig"><a href="#MapperScannerConfig" class="headerlink" title="MapperScannerConfig"></a>MapperScannerConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(MybatisPlusConfig<span class="class">.<span class="keyword">class</span>) // 保证在<span class="title">MybatisPlusConfig</span>实例化之后再实例化该类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyBatisMapperScannerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">// mapper接口的扫描器</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 当容器里没有指定的Bean的情况下创建该对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">mapperScannerConfigurer.setBasePackage(<span class="string">"com.tang.code.mapper"</span>);</span><br><span class="line"><span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringCloud相关配置"><a href="#SpringCloud相关配置" class="headerlink" title="SpringCloud相关配置"></a><code>SpringCloud</code>相关配置</h2><h3 id="提供自定义健康信息"><a href="#提供自定义健康信息" class="headerlink" title="提供自定义健康信息"></a>提供自定义健康信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供自定义健康信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Health.up().build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="健康状态变化"><a href="#健康状态变化" class="headerlink" title="健康状态变化"></a>健康状态变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知eureka健康状态变化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthCheckHandler</span> <span class="keyword">implements</span> <span class="title">HealthCheckHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyHealthIndicator healthIndicator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InstanceStatus <span class="title">getStatus</span><span class="params">(InstanceStatus instanceStatus)</span> </span>&#123;</span><br><span class="line">Status status = healthIndicator.health().getStatus();</span><br><span class="line"><span class="keyword">if</span> (status.equals(Status.UP)) &#123;</span><br><span class="line"><span class="keyword">return</span> InstanceStatus.UP;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> InstanceStatus.DOWN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quartz相关配置"><a href="#Quartz相关配置" class="headerlink" title="Quartz相关配置"></a><code>Quartz</code>相关配置</h2><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment">#Configure Main Scheduler Properties</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment">#用在JobStore中来唯一标识实例,但是所有集群节点中必须相同。</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceName</span>=<span class="string">quartz-test</span></span><br><span class="line"><span class="comment">#如果使用集群,instanceId必须唯一,设置成AUTO</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.instanceId</span>=<span class="string">AUTO</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment">#Configure JobStore</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment">#将任务持久化到数据中</span></span><br><span class="line"><span class="comment">#是不受应用容器事物管理的数据库存储实现类</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="comment">#是受应用容器管理事物的数据库存储实现类</span></span><br><span class="line"><span class="comment">#org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreCMT</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.driverDelegateClass</span>=<span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.tablePrefix</span>=<span class="string">QRTZ_</span></span><br><span class="line"><span class="comment">#参与到一个集群当中。这一属性会贯穿于调度框架的始终,用于修改集群环境中操作的默认行为。</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.isClustered</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#实例检入到数据库中的频率(单位：毫秒)</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.clusterCheckinInterval</span>=<span class="string">20000</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.maxMisfiresToHandleAtATime</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.misfireThreshold</span>=<span class="string">120000</span></span><br><span class="line"><span class="comment">#这个选项在mysql下会非常容易出现死锁问题。quartz需要提升隔离级别来保障自己的运作，不过，由于各数据库实现的隔离级别定义都不一样，所以quartz提供一个设置序列化这样的隔离级别存在，因为例如oracle中是没有未提交读和可重复读这样的隔离级别存在。但是由于mysql默认的是可重复读，比提交读高了一个级别，所以已经可以满足quartz集群的正常运行。</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.txIsolationLevelSerializable</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#调度流程的第一步，也就是拉取待即将触发的triggers时，是上锁的状态，即不会同时存在多个线程拉取到相同的trigger的情况，也就避免的重复调度的危险。</span></span><br><span class="line"><span class="meta">org.quartz.jobStore.acquireTriggersWithinLock</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment">#Configure ThreadPool</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.class</span>=<span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadCount</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadPriority</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="comment">#Skip Check Update</span></span><br><span class="line"><span class="comment">#update:true</span></span><br><span class="line"><span class="comment">#not update:false</span></span><br><span class="line"><span class="comment">#==============================================================</span></span><br><span class="line"><span class="meta">org.quartz.scheduler.skipUpdateCheck</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"><span class="comment"># Configure Plugins</span></span><br><span class="line"><span class="comment">#============================================================================</span></span><br><span class="line"><span class="meta">org.quartz.plugin.triggHistory.class</span>=<span class="string">org.quartz.plugins.history.LoggingJobHistoryPlugin</span></span><br><span class="line"><span class="meta">org.quartz.plugin.shutdownhook.class</span>=<span class="string">org.quartz.plugins.management.ShutdownHookPlugin</span></span><br><span class="line"><span class="meta">org.quartz.plugin.shutdownhook.cleanShutdown</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="SpringBeanJobFactory"><a href="#SpringBeanJobFactory" class="headerlink" title="SpringBeanJobFactory"></a><code>SpringBeanJobFactory</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 自定义SpringBeanJobFactory</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoWiringSpringBeanJobFactory</span> <span class="keyword">extends</span> <span class="title">SpringBeanJobFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AutowireCapableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">beanFactory = applicationContext.getAutowireCapableBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里覆盖了super的createJobInstance方法,对其创建出来的类再进行autowire</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Object jobInstance = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line">beanFactory.autowireBean(jobInstance);</span><br><span class="line"><span class="keyword">return</span> jobInstance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quartz任务配置"><a href="#Quartz任务配置" class="headerlink" title="Quartz任务配置"></a>Quartz任务配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQuartzConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义JobDetail,直接使用jobDetailFactoryBean.getObject获得的是空</span></span><br><span class="line"><span class="comment">     * 物业费账单生成。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetailFactoryBean <span class="title">jobDetailPropertyCostBill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean jobDetailFactoryBean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        jobDetailFactoryBean.setGroup(<span class="string">"tangGroup"</span>);</span><br><span class="line">        <span class="comment">// durability表示在没有trigger关联的时候任务是否被保留,任务完成之后是否依然保留到数据库,默认false</span></span><br><span class="line">        jobDetailFactoryBean.setDurability(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 当Quartz服务被中止后,再次启动或集群中其他机器接手任务时会尝试恢复执行之前未完成的所有任务</span></span><br><span class="line">        jobDetailFactoryBean.setRequestsRecovery(<span class="keyword">true</span>);</span><br><span class="line">        jobDetailFactoryBean.setJobClass(QuartzTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        jobDetailFactoryBean.setDescription(<span class="string">"quartz 整合测试"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*Map&lt;String, String&gt; jobDataAsMap = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">      jobDataAsMap.put("targetObject", "targetObject"); // spring中bean的名字</span></span><br><span class="line"><span class="comment">      jobDataAsMap.put("targetMethod", "execute"); // 执行方法名</span></span><br><span class="line"><span class="comment">      jobDetailFactoryBean.setJobDataAsMap(jobDataAsMap);*/</span></span><br><span class="line">        <span class="keyword">return</span> jobDetailFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个Trigger</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CronTriggerFactoryBean <span class="title">triggerPropertyCostBill</span><span class="params">(JobDetail jobDetailPropertyCostBill)</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean cronTriggerFactoryBean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        <span class="comment">// 设置jobDetail</span></span><br><span class="line">        cronTriggerFactoryBean.setJobDetail(jobDetailPropertyCostBill);</span><br><span class="line">        <span class="comment">// 每晚11:55:00 执行任务0 55 23 * * ?</span></span><br><span class="line">        cronTriggerFactoryBean.setCronExpression(<span class="string">"0 55 23 * * ?"</span>);</span><br><span class="line">        <span class="comment">// trigger超时处理策略 默认1：总是会执行头一次 2:不处理</span></span><br><span class="line">        cronTriggerFactoryBean.setMisfireInstruction(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cronTriggerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QuartzTest"><a href="#QuartzTest" class="headerlink" title="QuartzTest"></a><code>QuartzTest</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行后保留作业数据</span></span><br><span class="line"><span class="meta">@PersistJobDataAfterExecution</span></span><br><span class="line"><span class="comment">//不允许并发执行，后一个任务需等待前一个任务完成</span></span><br><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobexecutioncontext)</span> </span>&#123;</span><br><span class="line">     log.info(<span class="string">"quartz执行任务完成!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringBoot中的定时任务"><a href="#SpringBoot中的定时任务" class="headerlink" title="SpringBoot中的定时任务"></a><code>SpringBoot</code>中的定时任务</h1><h2 id="开启定时任务"><a href="#开启定时任务" class="headerlink" title="开启定时任务"></a>开启定时任务</h2><p>在启动类商添加<code>@EnableScheduling</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(TaskApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot中使用"><a href="#SpringBoot中使用" class="headerlink" title="SpringBoot中使用"></a>SpringBoot中使用</h2><h3 id="corn表达式"><a href="#corn表达式" class="headerlink" title="corn表达式"></a>corn表达式</h3><p>corn在线表达式:<a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p><p>新建一个类，加上<code>@Component</code>被Spring管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * ? "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//corn在线表达式 http://cron.qqe2.com/</span></span><br><span class="line">        log.info(<span class="string">"我是corn表达式的定时任务，每5秒打印一次时间"</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fixRate"><a href="#fixRate" class="headerlink" title="fixRate"></a>fixRate</h3><p>fixedRate:固定速率，单位是毫秒。表示一个<strong>任务开始后</strong>间隔多长时间才执行下一个执行</p><p>fixedRateString:从配置文件读取的固定速率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 2秒打印一次日志</span></span><br><span class="line"><span class="comment">    * 比如设置 fixedRate=5*1000。那么如果一个任务8:00:00开始执行，不管什么时候执行结束，该任务的下一次执行的时间是8:00:05</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Scheduled</span>(fixedRate = <span class="number">2000</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       log.info(<span class="string">"我是fixedRate固定速率定时任务，每2秒打印一次时间,不管该任务执行多久"</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="fixDelay"><a href="#fixDelay" class="headerlink" title="fixDelay"></a>fixDelay</h3><p>fixedDelay:固定延迟，单位是毫秒。表示一个任务<strong>执行结束后</strong>间隔多长时间才执行下一个执行</p><p>fixedDelayString:从配置文件读取的固定延迟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3秒打印一次日志</span></span><br><span class="line"><span class="comment"> * 比如设置 fixedDelay=5*1000。那么如果一个任务8:00:00开始执行，8:00:01执行结束，那么该任务的下一次执行的时间是8:00:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scheduled</span>(fixedDelay = <span class="number">1000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    log.info(<span class="string">"我是fixedDelay固定延迟，每次任务需要执行2s，延迟1秒执行"</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fixedDelayString"><a href="#fixedDelayString" class="headerlink" title="fixedDelayString"></a>fixedDelayString</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedDelayString = <span class="string">"$&#123;eventTracking.delayFixed&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLog4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    log.info(<span class="string">"我是fixedDelayString从配置文件读取的固定延迟，每次任务需要执行3s，延迟3秒执行"</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="initialDelay"><a href="#initialDelay" class="headerlink" title="initialDelay"></a>initialDelay</h3><p>initialDelay:服务启动后立即延迟指定时间执行，单位是毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(initialDelay = <span class="number">10000</span>,fixedDelay = <span class="number">10000</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLog5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   log.info(<span class="string">"服务启动后10s，我开始执行了,10秒执行一次"</span>+<span class="keyword">new</span> Date().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringBoot中的异步任务"><a href="#SpringBoot中的异步任务" class="headerlink" title="SpringBoot中的异步任务"></a>SpringBoot中的异步任务</h1><h2 id="开启异步任务"><a href="#开启异步任务" class="headerlink" title="开启异步任务"></a>开启异步任务</h2><ol><li><p>在启动类上加<code>@EnableAsync</code>即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(TaskApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在异步任务类中加上<code>@Async</code>注解，也可以具体到某个方法上</p></li></ol><h2 id="测试任务不带返回值"><a href="#测试任务不带返回值" class="headerlink" title="测试任务不带返回值"></a>测试任务不带返回值</h2><h3 id="任务类"><a href="#任务类" class="headerlink" title="任务类"></a>任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务1耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务2耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务3耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务4耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"async"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTask task;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试任务不带返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Long&gt; <span class="title">asyncTask1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//http://localhost:8080/async/test1</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        task.task1();</span><br><span class="line">        task.task2();</span><br><span class="line">        task.task3();</span><br><span class="line">        task.task4();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> result = end - start;</span><br><span class="line">        log.info(<span class="string">"测试任务不带返回值全部完成，耗时"</span> + result + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试任务带返回值"><a href="#测试任务带返回值" class="headerlink" title="测试任务带返回值"></a>测试任务带返回值</h2><h3 id="任务类-1"><a href="#任务类-1" class="headerlink" title="任务类"></a>任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">task5</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务5耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">task6</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务6耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">task7</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务7耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务7"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">task8</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">"任务8耗时= "</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"async"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncTask task;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试任务带返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Long&gt; <span class="title">asyncTask2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//http://localhost:8080/async/test2</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Future&lt;String&gt; task5 = task.task5();</span><br><span class="line">        Future&lt;String&gt; task6 = task.task6();</span><br><span class="line">        Future&lt;String&gt; task7 = task.task7();</span><br><span class="line">        Future&lt;String&gt; task8 = task.task8();</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (task5.isDone() &amp;&amp; task6.isDone() &amp;&amp; task7.isDone() &amp;&amp; task8.isDone()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> result = end - start;</span><br><span class="line">        log.info(<span class="string">"测试任务带返回值全部完成，耗时"</span> + result + <span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;延迟任务&quot;&gt;&lt;a href=&quot;#延迟任务&quot; class=&quot;headerlink&quot; title=&quot;延迟任务&quot;&gt;&lt;/a&gt;延迟任务&lt;/h1&gt;&lt;p&gt;需要延迟执行的任务，使用场景:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;红包 24 小时未被查收，需要延迟执退还业务；&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="定时任务" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    
      <category term="Quartz" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity学习笔记</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/08/SpringSecurity-Learn/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/08/SpringSecurity-Learn/</id>
    <published>2020-05-07T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity入门"><a href="#SpringSecurity入门" class="headerlink" title="SpringSecurity入门"></a>SpringSecurity入门</h1><h2 id="无用户登录"><a href="#无用户登录" class="headerlink" title="无用户登录"></a>无用户登录</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello Spring Security!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(&#123;<span class="string">"index"</span>,<span class="string">"/"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是登录成功的index页面"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"failIndex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">failIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是登录失败的index页面"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目会发现<code>Using generated security password: 30abfb1f-36e1-446a-a79b-f70024f552ab</code>，这就是 Spring Security 为默认用户 user 生成的临时密码，是一个 UUID 字符串。</p><p>访问hello接口需要登录，输入user和上面的密码才能访问。</p><p>spring Security中的源码:<code>private String password = UUID.randomUUID().toString();</code></p><h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">tang</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring security 源码</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.security"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityProperties</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><h4 id="PasswordEncoder接口"><a href="#PasswordEncoder接口" class="headerlink" title="PasswordEncoder接口"></a>PasswordEncoder接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line"><span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line">    <span class="comment">//密码校对</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line">    <span class="comment">//是否对密码再次加密</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h4><ol><li>注册<code>passwordEncoder</code>到容器中</li><li>在内存中定义用户</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//暂时先不加密密码</span></span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"tang"</span>)</span><br><span class="line">                .password(<span class="string">"123"</span>).roles(<span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置多个用户，使用<code>and</code>相连</p></blockquote><h2 id="自定义表单登录页"><a href="#自定义表单登录页" class="headerlink" title="自定义表单登录页"></a>自定义表单登录页</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//配置静态资源过滤</span></span><br><span class="line">    web.ignoring().antMatchers(<span class="string">"/js/**"</span>, <span class="string">"/css/**"</span>,<span class="string">"/images/**"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">"/login.html"</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">        <span class="comment">// 暂时先关闭csrf</span></span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>and</code>表示结束当前配置，继续下一个配置。</p></li><li><p><code>permitAll</code>表示登录相关的页面/接口不要被拦截。</p></li><li><p>复制静态页面到<code>resource</code>下的<code>static</code>目录。</p></li></ol><h1 id="SpringSecurity中的表单登录"><a href="#SpringSecurity中的表单登录" class="headerlink" title="SpringSecurity中的表单登录"></a>SpringSecurity中的表单登录</h1><h2 id="传统页面交互"><a href="#传统页面交互" class="headerlink" title="传统页面交互"></a>传统页面交互</h2><h3 id="配置登录接口地址"><a href="#配置登录接口地址" class="headerlink" title="配置登录接口地址"></a>配置登录接口地址</h3><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">"/login.html"</span>)</span><br><span class="line">.loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><h4 id="登录页面修改"><a href="#登录页面修改" class="headerlink" title="登录页面修改"></a>登录页面修改</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/doLogin"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="登录参数修改配置"><a href="#登录参数修改配置" class="headerlink" title="登录参数修改配置"></a>登录参数修改配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">"/login.html"</span>)</span><br><span class="line">.loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">.usernameParameter(<span class="string">"name"</span>)</span><br><span class="line">.passwordParameter(<span class="string">"passwd"</span>)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><p>前端页面同步修改</p><h3 id="登录回调"><a href="#登录回调" class="headerlink" title="登录回调"></a>登录回调</h3><h4 id="登录成功回调"><a href="#登录成功回调" class="headerlink" title="登录成功回调"></a>登录成功回调</h4><ul><li><code>defaultSuccessUrl</code></li></ul><p>如果在浏览器中输入了其他地址，例如 <code>http://localhost:8080/hello</code>，结果因为没有登录，又重定向到登录页面，此时登录成功后，就不会来到 <code>/index</code> ，而是来到 <code>/hello</code> 页面。</p><p>使用重载方法时，如果手动设置第二个参数为 true，则 <code>defaultSuccessUrl</code>的效果和 <code>successForwardUrl</code> 一致。</p><ul><li><p><code>successForwardUrl</code></p><p><code>successForwardUrl</code> 表示不管你是从哪里来的，登录后一律跳转到 <code>successForwardUrl</code> 指定的地址。</p></li></ul><h4 id="登录失败回调"><a href="#登录失败回调" class="headerlink" title="登录失败回调"></a>登录失败回调</h4><ul><li><code>failureForwardUrl</code></li><li><code>failureUrl</code></li></ul><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginPage(<span class="string">"/login.html"</span>)</span><br><span class="line">.loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">.usernameParameter(<span class="string">"name"</span>)</span><br><span class="line">.passwordParameter(<span class="string">"passwd"</span>)</span><br><span class="line">.defaultSuccessUrl(<span class="string">"/index"</span>)</span><br><span class="line">.failureUrl(<span class="string">"failure"</span>)</span><br><span class="line">.permitAll()</span><br></pre></td></tr></table></figure><h3 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h3><p>默认的注销登录接口为<code>/logout</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line"> <span class="comment">//二选一</span></span><br><span class="line">.logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">.logoutRequestMatcher(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"/logout"</span>,<span class="string">"POST"</span>))</span><br><span class="line">.logoutSuccessUrl(<span class="string">"/index"</span>)</span><br><span class="line">.deleteCookies()</span><br><span class="line">.clearAuthentication(<span class="keyword">true</span>)</span><br><span class="line">.invalidateHttpSession(<span class="keyword">true</span>)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><ol><li><code>.logoutUrl(&quot;/logout&quot;)</code>修改默认的注销url</li><li><code>logoutRequestMatcher</code>修改注销URL和请求方式。</li><li><code>logoutSuccessUrl</code> 表示注销成功后要跳转的页面。</li><li><code>deleteCookies</code> 用来清除 Cookie。</li><li><code>clearAuthentication</code> 和<code>invalidateHttpSession</code> 分别表示清除认证信息和使 HttpSession 失效，默认可以不用配置，默认就会清除。</li></ol><h2 id="JSON交互数据"><a href="#JSON交互数据" class="headerlink" title="JSON交互数据"></a>JSON交互数据</h2><p>有状态：服务端需要记录每次会话的客户端信息。</p><p>无状态：服务端不保存任何客户端请求者信息，客户端的每次请求必须自备自描述信息，通过这些信息失败客户端身份。</p><h3 id="无状态登录流程"><a href="#无状态登录流程" class="headerlink" title="无状态登录流程"></a>无状态登录流程</h3><ol><li>客户端发送账户名/密码到服务端进行认证</li><li>认证铜鼓哦吼，服务端将用户信息加密并且编码成一个token，返回给客户端</li><li>以后客户端每次发送请求，都需要携带认证的 token</li><li>服务端对客户端发送来的 token 进行解密，判断是否有效，并且获取用户登录信息</li></ol><h3 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.successHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    Object principal = authentication.getPrincipal();</span><br><span class="line">    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3个参数：</p><ul><li><p>HttpServletRequest</p></li><li><p>HttpServletResponse</p><p>利用 HttpServletRequest 我们可以做服务端跳转，利用 HttpServletResponse 我们可以做客户端跳转，也能返回JSON数据。</p></li><li><p>Authentication</p><p>保存了 刚刚登录成功的用户信息。</p></li></ul><h3 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(e.getMessage());</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="未认证处理"><a href="#未认证处理" class="headerlink" title="未认证处理"></a>未认证处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.csrf().disable().exceptionHandling()</span><br><span class="line">.authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="string">"尚未登录，请先登录"</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="注销登录-1"><a href="#注销登录-1" class="headerlink" title="注销登录"></a>注销登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">.logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="string">"注销成功"</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure><h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">        <span class="comment">// 配置remember-me 令牌生成的key，避免spring security使用UUID生成</span></span><br><span class="line">        <span class="comment">// 服务端重启/浏览器打开关闭后，还能登录。</span></span><br><span class="line">        .key(<span class="string">"tang"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>.rememberMe()</code>即可</p></blockquote><h1 id="授权配置"><a href="#授权配置" class="headerlink" title="授权配置"></a>授权配置</h1><h2 id="简单授权配置"><a href="#简单授权配置" class="headerlink" title="简单授权配置"></a>简单授权配置</h2><h3 id="用户配置-1"><a href="#用户配置-1" class="headerlink" title="用户配置"></a>用户配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">"tang"</span>)</span><br><span class="line">            .password(<span class="string">"123"</span>).roles(<span class="string">"admin"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">"tzcqupt"</span>)</span><br><span class="line">            .password(<span class="string">"123"</span>)</span><br><span class="line">            .roles(<span class="string">"user"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端配置-1"><a href="#服务端配置-1" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">        .antMatchers(<span class="string">"/user/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br></pre></td></tr></table></figure><h3 id="角色继承"><a href="#角色继承" class="headerlink" title="角色继承"></a>角色继承</h3><p>让admin自动拥有user的角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">    hierarchy.setHierarchy(<span class="string">"ROLE_admin &gt; ROLE_user"</span>);</span><br><span class="line">    <span class="keyword">return</span> hierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要手动给角色加上<code>ROLE_</code>前缀</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringSecurity入门&quot;&gt;&lt;a href=&quot;#SpringSecurity入门&quot; class=&quot;headerlink&quot; title=&quot;SpringSecurity入门&quot;&gt;&lt;/a&gt;SpringSecurity入门&lt;/h1&gt;&lt;h2 id=&quot;无用户登录&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="SpringSecurity" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/SpringSecurity/"/>
    
    
      <category term="SpringSecurity" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用PicGo上传图片到Gitee</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/04/typora-picgo-gitee/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/04/typora-picgo-gitee/</id>
    <published>2020-05-03T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>进入 nodejs 官网：<a href="https://nodejs.org/en/download/，直接下载安装对应的版本即可。" target="_blank" rel="noopener">https://nodejs.org/en/download/，直接下载安装对应的版本即可。</a></p><blockquote><p>版本&gt;=8</p></blockquote><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>进入Typora官网下载 <a href="https://www.typora.io/#windows" target="_blank" rel="noopener">https://www.typora.io/#windows</a></p><blockquote><p>软件版本&gt;=0.9.86</p></blockquote><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>进入 PicGo 官网：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> ，直接下载安装。</p><h2 id="码云仓库"><a href="#码云仓库" class="headerlink" title="码云仓库"></a>码云仓库</h2><p>进入码云官网<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a> 新建公有仓库，专门来存放图片。</p><h1 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h1><h2 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h2><ol><li><p>进入 PicGo，选择 插件设置，输入 gitee，选择安装第二个插件 *<em>gitee-uploader 1.1.2 *</em>，该插件用来设置 gitee 作为图床的。</p></li><li><p>安装成功后，点击该插件右下角齿轮状图标（设置），选择 uploader - gitee</p><blockquote><p>可设置软件开机启动</p></blockquote></li></ol><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>其中 repo 为 : giteeUsername/repositoryName，比如你的 gitee 账号为 user，存储图片的仓库为 blog-image，则此处填入 blog-image</p><p>token 则是 gitee 上个人的私人令牌，直接填入（私人令牌如何生成请看下一步说明）</p><p>然后点击 确定</p><h2 id="生成Token私人令牌"><a href="#生成Token私人令牌" class="headerlink" title="生成Token私人令牌"></a>生成Token私人令牌</h2><ol><li>私人令牌生成的话，首先进入到 个人的设置 中，在左侧有个 私人令牌，点击进入</li><li>然后可以看到右侧有个 +生成新令牌 ，点击</li><li>填写 私人令牌描述，比如：PicGo，这个仅仅用来标记，关系不大，点击 提交</li><li>输入账号密码，点击 验证</li><li>最后，成功生成私人令牌，点击 复制 放到上一步中的 token 中</li></ol><h1 id="Typora使用PicGo"><a href="#Typora使用PicGo" class="headerlink" title="Typora使用PicGo"></a>Typora使用PicGo</h1><ol><li>打开偏好设置，设置picGo的安装路径</li></ol><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/typora%E8%AE%BE%E7%BD%AEpicGo.PNG" alt=""></p><ol start="2"><li>插入图片，可以使用<code>Ctrl+Shift+I</code>插入，或者输入<code>![]()</code>来选择本地的图片，这样会进行自动上传到gitee。</li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://msd.misuland.com/pd/4146263467944314736" target="_blank" rel="noopener">利用码云 gitee + PicGo 搭建个人免费图床</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;h2 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Nod
      
    
    </summary>
    
    
      <category term="软件" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件安装" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Shiro入门学习笔记</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/03/Shiro-Simple-Learn/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/03/Shiro-Simple-Learn/</id>
    <published>2020-05-02T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Shiro架构图</p><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/shiro%E6%9E%B6%E6%9E%84.jpg" alt=""></p><h2 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h2><p>主体，可以是用户也可以是程序，主体要访问系统，系统需要对主体进行认证、授权。</p><h2 id="securityManager"><a href="#securityManager" class="headerlink" title="securityManager"></a>securityManager</h2><p>安全管理器，主体进行认证和授权都 是通过securityManager进行。</p><h2 id="authenticator"><a href="#authenticator" class="headerlink" title="authenticator"></a>authenticator</h2><p>认证器，主体进行认证最终通过authenticator进行的。</p><h2 id="authorizer"><a href="#authorizer" class="headerlink" title="authorizer"></a>authorizer</h2><p>授权器，主体进行授权最终通过authorizer进行的。</p><h2 id="sessionManager"><a href="#sessionManager" class="headerlink" title="sessionManager"></a>sessionManager</h2><p>web应用中一般是用web容器对session进行管理，shiro也提供一套session管理的方式。</p><h2 id="SessionDao"><a href="#SessionDao" class="headerlink" title="SessionDao"></a>SessionDao</h2><p>通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao。</p><h2 id="cache-Manager"><a href="#cache-Manager" class="headerlink" title="cache Manager"></a>cache Manager</h2><p>缓存管理器，主要对session和授权数据进行缓存，比如将授权数据通过cacheManager进行缓存管理，和ehcache整合对缓存数据进行管理。</p><h2 id="realm"><a href="#realm" class="headerlink" title="realm"></a>realm</h2><p>域，领域，相当于数据源，<strong>通过realm存取认证、授权相关数据。</strong></p><h2 id="cryptography"><a href="#cryptography" class="headerlink" title="cryptography"></a>cryptography</h2><p><strong>密码管理，提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</strong></p><h1 id="使用Shiro认证"><a href="#使用Shiro认证" class="headerlink" title="使用Shiro认证"></a>使用Shiro认证</h1><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/Shiro%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png" alt=""></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其他依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Shiro认证流程"><a href="#Shiro认证流程" class="headerlink" title="Shiro认证流程"></a>Shiro认证流程</h2><h3 id="通过配置文件创建工厂"><a href="#通过配置文件创建工厂" class="headerlink" title="通过配置文件创建工厂"></a>通过配置文件创建工厂</h3><h4 id="配置文件shiro-first-ini"><a href="#配置文件shiro-first-ini" class="headerlink" title="配置文件shiro-first.ini"></a>配置文件shiro-first.ini</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[对用户信息进行配置]</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment">#用户账号和密码</span></span><br><span class="line"><span class="attr">tang</span>=<span class="number">123</span></span><br><span class="line"><span class="attr">tzcqupt</span>=<span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroTest01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试从配置文件加载用户信息</span></span><br><span class="line"><span class="comment">     * Shiro管理认证的登录和退出</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;1. 通过ini配置文件创建securityManager工厂&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;2. 创建SecurityManager&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;3. 将securityManager设置当前的运行环境中&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;4. 从SecurityUtils里边创建一个subject&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;5. 在认证提交前准备token（令牌）&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;6. 执行认证提交&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;7. 验证是否认证通过&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoginAndLogout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(</span><br><span class="line">                <span class="string">"classpath:shiro-first.ini"</span>);</span><br><span class="line">        String username = <span class="string">"tang"</span>;</span><br><span class="line">        String password = <span class="string">"123"</span>;</span><br><span class="line">        <span class="keyword">this</span>.authenticate(factory, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authenticate</span><span class="params">(Factory&lt;SecurityManager&gt; factory, String username, String password)</span> </span>&#123;</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 这里的账号和密码 将来是由用户输入进去</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username,</span><br><span class="line">                password);</span><br><span class="line">        log.info(token.getUsername() + <span class="string">"准备认证登录了"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            log.error(token.getUsername() + <span class="string">"认证失败了,出现了异常"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> isAuthenticated = subject.isAuthenticated();</span><br><span class="line">        log.info(token.getUsername() + <span class="string">"是否认证通过："</span> + isAuthenticated);</span><br><span class="line">        log.info(token.getUsername() + <span class="string">"准备退出登录了"</span>);</span><br><span class="line"></span><br><span class="line">        subject.logout();</span><br><span class="line">        <span class="comment">// 是否认证通过</span></span><br><span class="line">        isAuthenticated = subject.isAuthenticated();</span><br><span class="line"></span><br><span class="line">        log.info(token.getUsername() + <span class="string">"是否认证通过："</span> + isAuthenticated);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Relam"><a href="#自定义Relam" class="headerlink" title="自定义Relam"></a>自定义Relam</h3><p>认证流程是认证器去找realm去查询我们相对应的数据<strong>。而默认的realm是直接去与配置文件来比对的，一般地，</strong>我们在开发中都是让realm去数据库中比对。</p><h4 id="普通的Relam"><a href="#普通的Relam" class="headerlink" title="普通的Relam"></a>普通的Relam</h4><h5 id="Relam实体"><a href="#Relam实体" class="headerlink" title="Relam实体"></a>Relam实体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置realm的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"customRealm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// token是用户输入的</span></span><br><span class="line">        <span class="comment">// 第一步从token中取出身份信息</span></span><br><span class="line">        String userCode = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步：根据用户输入的userCode从数据库查询</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果查询不到返回null</span></span><br><span class="line">        <span class="comment">//数据库中用户账号是zhangsansan</span></span><br><span class="line">        <span class="comment">/*if(!userCode.equals("zhangsansan"))&#123;//</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟从数据库查询到密码</span></span><br><span class="line">        String password = <span class="string">"123"</span>;</span><br><span class="line">        <span class="comment">// 如果查询到返回认证信息AuthenticationInfo</span></span><br><span class="line">        SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                userCode, password, <span class="keyword">this</span>.getName());</span><br><span class="line">        <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件shiro-realm-ini"><a href="#配置文件shiro-realm-ini" class="headerlink" title="配置文件shiro-realm.ini"></a>配置文件shiro-realm.ini</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="comment">#自定义Realm</span></span><br><span class="line"><span class="attr">customRealm</span>=com.tang.shiro.realm.CustomRealm</span><br><span class="line"><span class="comment">#将realm设置到securityManager，相当于Spring注入</span></span><br><span class="line"><span class="attr">securityManager.realms</span>=<span class="variable">$customRealm</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(</span><br><span class="line">               <span class="string">"classpath:shiro-realm.ini"</span>);</span><br><span class="line">       <span class="keyword">this</span>.authenticate(factory, <span class="string">"tang"</span>, <span class="string">"123"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="自定义realm支持md5"><a href="#自定义realm支持md5" class="headerlink" title="自定义realm支持md5"></a>自定义realm支持md5</h4><p>密码加密算法：MD5 在程序中对原始密码+盐进行散列，将散列值存储到数据库中，并且将盐页存储到数据库中。</p><h5 id="散列算法测试"><a href="#散列算法测试" class="headerlink" title="散列算法测试"></a>散列算法测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMd5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//原始密码</span></span><br><span class="line">        String source = <span class="string">"123"</span>;</span><br><span class="line">        <span class="comment">//盐</span></span><br><span class="line">        String salt=<span class="string">"java"</span>;</span><br><span class="line">        <span class="comment">//散列次数</span></span><br><span class="line">        <span class="keyword">int</span> hashIterations = <span class="number">2</span>;</span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(source, salt, hashIterations);</span><br><span class="line">        String password_md5 =  md5Hash.toString();</span><br><span class="line">        log.info(password_md5);</span><br><span class="line">        <span class="comment">//7574cfad48966ca3a0a076a46741d306</span></span><br><span class="line">        SimpleHash simpleHash = <span class="keyword">new</span> SimpleHash(<span class="string">"md5"</span>, source, salt, hashIterations);</span><br><span class="line">        log.info(simpleHash.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Relam实体-1"><a href="#Relam实体-1" class="headerlink" title="Relam实体"></a>Relam实体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealmMd5</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置realm的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"customRealmMd5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// token是用户输入的</span></span><br><span class="line">        <span class="comment">// 第一步从token中取出身份信息</span></span><br><span class="line">        String userCode = (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步：根据用户输入的userCode从数据库查询</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        <span class="comment">// 如果查询不到返回null</span></span><br><span class="line">        <span class="comment">//数据库中用户账号是zhangsansan</span></span><br><span class="line">        <span class="comment">/*if(!userCode.equals("zhangsansan"))&#123;//</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟从数据库查询到密码,散列值</span></span><br><span class="line">        String password = <span class="string">"7574cfad48966ca3a0a076a46741d306"</span>;</span><br><span class="line">        <span class="comment">// 从数据库获取salt</span></span><br><span class="line">        String salt = <span class="string">"java"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果查询到返回认证信息AuthenticationInfo</span></span><br><span class="line">        SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                userCode, password, ByteSource.Util.bytes(salt), <span class="keyword">this</span>.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件shiro-realm-md5-ini"><a href="#配置文件shiro-realm-md5-ini" class="headerlink" title="配置文件shiro-realm-md5.ini"></a>配置文件shiro-realm-md5.ini</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="comment">#定义凭证匹配器</span></span><br><span class="line"><span class="attr">credentialsMatcher</span>=org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br><span class="line"><span class="comment">#散列算法</span></span><br><span class="line"><span class="attr">credentialsMatcher.hashAlgorithmName</span>=md5</span><br><span class="line"><span class="comment">#散列次数</span></span><br><span class="line"><span class="attr">credentialsMatcher.hashIterations</span>=<span class="number">2</span></span><br><span class="line"><span class="comment">#自定义Realm</span></span><br><span class="line"><span class="attr">customRealm</span>=com.tang.shiro.realm.CustomRealmMd5</span><br><span class="line"><span class="attr">customRealm.credentialsMatcher</span>=<span class="variable">$credentialsMatcher</span></span><br><span class="line"><span class="comment">#将realm设置到securityManager，相当于Spring注入</span></span><br><span class="line"><span class="attr">securityManager.realms</span>=<span class="variable">$customRealm</span></span><br></pre></td></tr></table></figure><h5 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomRealmMd5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(</span><br><span class="line">               <span class="string">"classpath:shiro-realm-md5.ini"</span>);</span><br><span class="line">       String username = <span class="string">"tang"</span>;</span><br><span class="line">       String password = <span class="string">"123"</span>;</span><br><span class="line">       <span class="keyword">this</span>.authenticate(factory, username, password);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="使用Shiro授权"><a href="#使用Shiro授权" class="headerlink" title="使用Shiro授权"></a>使用Shiro授权</h1><h2 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其他依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Shiro授权流程"><a href="#Shiro授权流程" class="headerlink" title="Shiro授权流程"></a>Shiro授权流程</h2><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/shiro%E6%8E%88%E6%9D%83%E6%B5%81%E7%A8%8B.png" alt=""></p><h3 id="配置文件shiro-permission-ini"><a href="#配置文件shiro-permission-ini" class="headerlink" title="配置文件shiro-permission.ini"></a>配置文件shiro-permission.ini</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment">#用户tang的密码是123，此用户具有role1和role2两个角色</span></span><br><span class="line"><span class="attr">tang</span> = <span class="number">123</span>,role1,role2</span><br><span class="line"><span class="attr">wang</span> = <span class="number">123</span>,role2</span><br><span class="line"></span><br><span class="line"><span class="comment">#权限</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment">#角色role1对资源user拥有create、update权限</span></span><br><span class="line"><span class="attr">role1</span> = user:create,user:update</span><br><span class="line"><span class="comment">#角色role2对资源user拥有create、delete权限</span></span><br><span class="line"><span class="attr">role2</span> = user:create,user:delete</span><br><span class="line"><span class="comment">#角色role3对资源user拥有create权限</span></span><br><span class="line"><span class="attr">role3</span> = user:create</span><br><span class="line"></span><br><span class="line"><span class="comment">#权限标识符号规则：资源:操作:实例(中间使用半角:分隔)</span></span><br><span class="line"><span class="comment">#表示对用户资源的01实例进行create操作。</span></span><br><span class="line"><span class="comment">#user:create:01</span></span><br><span class="line"><span class="comment">#表示对用户资源进行create操作，相当于user:create:*，对所有用户资源实例进行create操作。</span></span><br><span class="line"><span class="comment">#user:create</span></span><br><span class="line"><span class="comment">#表示对用户资源实例01进行所有操作。</span></span><br><span class="line"><span class="comment">#user:*:01</span></span><br></pre></td></tr></table></figure><h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 授权测试</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAuthorization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(</span><br><span class="line">               <span class="string">"classpath:shiro-permission.ini"</span>);</span><br><span class="line">       String username = <span class="string">"tang"</span>;</span><br><span class="line">       String password = <span class="string">"123"</span>;</span><br><span class="line">       Subject subject = <span class="keyword">this</span>.authenticate(factory, username, password);</span><br><span class="line">       <span class="keyword">this</span>.authorization1(subject);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 封装授权验证</span></span><br><span class="line"><span class="comment">    * 编程式认证</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authorization</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 基于角色的授权</span></span><br><span class="line">       <span class="comment">// hasRole传入角色标识</span></span><br><span class="line">       <span class="keyword">boolean</span> hasRole = subject.hasRole(<span class="string">"role1"</span>);</span><br><span class="line">       log.info(<span class="string">"单个角色role1判断"</span> + hasRole);</span><br><span class="line">       <span class="comment">// hasAllRoles是否拥有多个角色</span></span><br><span class="line">       <span class="keyword">boolean</span> hasAllRoles = subject.hasAllRoles(Arrays.asList(<span class="string">"role1"</span>,</span><br><span class="line">               <span class="string">"role2"</span>, <span class="string">"role3"</span>));</span><br><span class="line">       log.info(<span class="string">"多个角色role1,role2,role3判断"</span> + hasAllRoles);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用check方法进行授权，如果授权不通过会抛出异常</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           subject.checkRole(<span class="string">"role3"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnauthorizedException e) &#123;</span><br><span class="line">           log.error(<span class="string">"没有role3的权限"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 基于资源的授权</span></span><br><span class="line">       <span class="comment">// isPermitted传入权限标识符</span></span><br><span class="line">       <span class="keyword">boolean</span> isPermitted = subject.isPermitted(<span class="string">"user:create:1"</span>);</span><br><span class="line">       log.info(<span class="string">"单个权限判断"</span> + isPermitted);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">boolean</span> isPermittedAll = subject.isPermittedAll(<span class="string">"user:create:1"</span>,</span><br><span class="line">               <span class="string">"user:delete"</span>);</span><br><span class="line">       log.info(<span class="string">"多个权限判断"</span> + isPermittedAll);</span><br><span class="line">       <span class="comment">// 使用check方法进行授权，如果授权不通过会抛出异常</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           subject.checkPermission(<span class="string">"items:create:1"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (UnauthorizedException e) &#123;</span><br><span class="line">           log.error(<span class="string">"没有对资源1的商品创建操作"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义Relam同上</p></blockquote><h1 id="与Spring整合-认证"><a href="#与Spring整合-认证" class="headerlink" title="与Spring整合-认证"></a>与Spring整合-认证</h1><h2 id="简单整合"><a href="#简单整合" class="headerlink" title="简单整合"></a>简单整合</h2><h3 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h3><p>shiro版本：1.4.0</p><p>spring版本：4.3.24.RELEASE</p><p>打包成war包，Idea中tomcat运行命令：<code>clean tomcat7:run</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>list.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载Spring的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置springmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1. 配置  Shiro 的 shiroFilter.</span></span><br><span class="line"><span class="comment">    2. DelegatingFilterProxy 实际上是 Filter 的一个代理对象. 默认情况下, Spring 会到 IOC 容器中查找和</span></span><br><span class="line"><span class="comment">    &lt;filter-name&gt; 对应的 filter bean. 也可以通过 targetBeanName 的初始化参数来配置 filter bean 的 id.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springMVC的配置文件，和web.xml一样放在WEB-INF目录下，名字为spring-sevlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tang.shiro"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 配置 SecurityManager! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"customRealm"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置自定义的，不加密的realm--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customRealm"</span> <span class="attr">class</span>=<span class="string">"com.tang.shiro.realms.CustomRealm"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    6. 配置 ShiroFilter. </span></span><br><span class="line"><span class="comment">    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致.</span></span><br><span class="line"><span class="comment">                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--认证失败--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护. </span></span><br><span class="line"><span class="comment">        以及访问这些页面需要的权限. </span></span><br><span class="line"><span class="comment">        1). anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2). authc 必须认证(即登录)后才可能访问的页面. </span></span><br><span class="line"><span class="comment">        3). logout 登出.</span></span><br><span class="line"><span class="comment">        4). roles 角色过滤器</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /fail.jsp = anon</span><br><span class="line">                /unauthorized.jsp = anon</span><br><span class="line">                /shiro/login = anon</span><br><span class="line">                /shiro/logout = logout</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义的Relam"><a href="#自定义的Relam" class="headerlink" title="自定义的Relam"></a>自定义的Relam</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 能登录成功的账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String USER_NAME=<span class="string">"tang"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录成功的账号密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String PASSWORD=<span class="string">"123"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置realm的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"customRealm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户认证逻辑</span></span><br><span class="line"><span class="comment">     * 只要用户名/密码为tang/123就认证通过</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 认证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// token是用户输入的</span></span><br><span class="line">        <span class="comment">// 第一步从token中取出身份信息</span></span><br><span class="line">        String userCode = (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">// 第二步：根据用户输入的userCode从数据库查询</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果查询不到返回null</span></span><br><span class="line">        <span class="comment">//数据库中用户账号是tang</span></span><br><span class="line">        <span class="keyword">if</span>(!USER_NAME.equals(userCode))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟从数据库查询到密码</span></span><br><span class="line">        <span class="comment">// 如果查询到返回认证信息AuthenticationInfo</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                userCode, PASSWORD, <span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登录控制器Controller"><a href="#登录控制器Controller" class="headerlink" title="登录控制器Controller"></a>登录控制器Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"shiro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录逻辑，认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 具体页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                              @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">// 把用户名和密码封装为 UsernamePasswordToken 对象</span></span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">            <span class="comment">// rememberme</span></span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"1. "</span> + token.hashCode());</span><br><span class="line">                <span class="comment">// 执行登录.</span></span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException | AuthorizationException ae) &#123;</span><br><span class="line">                <span class="comment">// 认证/授权失败</span></span><br><span class="line">                System.out.println(<span class="string">"登录失败: "</span> + ae.getMessage());</span><br><span class="line">                mv.setViewName(<span class="string">"unauthorized"</span>);</span><br><span class="line">                <span class="keyword">return</span> mv;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//认证成功</span></span><br><span class="line">            mv.setViewName(<span class="string">"list"</span>);</span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">        &#125;</span><br><span class="line">        mv.setViewName(<span class="string">"list"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>运行项目，使用tang/123登录项目，可以访问list.jsp</p><h2 id="自定义Relam-1"><a href="#自定义Relam-1" class="headerlink" title="自定义Relam"></a>自定义Relam</h2><h3 id="applicationContext-xml-1"><a href="#applicationContext-xml-1" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="realm" ref="customRealm"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.tang.shiro.realms.RealmMd5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.tang.shiro.realms.RealmSha1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Md5测试"><a href="#Md5测试" class="headerlink" title="Md5测试"></a>Md5测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMd5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String hashAlgorithmName = <span class="string">"MD5"</span>;</span><br><span class="line">    Object credentials = <span class="string">"123456"</span>;</span><br><span class="line">    Object salt = ByteSource.Util.bytes(<span class="string">"admin"</span>);</span><br><span class="line">    <span class="keyword">int</span> hashIterations = <span class="number">1024</span>;</span><br><span class="line">    Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt, hashIterations);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SHA1测试"><a href="#SHA1测试" class="headerlink" title="SHA1测试"></a>SHA1测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String hashAlgorithmName = <span class="string">"SHA1"</span>;</span><br><span class="line">    Object credentials = <span class="string">"123456"</span>;</span><br><span class="line">    Object salt = ByteSource.Util.bytes(<span class="string">"admin"</span>);</span><br><span class="line">    <span class="keyword">int</span> hashIterations = <span class="number">1024</span>;</span><br><span class="line">    Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt, hashIterations);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RealmMd5"><a href="#RealmMd5" class="headerlink" title="RealmMd5"></a>RealmMd5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Realm MD5加密</span></span><br><span class="line"><span class="comment"> * 用户名:密码为</span></span><br><span class="line"><span class="comment"> * user/admin:123456才能登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tzcqupt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmMd5</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[FirstRealm] doGetAuthenticationInfo"</span>);</span><br><span class="line">        <span class="comment">//1. 把 AuthenticationToken 转换为 UsernamePasswordToken</span></span><br><span class="line">        UsernamePasswordToken upToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//2. 从 UsernamePasswordToken 中来获取 username</span></span><br><span class="line">        String username = upToken.getUsername();</span><br><span class="line">        <span class="comment">//3. 调用数据库的方法, 从数据库中查询 username 对应的用户记录</span></span><br><span class="line">        System.out.println(<span class="string">"从数据库中获取 username: "</span> + username + <span class="string">" 所对应的用户信息."</span>);</span><br><span class="line">        <span class="comment">//4. 若用户不存在, 则可以抛出 UnknownAccountException 异常</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 根据用户信息的情况, 决定是否需要抛出其他的 AuthenticationException 异常.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 根据用户的情况, 来构建 AuthenticationInfo 对象并返回. 通常使用的实现类为: SimpleAuthenticationInfo</span></span><br><span class="line">        <span class="comment">//以下信息是从数据库中获取的.</span></span><br><span class="line">        <span class="comment">//1). principal: 认证的实体信息. 可以是 username, 也可以是数据表对应的用户的实体类对象.</span></span><br><span class="line">        <span class="comment">//2). credentials: 密码.</span></span><br><span class="line">        Object credentials = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">            credentials = <span class="string">"038bdaf98f2037b31f1e75b5b4c9b26e"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"user"</span>.equals(username)) &#123;</span><br><span class="line">            credentials = <span class="string">"098d2c478e9c11555ce2823231e02ec1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3). realmName: 当前 realm 对象的 name. 调用父类的 getName() 方法即可</span></span><br><span class="line">        String realmName = getName();</span><br><span class="line">        <span class="comment">//4). 盐值.</span></span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, credentials, credentialsSalt, realmName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RealmSha1代码和RealmMd5基本一致，只需要修改<code>credentials</code>即可。</p></blockquote><h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><p>运行项目，使用user/admin:123456登录项目，可以访问list.jsp</p><h2 id="认证策略修改"><a href="#认证策略修改" class="headerlink" title="认证策略修改"></a>认证策略修改</h2><p>默认的认证策略为<code>private AuthenticationStrategy authenticationStrategy = new AtLeastOneSuccessfulStrategy();</code> 至少一种认证通过。</p><h3 id="applicationContext-xml-2"><a href="#applicationContext-xml-2" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--修改认证策略为全部成功--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AllSuccessfulStrategy"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改任意一个Realm的<code>credentials</code>进行测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录失败日志</span></span><br><span class="line">登录失败: Unable to acquire account data from realm [com.tang.shiro.realms.RealmSha1@462a5006].  The [org.apache.shiro.authc.pam.AllSuccessfulStrategy implementation requires all configured realm(s) to operate successfully <span class="keyword">for</span> a successful authentication.</span><br></pre></td></tr></table></figure><h1 id="与Spring整合-授权"><a href="#与Spring整合-授权" class="headerlink" title="与Spring整合-授权"></a>与Spring整合-授权</h1><p>在认证的基础上修改</p><h2 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h2><h3 id="applicationContext-xml-3"><a href="#applicationContext-xml-3" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 SecurityManager! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 授权的relam --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authorizer"</span> <span class="attr">ref</span>=<span class="string">"realmMd5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"realmMd5"</span> <span class="attr">class</span>=<span class="string">"com.tang.shiro.realms.RealmMd5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RealmMd5-1"><a href="#RealmMd5-1" class="headerlink" title="RealmMd5"></a>RealmMd5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealmMd5</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//同认证逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[RealmMd5] doGetAuthorizationInfo"</span>);</span><br><span class="line">        <span class="comment">//1. 从 PrincipalCollection 中来获取登录用户的信息</span></span><br><span class="line">        Object principal = principals.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 利用登录的用户的信息来用户当前用户的角色或权限(可能需要查询数据库)</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        roles.add(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(principal))&#123;</span><br><span class="line">            roles.add(<span class="string">"admin"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 创建 SimpleAuthorizationInfo, 并设置其 reles 属性.</span></span><br><span class="line">        <span class="comment">//4. 返回 SimpleAuthorizationInfo 对象.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthorizationInfo(roles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>支持一种Realm的授权。第二个realm继承<code>AuthenticatingRealm</code>即可。就不用完成授权。</p></blockquote><h3 id="JSP标签方式"><a href="#JSP标签方式" class="headerlink" title="JSP标签方式"></a>JSP标签方式</h3><ol><li><p>引入shiro库</p><p><code>&lt;%@ taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;</code></p></li><li><p>jsp正文</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Welcome: &lt;shiro:principal/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;shiro:principal/&gt; 输出当前用户信息，通常为登录帐号信息--&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/admin.jsp"&gt;Admin Page&lt;/a&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"user"</span>&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/user.jsp"&gt;User Page&lt;/a&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testShiroAnno"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testShiroAnnotation</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ModelAndView view = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           shiroService.testMethod();</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           System.out.println(<span class="string">"权限不足，不能访问"</span>);</span><br><span class="line">           System.out.println(e.getMessage());</span><br><span class="line">           view.setViewName(<span class="string">"login"</span>);</span><br><span class="line">           <span class="keyword">return</span> view;</span><br><span class="line">       &#125;</span><br><span class="line">       view.setViewName(<span class="string">"admin"</span>);</span><br><span class="line">       <span class="keyword">return</span> view;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="ShiroService"><a href="#ShiroService" class="headerlink" title="ShiroService"></a>ShiroService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequiresRoles</span>(&#123;<span class="string">"admin"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testMethod, time: "</span> + LocalDate.now());</span><br><span class="line">        Session session = SecurityUtils.getSubject().getSession();</span><br><span class="line">        Object val = session.getAttribute(<span class="string">"key"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Service SessionVal: "</span> + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/shiro/testShiroAnno"&gt;测试Shiro的权限注解&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="踩坑日记"><a href="#踩坑日记" class="headerlink" title="踩坑日记"></a>踩坑日记</h3><p>需要将<code>applicationContext.xml</code>中关于shiro权限注解的配置移到<code>spring-mvc.xml</code>中，权限注解才生效。猜测原因是Bean的生命周期。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模拟从数据库中获取资源url"><a href="#模拟从数据库中获取资源url" class="headerlink" title="模拟从数据库中获取资源url"></a>模拟从数据库中获取资源url</h2><h3 id="applicationContext-xml-4"><a href="#applicationContext-xml-4" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--认证失败--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--装载页面url的map （如：key=/login.jsp ,value=anno）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMap"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-bean</span>=<span class="string">"filterChainDefinitionMapBuilder"</span> <span class="attr">factory-method</span>=<span class="string">"buildFilterChainDefinitionMap"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMapBuilder"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"com.tang.shiro.factory.FilterChainDefinitionMapBuilder"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FilterChainDefinitionMapBuilder"><a href="#FilterChainDefinitionMapBuilder" class="headerlink" title="FilterChainDefinitionMapBuilder"></a>FilterChainDefinitionMapBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedHashMap&lt;String, String&gt; <span class="title">buildFilterChainDefinitionMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"/login.jsp"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/shiro/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/shiro/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        map.put(<span class="string">"/user.jsp"</span>, <span class="string">"authc,roles[user]"</span>);</span><br><span class="line">        map.put(<span class="string">"/admin.jsp"</span>, <span class="string">"authc,roles[admin]"</span>);</span><br><span class="line">        map.put(<span class="string">"/list.jsp"</span>, <span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例-与SpringBoot整合"><a href="#案例-与SpringBoot整合" class="headerlink" title="案例-与SpringBoot整合"></a>案例-与SpringBoot整合</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>通过用户名查询用户信息①</li><li>根据用户id查询其角色集合②</li><li>根据用户id查询其具体的权限③</li><li>自定义relam,完成认证和授权④</li><li>封装Shiro常用操作⑤</li></ol><h3 id="依赖-3"><a href="#依赖-3" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 集成shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- shiro缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Shiro配置"><a href="#Shiro配置" class="headerlink" title="Shiro配置"></a>Shiro配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1,创建 SessionManager 管理会话</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionManager"</span>)<span class="comment">//&lt;bean class=""&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        sessionManager.setGlobalSessionTimeout(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//设置后台线程  清理过期的会话</span></span><br><span class="line">        sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置地址拼接sessionid</span></span><br><span class="line">        sessionManager.setSessionIdUrlRewritingEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,创建SecurityManager</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(SessionManager sessionManager, UserRealm userRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setSessionManager(sessionManager);</span><br><span class="line">        <span class="comment">//缓存管理</span></span><br><span class="line">        EhCacheManager cacheManager = <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">        cacheManager.setCacheManagerConfigFile(<span class="string">"classpath:ehcache.xml"</span>);</span><br><span class="line">        securityManager.setCacheManager(cacheManager);</span><br><span class="line">        <span class="comment">//cookie管理</span></span><br><span class="line">        CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">        Cookie cookie = cookieRememberMeManager.getCookie();</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>);</span><br><span class="line">        cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">        securityManager.setRememberMeManager(cookieRememberMeManager);</span><br><span class="line">        <span class="comment">//设置自定义realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3,创建ShiroFilter</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//设置登录页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login.html"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/index.html"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"unauthorized.html"</span>);</span><br><span class="line">        <span class="comment">//拦截的路径的详细设置</span></span><br><span class="line">        <span class="comment">//什么Map是存取有序的？</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"/sys/login"</span>, <span class="string">"anon"</span>);<span class="comment">//匿名访问</span></span><br><span class="line">        map.put(<span class="string">"/captcha.jpg"</span>, <span class="string">"anon"</span>);<span class="comment">//验证码放行</span></span><br><span class="line">        map.put(<span class="string">"/public/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/json/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4,BeanLifeCycle  生命周期</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5,开启shiro的注解</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"defaultAdvisorAutoProxyCreator"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);<span class="comment">//cglib方式</span></span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"authorizationAttributeSourceAdvisor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ehcache-xml"><a href="#ehcache-xml" class="headerlink" title="ehcache.xml"></a>ehcache.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/shiro-spring-sample"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"shiro-activeSessionCache"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">diskPersistent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"600"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"org.apache.shiro.realm.SimpleAccountRealm.authorization"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="封装的Shiro工具类"><a href="#封装的Shiro工具类" class="headerlink" title="封装的Shiro工具类"></a>封装的Shiro工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//⑤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Session <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityUtils.getSubject().getSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String key,String v)</span></span>&#123;</span><br><span class="line">        getSession().setAttribute(key,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Object <span class="title">getAttribute</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSession().getAttribute(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setKaptcha</span><span class="params">(String code)</span></span>&#123;</span><br><span class="line">        setAttribute(SysConstant.CAPTCHA_KEY,code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> String <span class="title">getKaptcha</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getAttribute(SysConstant.CAPTCHA_KEY)+<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 具体项目的返回值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SysUser <span class="title">getUserEntity</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  (SysUser) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getUserId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  getUserEntity().getUserId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecurityUtils.getSubject().logout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//④ 自定义Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RoleService roleService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> SysMenuService sysMenuService;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 认证</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    <span class="comment">// 得到用户名</span></span><br><span class="line">    UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">    String username = token.getUsername();</span><br><span class="line">    SysUser sysUser = sysUserService.findByUserName(username);<span class="comment">//①</span></span><br><span class="line">    String password = <span class="keyword">new</span> String(token.getPassword());</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(sysUser)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!sysUser.getPassword().equals(password)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"密码不正确"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sysUser.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"账户被冻结"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(sysUser, password, <span class="keyword">this</span>.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 授权</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">    SysUser sysUer = (SysUser) principals.getPrimaryPrincipal();</span><br><span class="line">    Long userId = sysUer.getUserId();</span><br><span class="line">    <span class="comment">//用户的角色</span></span><br><span class="line">    List&lt;String&gt; roles = roleService.findRolesByUserId(userId);<span class="comment">//②</span></span><br><span class="line">    <span class="comment">//用户的菜单权限</span></span><br><span class="line">    List&lt;String&gt; perms = sysMenuService.findPermsByUserId(userId);<span class="comment">//③</span></span><br><span class="line">    SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    authorizationInfo.addRoles(roles);</span><br><span class="line">    authorizationInfo.addStringPermissions(perms);</span><br><span class="line">    <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证码配置"><a href="#验证码配置" class="headerlink" title="验证码配置"></a>验证码配置</h2><h3 id="依赖-4"><a href="#依赖-4" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成验证码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.axet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"kaptcha"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultKaptcha <span class="title">kaptcha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultKaptcha kaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//验证码的设置</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.border"</span>, <span class="string">"no"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.length"</span>, <span class="string">"1"</span>);<span class="comment">//验证码个数</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.color"</span>, <span class="string">"black"</span>);<span class="comment">//字体颜色</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        kaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> kaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录-退出-验证码功能"><a href="#登录-退出-验证码功能" class="headerlink" title="登录/退出/验证码功能"></a><code>登录/退出/验证码</code>功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DefaultKaptcha kaptcha;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"captcha.jpg"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captcha</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存设置,不缓存</span></span><br><span class="line">    response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-store,no-cache"</span>);</span><br><span class="line">    <span class="comment">// 设置响应内容</span></span><br><span class="line">    response.setContentType(<span class="string">"image/jpg"</span>);</span><br><span class="line">    <span class="comment">// 生成验证码</span></span><br><span class="line">    String text = kaptcha.createText();</span><br><span class="line">    <span class="comment">// 生成图片</span></span><br><span class="line">    BufferedImage image = kaptcha.createImage(text);</span><br><span class="line">    <span class="comment">// 将验证码存储到shiro的session中</span></span><br><span class="line">    ShiroUtils.setKaptcha(text);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line">      ImageIO.write(image, <span class="string">"jpg"</span>, outputStream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">      log.error(<span class="string">"验证码生成失败!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"sys/login"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MyCarResult <span class="title">login</span><span class="params">(@RequestBody UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.比对验证码</span></span><br><span class="line">    String kaptcha = ShiroUtils.getKaptcha();</span><br><span class="line">    <span class="keyword">if</span> (userDTO.getCaptcha().isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> MyCarResult.error(<span class="string">"请输入验证码!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!userDTO.getCaptcha().equalsIgnoreCase(kaptcha)) &#123;</span><br><span class="line">      <span class="keyword">return</span> MyCarResult.error(<span class="string">"验证码错误!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">// 对密码进行盐值加密</span></span><br><span class="line">    String newPassword = MD5Utils.md5(userDTO.getPassword(), userDTO.getUsername(), <span class="number">1024</span>);</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userDTO.getUsername(), newPassword);</span><br><span class="line">    <span class="keyword">if</span> (userDTO.getRememberMe()) &#123;</span><br><span class="line">      token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 会去调用自定义的realm</span></span><br><span class="line">    subject.login(token);</span><br><span class="line">    <span class="keyword">return</span> MyCarResult.ok();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"logout"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ShiroUtils.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:login.html"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取用户信息,直接从shiro中获取即可</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/sys/user/info"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MyCarResult <span class="title">userInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从shiro中获取</span></span><br><span class="line">    SysUser sysUser = ShiroUtils.getUserEntity();</span><br><span class="line">    <span class="keyword">return</span> MyCarResult.ok().put(<span class="string">"user"</span>, sysUser);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sys:menu:list 为从数据库中查询出的权限</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:menu:list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataGridResult <span class="title">listMenu</span><span class="params">(QueryDTO queryDTO)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sysMenuService.listMenuPage(queryDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;Shiro架构图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/tzcqupt/blog-image/raw/mas
      
    
    </summary>
    
    
      <category term="SpringSecurity" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/SpringSecurity/"/>
    
    
      <category term="Shiro" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建-使用Hexo和Travis CI部署Github Pages</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/05/01/Hexo-github-pages-travis-ci/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/05/01/Hexo-github-pages-travis-ci/</id>
    <published>2020-04-30T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul><li><p>Node.js(版本建议10.0及以上)</p></li><li><p>Git</p></li></ul><blockquote><p>Windows安装Node.js时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></blockquote><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 初始化博客目录，确保文件夹blog为空</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># 进入该文件夹</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 执行npm安装，hexo会去下载最小依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#.. 选择主题，写文章，生成静态文件</span></span><br><span class="line"><span class="comment"># 本地运行hexo</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="选择博客主题"><a href="#选择博客主题" class="headerlink" title="选择博客主题"></a>选择博客主题</h2><p>官网<a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/" target="_blank" rel="noopener">hexo-theme-melody</a>，下方记录自己的步骤</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入博客工作目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 下载melody主题到工作目录里的themes/melody文件夹下</span></span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在blog根目录下，修改<code>_config.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">melody</span> <span class="comment"># 将主题设置成melody</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装： <code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code> or <code>yarn add hexo-renderer-pug hexo-renderer-stylus</code></p></blockquote><h2 id="博客写作"><a href="#博客写作" class="headerlink" title="博客写作"></a>博客写作</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ol><li><p>前往你的Hexo博客的根目录</p></li><li><p>输入<code>hexo new page tags</code></p></li><li><p>你会找到<code>source/tags/index.md</code>这个文件</p></li><li><p>修改这个文件：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-01</span><span class="number">-05</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><ol><li>前往你的Hexo博客的根目录</li><li>输入<code>hexo new page categories</code></li><li>你会找到<code>source/categories/index.md</code>这个文件</li><li>修改这个文件：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-01</span><span class="number">-05</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="文章写作例子"><a href="#文章写作例子" class="headerlink" title="文章写作例子"></a>文章写作例子</h3><h4 id="hexo-admin"><a href="#hexo-admin" class="headerlink" title="hexo-admin"></a>hexo-admin</h4><p><a href="https://github.com/jaredly/hexo-admin"><strong>hexo-admin</strong></a> 是一个Hexo博客引擎的管理用户界面插件。这个插件最初是作为本地编辑器设计的，在本地运行<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>使用<strong>hexo-admin</strong>编写文章。</p><p><strong>插件安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><h4 id="其他Markdown写作"><a href="#其他Markdown写作" class="headerlink" title="其他Markdown写作"></a>其他Markdown写作</h4><p>推荐 Typora</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><ol><li>在<code>_posts</code>文件里写好文件。</li><li>确认在主题文件夹中执行了<code>npm install</code>。</li><li>执行<code>hexo clean</code>清理旧文件。</li><li>执行<code>hexo g</code>生成静态文件</li><li>执行<code>hexo server</code>本地部署</li></ol><h2 id="自动部署到Github-Pages"><a href="#自动部署到Github-Pages" class="headerlink" title="自动部署到Github Pages"></a>自动部署到Github Pages</h2><ol><li><p>在github上创建公开的<code>username.gihub.io</code>仓库。</p></li><li><p>创建<code>blog-source</code>分支作为博客的源文件。</p><blockquote><p>Github Pages只能选择master分支存放博客的静态页面，才能通过<code>username.github.io</code>访问。</p></blockquote></li><li><p>推送<code>blog</code>里的相关文件到该仓库的<code>blog-source</code>分支。</p><blockquote><p>检查<code>.gitignore</code>文件是否忽略了<code>public</code>文件夹。</p><p><code>hexo g</code>生成的静态页面会存放在这个文件夹里。</p></blockquote></li><li><p>将 <a href="https://github.com/marketplace/travis-ci">Travis CI</a> 添加到你的 GitHub 账户中。</p></li><li><p>前往 GitHub 的 <a href="https://github.com/settings/installations">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</p></li><li><p>进入重定向的Travis CI页面，或者访问<a href="https://travis-ci.com/" target="_blank" rel="noopener">travis</a>。</p></li><li><p>在浏览器新建一个标签页，前往 GitHub 新建<a href="https://github.com/settings/tokens">Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</p></li><li><p>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</p></li><li><p>在hexo站点文件夹中(blog文件夹根目录)新建<code>.travis.yml</code>文件。</p><ol><li><p><code>.travis.yml</code></p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog-source</span> <span class="comment"># 源文件分支</span></span><br><span class="line"><span class="comment"># cache this directory</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"tzcqupt"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"tzcqupt@163.com"</span></span><br><span class="line">  <span class="comment"># 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s/gh_token/$&#123;GH_TOKEN&#125;/g"</span> <span class="string">./_config.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"><span class="comment"># End: Build LifeCycle</span></span><br></pre></td></tr></table></figure></li><li><p><code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">个人学习博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'博客'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'一个努力的Java程序员小白'</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">tzcqupt</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://github.com/tzcqupt/tzcqupt.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">Java</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## Use post's date for updated date unless set in front-matter</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the 'source/' folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">melody</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 主要修改这里，配合travis文件加上gh_token，方便其识别并自动部署到master分支</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gh_token@github.com/tzcqupt/tzcqupt.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="页面访问失败排查"><a href="#页面访问失败排查" class="headerlink" title="页面访问失败排查"></a>页面访问失败排查</h1><h2 id="Hexo启动页面异常"><a href="#Hexo启动页面异常" class="headerlink" title="Hexo启动页面异常"></a>Hexo启动页面异常</h2><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><p>Hexo启动页面显示extends includes/layout.pug block content include includes/recent-posts.pug include。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>执行<code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p><h2 id="其他错误"><a href="#其他错误" class="headerlink" title="其他错误"></a>其他错误</h2><p>缺少相关插件，如配置了字数统计，需要安装wordcount插件</p><p><code>npm i --save hexo-wordcount</code></p><p>执行<code>npm ls --depth=0</code>查看缺少的npm依赖，并安装即可。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/" target="_blank" rel="noopener">hexo-theme-melody</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">Hexo官方文档部署到GithubPages</a></p></li><li><p><a href="https://blog.csdn.net/Xiong_IT/article/details/78675874" target="_blank" rel="noopener">Hexo遇上Travis-CI：可能是最通俗易懂的自动发布博客图文教程</a></p></li><li><p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/" target="_blank" rel="noopener">利用Github Actions自动部署Hexo博客</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h1&gt;&lt;h2 id=&quot;安装前提&quot;&gt;&lt;a href=&quot;#安装前提&quot; class=&quot;headerlink&quot; title=&quot;安
      
    
    </summary>
    
    
      <category term="软件" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件安装" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>阿里开发手册阅读笔记</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/JavaBook-Note/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/JavaBook-Note/</id>
    <published>2020-04-27T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h1><h2 id="基础约定"><a href="#基础约定" class="headerlink" title="基础约定"></a>基础约定</h2><ol><li><p>定义数组类型和中括号紧挨 <code>int[] arrayDemo;</code></p></li><li><p>避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低。</p></li><li><p>在 long 或者 Long 赋值时，数值后使用大写的 L</p></li><li><p>推荐使用 <code>java.util.Objects#equals</code> 代替Object的equals方法，避免空指针异常。</p></li><li><p>所有<strong>整型包装类对象</strong>之间值的比较，全部使用 equals 方法比较。</p></li><li><p><strong>浮点数</strong>之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals来判断。</p><ol><li><p>基本数据 指定误差范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">1.0f</span> - <span class="number">0.9f</span>;</span><br><span class="line"><span class="keyword">float</span> b = <span class="number">0.9f</span> - <span class="number">0.8f</span>;</span><br><span class="line"><span class="keyword">float</span> diff = <span class="number">1e-6f</span>;</span><br><span class="line"><span class="keyword">if</span> (Math.abs(a - b) &lt; diff) &#123;</span><br><span class="line"> System.out.println(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装数据 用BigDecimal定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0"</span>);</span><br><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"0.9"</span>);</span><br><span class="line">BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"0.8"</span>);</span><br><span class="line">BigDecimal x = a.subtract(b);</span><br><span class="line">BigDecimal y = b.subtract(c);</span><br><span class="line"><span class="keyword">if</span> (x.equals(y)) &#123;</span><br><span class="line"> System.out.println(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用BigDecimal的入参为String的构造方法新建BigDecimal对象。</p></li><li><p>POJO类属性使用包装数据类型。</p></li><li><p>序列化类新增属性时，不修改serialVersionUID字段。</p></li><li><p>POJO类需要写toString方法，如果继承了另外的类，加上<code>super.toString()</code></p></li><li><p>使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容.</p><p>的检查，否则会有抛 IndexOutOfBoundsException 的风险。</p></li><li><p>循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</p></li><li><p>在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p></li><li><p>获取某年的天数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取今年的天数</span></span><br><span class="line"><span class="keyword">int</span> daysOfThisYear = LocalDate.now().lengthOfYear();</span><br><span class="line"><span class="comment">// 获取指定某年的天数</span></span><br><span class="line">LocalDate.of(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">1</span>).lengthOfYear();</span><br></pre></td></tr></table></figure></li></ol><h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><ol><li><p>重写equals就重写hashCode</p></li><li><p>判断集合是否为空，使用isEmpty()方法</p></li><li><p>ArrayList 的 subList 结果不可强转成 ArrayList</p></li><li><p>使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常。</p></li><li><p>Collections 类返回的对象，如：emptyList()/singletonList()等都是 immutable list，不可对其进行添加或者删除元素的操作。</p></li><li><p>使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。</p></li><li><p>在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE（NullPointerException） 判断。</p></li><li><p>使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。</p></li><li><p>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。</p></li></ol><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ol><li><p>创建线程或线程池时请指定有意义的线程名称。</p></li><li><p>线程资源必须通过线程池提供</p></li><li><p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式</p></li><li><p>SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。</p><blockquote><p>如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter(线程安全)代替 SimpleDateFormat</p></blockquote></li><li><p>必须回收自定义的 ThreadLocal 变量</p></li><li><p>获取/释放锁的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> XxxLock();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> doSomething();</span><br><span class="line"> doOthers();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JDK7后使用ThreadLocalRandom 提高性能</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编程规约&quot;&gt;&lt;a href=&quot;#编程规约&quot; class=&quot;headerlink&quot; title=&quot;编程规约&quot;&gt;&lt;/a&gt;编程规约&lt;/h1&gt;&lt;h2 id=&quot;基础约定&quot;&gt;&lt;a href=&quot;#基础约定&quot; class=&quot;headerlink&quot; title=&quot;基础约定&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="编程书籍" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="编码规范" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出多线程学习笔记-JDK工具</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/juc/juc-jdk-util/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/juc/juc-jdk-util/</id>
    <published>2020-04-27T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h1><p>Java中的线程池顶层接口是<code>Executor</code>接口，<code>ThreadPoolExecutor</code>是这个接口的实现类。</p><p>线程池中有两类线程：核心线程和非核心线程。</p><p>核心线程一直存在，闲置不会被销毁。非核心线程长时间闲置会被销毁。</p><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a><code>ThreadPoolExecutor</code></h2><h3 id="构造方法中相关参数"><a href="#构造方法中相关参数" class="headerlink" title="构造方法中相关参数"></a>构造方法中相关参数</h3><ul><li><p><strong>int corePoolSize</strong>：该线程池中<strong>核心线程数最大值</strong>.</p></li><li><p><strong>int maximumPoolSize</strong>：该线程池中<strong>线程总数最大值</strong> 。</p></li><li><p><strong>long keepAliveTime</strong>：<strong>非核心线程闲置超时时长</strong>。</p></li><li><p><strong>TimeUnit unit</strong>：keepAliveTime的单位。枚举类，包括<code>NANOSECONDS</code>,<code>MICROSECONDS</code> 、<code>MILLISECONDS</code> 、<code>SECONDS</code> 、<code>MINUTES</code> 、<code>MINUTES</code> 、<code>DAYS</code>。</p></li><li><p><strong>BlockingQueue workQueue</strong>：阻塞队列，维护着<strong>等待执行的Runnable任务对象</strong>。</p><ul><li><p><strong>LinkedBlockingQueue</strong></p><p>链式阻塞队列，底层数据结构是链表，默认大小是<code>Integer.MAX_VALUE</code>，也可以指定大小。</p></li><li><p><strong>ArrayBlockingQueue</strong></p><p>数组阻塞队列，底层数据结构是数组，需要指定队列的大小。</p></li><li><p><strong>SynchronousQueue</strong></p><p>同步队列，内部容量为0，每个put操作必须等待一个take操作，反之亦然。</p></li><li><p><strong>DelayQueue</strong></p><p>延迟队列，该队列中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素 。</p></li></ul></li><li><p><strong>ThreadFactory threadFactory</strong>创建线程的工厂 ，用于批量创建线程，统一在创建线程时设置一些参数，如是否守护线程、线程的优先级等。如果不指定，会新建一个默认的线程工厂。</p></li><li><p><strong>RejectedExecutionHandler handler</strong> <strong>拒绝处理策略</strong>，线程数量大于最大线程数就会采用拒绝处理策略，四种拒绝处理的策略为 ：</p><ul><li><strong>ThreadPoolExecutor.AbortPolicy</strong>：<strong>默认拒绝处理策略</strong>，丢弃任务并抛出RejectedExecutionException异常。</li><li><strong>ThreadPoolExecutor.DiscardPolicy</strong>：丢弃新来的任务，但是不抛出异常。</li><li><strong>ThreadPoolExecutor.DiscardOldestPolicy</strong>：丢弃队列头部（最旧的）的任务，然后重新尝试执行程序（如果再次失败，重复此过程）。</li><li><strong>ThreadPoolExecutor.CallerRunsPolicy</strong>：由调用线程处理该任务。</li></ul></li></ul><h3 id="ThreadPoolExecutor的策略"><a href="#ThreadPoolExecutor的策略" class="headerlink" title="ThreadPoolExecutor的策略"></a>ThreadPoolExecutor的策略</h3><p>线程池本身有一个调度线程，这个线程就是用于管理布控整个线程池里的各种任务和事务，例如创建线程、销毁线程、任务队列管理、线程队列管理等等。</p><h4 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h4><p><code>ThreadPoolExecutor</code>类中定义了一个<code>volatile int</code>变量<strong>runState</strong>来表示线程池的状态 ，分别为RUNNING、SHUTDOWN、STOP、TIDYING 、TERMINATED。</p><ul><li><p>线程池创建后处于<strong>RUNNING</strong>状态。</p></li><li><p>调用<code>shutdown()</code>方法后处于<strong>SHUTDOWN</strong>状态，线程池不能接受新的任务，清除一些空闲worker,会等待阻塞队列的任务完成。</p></li><li><p>调用<code>shutdownNow()</code>方法后处于<strong>STOP</strong>状态，线程池不能接受新的任务，中断所有线程，阻塞队列中没有被执行的任务全部丢弃。此时，poolsize=0,阻塞队列的size也为0。</p></li><li><p>当所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为<strong>TIDYING</strong>状态。接着会执行<code>terminated()</code>函数。</p><blockquote><p><code>ThreadPoolExecutor</code>中有一个控制状态的属性叫<code>ctl</code>，它是一个<code>AtomicInteger</code>类型的变量。</p></blockquote></li><li><p>线程池处在TIDYING状态时，<strong>执行完<code>terminated()</code>方法之后</strong>，就会由 <strong>TIDYING -&gt; TERMINATED</strong>， 线程池被设置为TERMINATED状态。</p></li></ul><h3 id="线程池主要的任务处理流程"><a href="#线程池主要的任务处理流程" class="headerlink" title="线程池主要的任务处理流程"></a>线程池主要的任务处理流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK 1.8 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();   </span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">// 1.当前线程数小于corePoolSize,则调用addWorker创建核心线程执行任务</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">       <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.如果不小于corePoolSize，则将任务添加到workQueue队列。</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="comment">// 2.1 如果isRunning返回false(状态检查)，则remove这个任务，然后执行拒绝策略。</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">            <span class="comment">// 2.2 线程池处于running状态，但是没有线程，则创建线程</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.如果放入workQueue失败，则创建非核心线程执行任务，</span></span><br><span class="line">    <span class="comment">// 如果这时创建非核心线程失败(当前线程总数不小于maximumPoolSize时)，就会执行拒绝策略。</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">         reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二次检查线程池的状态ctl-get"><a href="#二次检查线程池的状态ctl-get" class="headerlink" title="二次检查线程池的状态ctl.get()?"></a>二次检查线程池的状态<code>ctl.get()</code>?</h4><p>在多线程的环境下，线程池的状态是时刻发生变化的。很有可能刚获取线程池状态后线程池状态就改变了。判断是否将<code>command</code>加入<code>workqueue</code>是线程池之前的状态。倘若没有二次检查，万一线程池处于非<strong>RUNNING</strong>状态（在多线程环境下很有可能发生），那么<code>command</code>永远不会执行。</p><h4 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h4><ol><li><p>线程总数量 &lt; corePoolSize，无论线程是否空闲，都会新建一个核心线程执行任务（让核心线程数量快速达到corePoolSize，在核心线程数量 &lt; corePoolSize时）。<strong>注意，这一步需要获得全局锁。</strong></p></li><li><p>线程总数量 &gt;= corePoolSize时，新来的线程任务会进入任务队列中等待，然后空闲的核心线程会依次去缓存队列中取任务来执行（体现了<strong>线程复用</strong>）。 </p></li><li><p>当缓存队列满了，说明这个时候任务已经多到爆棚，需要一些“临时工”来执行这些任务了。于是会创建非核心线程去执行这个任务。<strong>注意，这一步需要获得全局锁。</strong></p></li><li><p>缓存队列满了， 且总线程数达到了maximumPoolSize，则会采取上面提到的拒绝策略进行处理。</p></li></ol><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.PNG" alt=""></p><h3 id="ThreadPoolExecutor如何做到线程复用的"><a href="#ThreadPoolExecutor如何做到线程复用的" class="headerlink" title="ThreadPoolExecutor如何做到线程复用的"></a>ThreadPoolExecutor如何做到线程复用的</h3><p>//todo 后面再阅读</p><p><a href="https://redspider.gitbook.io/concurrent/di-san-pian-jdk-gong-ju-pian/12#12-2-4-threadpoolexecutor-ru-he-zuo-dao-xian-cheng-fu-yong-de" target="_blank" rel="noopener">https://redspider.gitbook.io/concurrent/di-san-pian-jdk-gong-ju-pian/12#12-2-4-threadpoolexecutor-ru-he-zuo-dao-xian-cheng-fu-yong-de</a></p><h2 id="4-种常见的线程池"><a href="#4-种常见的线程池" class="headerlink" title="4 种常见的线程池"></a>4 种常见的线程池</h2><h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h4><ol><li><p>提交任务进线程池。</p></li><li><p>因为<strong>corePoolSize</strong>为0的关系，不创建核心线程，线程池最大为Integer.MAX_VALUE。</p></li><li><p>尝试将任务添加到<strong>SynchronousQueue</strong>队列。</p></li><li><p>如果SynchronousQueue入列成功，等待被当前运行的线程空闲后拉取执行。如果当前没有空闲线程，那么就创建一个非核心线程，然后从SynchronousQueue拉取任务并在当前线程执行。</p></li><li><p>如果SynchronousQueue已有任务在等待，入列操作将会阻塞。</p></li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>当需要执行很多<strong>短时间</strong>的任务时，CacheThreadPool的线程复用率比较高， 会显著的<strong>提高性能</strong>。而且线程60s后会回收，意味着即使没有任务进来，CacheThreadPool并不会占用很多资源。</p><h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>核心线程数量和总线程数量相等，都是传入的参数nThreads，所以只能创建核心线程，不能创建非核心线程。因为LinkedBlockingQueue的默认大小是Integer.MAX_VALUE，故如果核心线程空闲，则交给核心线程处理；如果核心线程不空闲，则入列等待，直到核心线程空闲。</p><h4 id="与CachedThreadPool的区别"><a href="#与CachedThreadPool的区别" class="headerlink" title="与CachedThreadPool的区别"></a>与CachedThreadPool的区别</h4><ul><li><p>因为 corePoolSize == maximumPoolSize ，所以FixedThreadPool只会创建核心线程。 而CachedThreadPool因为corePoolSize=0，所以只会创建非核心线程。</p></li><li><p>在 getTask() 方法，如果队列里没有任务可取，线程会一直阻塞在 LinkedBlockingQueue.take() ，线程不会被回收。 CachedThreadPool会在60s后收回。</p></li><li><p>由于线程不会被回收，会一直卡在阻塞，所以<strong>没有任务的情况下， FixedThreadPool占用资源更多</strong>。 </p></li><li><p>都几乎不会触发拒绝策略，但是原理不同。FixedThreadPool是因为阻塞队列可以很大（最大为Integer最大值），故几乎不会触发拒绝策略；CachedThreadPool是因为线程池很大（最大为Integer最大值），几乎不会导致线程数量大于最大线程数，故几乎不会触发拒绝策略。</p></li></ul><h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有且仅有一个核心线程（ corePoolSize == maximumPoolSize=1），使用了LinkedBlockingQueue（容量很大），所以，<strong>不会创建非核心线程</strong>。所有任务按照<strong>先来先执行</strong>的顺序执行。如果这个唯一的线程不空闲，那么新来的任务会存储在任务队列里等待执行。</p><h3 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ScheduledThreadPoolExecutor():</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个定长线程池，支持定时及周期性任务执行。</p><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><h2 id="阻塞队列的由来"><a href="#阻塞队列的由来" class="headerlink" title="阻塞队列的由来"></a>阻塞队列的由来</h2><p>生产者-消费者模式：生产者将生产的资源存进缓冲池中，消费者从缓冲池中拿到资源进行消费。</p><p>实现该模式，需要让<strong>多个线程操作共享变量</strong>（即资源），所以很容易引发<strong>线程安全问题</strong>，造成<strong>重复消费</strong>和<strong>死锁</strong>，尤其是生产者和消费者存在多个的情况。另外，当缓冲池空了，我们需要阻塞消费者，唤醒生产者；当缓冲池满了，我们需要阻塞生产者，唤醒消费者，这些个<strong>等待-唤醒</strong>逻辑都需要自己实现。</p><p>JDK中实现该逻辑的数据结构<code>BlockingQueue</code>,只管往里面存、取就行，而不用担心多线程环境下存、取共享变量的线程安全问题。</p><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>BlockingQueue是Java util.concurrent包下重要的数据结构，区别于普通的队列，BlockingQueue提供了<strong>线程安全的队列访问方式</strong>，并发包下很多高级同步类的实现都是基于BlockingQueue实现的。BlockingQueue一般用于生产者-消费者模式，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。<strong>BlockingQueue就是存放元素的容器</strong>。</p><h3 id="BlockingQueue的操作方法"><a href="#BlockingQueue的操作方法" class="headerlink" title="BlockingQueue的操作方法"></a>BlockingQueue的操作方法</h3><p>阻塞队列提供了四组不同的方法用于插入、移除、检查元素：</p><table><thead><tr><th>方法\处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add(e)</td><td>offer(e)</td><td><strong>put(e)</strong></td><td>offer(e,time,unit)</td></tr><tr><td>移除方法</td><td>remove()</td><td>poll()</td><td><strong>take()</strong></td><td>poll(time,unit)</td></tr><tr><td>检查方法</td><td>element()</td><td>peek()</td><td>-</td><td></td></tr></tbody></table><ul><li><p>抛出异常：如果试图的操作无法立即执行，抛异常。当阻塞队列满时候，再往队列里插入元素，会抛出IllegalStateException(“Queue full”)异常。当队列为空时，从队列里获取元素时会抛出NoSuchElementException异常 。</p></li><li><p>返回特殊值：如果试图的操作无法立即执行，返回一个特殊值，通常是true / false。</p></li><li><p>一直阻塞：如果试图的操作无法立即执行，则一直阻塞或者响应中断。</p></li><li><p>超时退出：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功，通常是 true / false。</p></li></ul><blockquote><p>不能往阻塞队列中插入null,会抛出空指针异常。</p><p>可以访问阻塞队列中的任意元素，调用remove(o)可以将队列之中的特定对象移除，但并不高效，尽量避免使用。</p></blockquote><h3 id="BlockingQueue的实现类"><a href="#BlockingQueue的实现类" class="headerlink" title="BlockingQueue的实现类"></a>BlockingQueue的实现类</h3><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>由<strong>数组</strong>结构组成的<strong>有界</strong>阻塞队列。内部结构是数组，故具有数组的特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair)</span></span>&#123;</span><br><span class="line">    <span class="comment">//..省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以初始化队列大小， 且一旦初始化不能改变。构造方法中的fair表示控制对象的内部锁是否采用公平锁，默认是<strong>非公平锁</strong>。</p><h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><p>由<strong>链表</strong>结构组成的<strong>有界</strong>阻塞队列。内部结构是链表，具有链表的特性。默认队列的大小是<code>Integer.MAX_VALUE</code>，也可以指定大小。此队列按照<strong>先进先出</strong>的原则对元素进行排序。</p><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>该队列中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素 。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。 </p><p>DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。 </p><h4 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h4><p>基于优先级的无界阻塞队列（优先级的判断通过构造函数传入的Compator对象来决定），内部控制线程同步的锁采用的是公平锁。</p><blockquote><p><strong>PriorityBlockingQueue</strong>不会阻塞数据生产者（因为队列是无界的），而只会在没有可消费的数据时，阻塞数据的消费者。因此使用的时候要特别注意，<strong>生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。</strong>对于使用默认大小的<strong>LinkedBlockingQueue</strong>也是一样的。</p></blockquote><h4 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h4><p>这个队列比较特殊，<strong>没有任何内部容量</strong>，甚至连一个队列的容量都没有。并且每个 put 必须等待一个 take，反之亦然</p><h2 id="阻塞队列的原理"><a href="#阻塞队列的原理" class="headerlink" title="阻塞队列的原理"></a>阻塞队列的原理</h2><p>利用了Lock锁的多条件（Condition）阻塞控制。</p><p>ArrayBlockingQueue JDK 1.8的源码。</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>除了初始化队列的大小和是否是公平锁之外，还对同一个锁（lock）初始化了两个监视器，分别是notEmpty和notFull。这两个监视器的作用目前可以简单理解为标记分组，当该线程是put操作时，给他加上监视器notFull,标记这个线程是一个生产者；当线程是take操作时，给他加上监视器notEmpty，标记这个线程是消费者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据元素数组</span></span><br><span class="line"><span class="keyword">final</span> Object[] items;</span><br><span class="line"><span class="comment">//下一个待取出元素索引</span></span><br><span class="line"><span class="keyword">int</span> takeIndex;</span><br><span class="line"><span class="comment">//下一个待添加元素索引</span></span><br><span class="line"><span class="keyword">int</span> putIndex;</span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="comment">//内部锁</span></span><br><span class="line"><span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"><span class="comment">//消费者监视器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"><span class="comment">//生产者监视器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//..省略其他代码</span></span><br><span class="line">    lock = <span class="keyword">new</span> ReentrantLock(fair);</span><br><span class="line">    notEmpty = lock.newCondition();</span><br><span class="line">    notFull =  lock.newCondition();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    <span class="comment">// 1.自旋拿锁</span></span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 2.判断队列是否满了</span></span><br><span class="line">        <span class="keyword">while</span> (count == items.length)</span><br><span class="line">            <span class="comment">// 2.1如果满了，阻塞该线程，并标记为notFull线程，</span></span><br><span class="line">            <span class="comment">// 等待notFull的唤醒，唤醒之后继续执行while循环。</span></span><br><span class="line">            notFull.await();</span><br><span class="line">        <span class="comment">// 3.如果没有满，则进入队列</span></span><br><span class="line">        enqueue(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">    <span class="comment">// assert items[putIndex] == null;</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">        putIndex = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="comment">// 4 唤醒一个等待的线程</span></span><br><span class="line">    notEmpty.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put流程总结"><a href="#put流程总结" class="headerlink" title="put流程总结"></a>put流程总结</h3><ol><li><p>所有执行put操作的线程竞争lock锁，拿到了lock锁的线程进入下一步，没有拿到lock锁的线程自旋竞争锁。</p></li><li><p>判断阻塞队列是否满了，如果满了，则调用await方法阻塞这个线程，并标记为notFull（生产者）线程，同时释放lock锁,等待被消费者线程唤醒。</p></li><li><p>如果没有满，则调用enqueue方法将元素put进阻塞队列。注意这一步的线程还有一种情况是第二步中阻塞的线程被唤醒且又拿到了lock锁的线程。</p></li><li><p>唤醒一个标记为notEmpty（消费者）的线程。</p></li></ol><h3 id="take操作"><a href="#take操作" class="headerlink" title="take操作"></a>take操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">            notEmpty.await();</span><br><span class="line">        <span class="keyword">return</span> dequeue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">    <span class="comment">// assert items[takeIndex] != null;</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    E x = (E) items[takeIndex];</span><br><span class="line">    items[takeIndex] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (++takeIndex == items.length)</span><br><span class="line">        takeIndex = <span class="number">0</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</span><br><span class="line">        itrs.elementDequeued();</span><br><span class="line">    notFull.signal();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="take流程总结"><a href="#take流程总结" class="headerlink" title="take流程总结"></a>take流程总结</h3><ol><li><p>所有执行take操作的线程竞争lock锁，拿到了lock锁的线程进入下一步，没有拿到lock锁的线程自旋竞争锁。</p></li><li><p>判断阻塞队列是否为空，如果是空，则调用await方法阻塞这个线程，并标记为notEmpty（消费者）线程，同时释放lock锁,等待被生产者线程唤醒。</p></li><li><p>如果没有空，则调用dequeue方法。注意这一步的线程还有一种情况是第二步中阻塞的线程被唤醒且又拿到了lock锁的线程。</p></li><li><p>唤醒一个标记为notFull（生产者）的线程。</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>put和take操作都需要<strong>先获取锁</strong>，没有获取到锁的线程会被挡在第一道大门之外自旋拿锁，直到获取到锁。</p></li><li><p>就算拿到锁了之后，也<strong>不一定</strong>会顺利进行put/take操作，需要判断<strong>队列是否可用</strong>（是否满/空），如果不可用，则会被阻塞，<strong>并释放锁</strong>。</p></li><li><p>在第2点被阻塞的线程会被唤醒，但是在唤醒之后，<strong>依然需要拿到锁</strong>才能继续往下执行，否则，自旋拿锁，拿到锁了再while判断队列是否可用（这也是为什么不用if判断，而使用while判断的原因）。</p></li></ol><h2 id="示例和使用场景"><a href="#示例和使用场景" class="headerlink" title="示例和使用场景"></a>示例和使用场景</h2><h3 id="生产者-消费者模型"><a href="#生产者-消费者模型" class="headerlink" title="生产者-消费者模型"></a>生产者-消费者模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tz.juc.block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用阻塞队列实现的生产者和消费者模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tzcqupt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockQueueProducerConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(queueSize);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        BlockQueueProducerConsumer blockQueueProducerConsumer = <span class="keyword">new</span> BlockQueueProducerConsumer();</span><br><span class="line">        Producer producer = blockQueueProducerConsumer.<span class="keyword">new</span> Producer();</span><br><span class="line">        Consumer consumer = blockQueueProducerConsumer.<span class="keyword">new</span> Consumer();</span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            consume();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.take();</span><br><span class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            produce();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.put(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="锁接口和类"><a href="#锁接口和类" class="headerlink" title="锁接口和类"></a>锁接口和类</h1><h2 id="synchronized的缺点"><a href="#synchronized的缺点" class="headerlink" title="synchronized的缺点"></a>synchronized的缺点</h2><ul><li><p>如果临界区是只读操作，其实可以多线程一起执行，但使用synchronized的话，<strong>同一时间只能有一个线程执行</strong>。</p></li><li><p>synchronized无法知道线程有没有成功获取到锁</p></li><li><p>使用synchronized，如果临界区因为IO或者sleep方法等原因阻塞了，而当前线程又没有释放锁，就会导致<strong>所有线程等待</strong>。</p></li></ul><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><h3 id="可重入锁和非可重入锁"><a href="#可重入锁和非可重入锁" class="headerlink" title="可重入锁和非可重入锁"></a>可重入锁和非可重入锁</h3><p>重入锁，就是支持重新进入的锁，也就是说这个锁支持一个<strong>线程对资源重复加锁</strong>。</p><p>synchronized关键字就是使用的重入锁。比如说，你在一个synchronized实例方法里面调用另一个本实例的synchronized实例方法，它可以重新进入这个锁，不会出现任何异常。</p><p>如果我们自己在继承AQS实现同步器的时候，没有考虑到占有锁的线程再次获取锁的场景，可能就会导致线程阻塞，那这个就是一个“非可重入锁”。</p><p><code>ReentrantLock</code>的中文意思就是可重入锁。</p><h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p>公平==&gt;先来后到，FIFO</p><p>如果对一个锁来说，先对锁获取请求的线程一定会先被满足，后对锁获取请求的线程后被满足，那这个锁就是公平的。</p><p>一般情况下，<strong>非公平锁能提升一定的效率。但是非公平锁可能会发生线程饥饿（有一些线程长时间得不到锁）的情况</strong>。</p><p><code>ReentrantLock</code>支持非公平锁和公平锁两种。</p><h3 id="读写锁和排它锁"><a href="#读写锁和排它锁" class="headerlink" title="读写锁和排它锁"></a>读写锁和排它锁</h3><p><strong>排它锁</strong>：同一时刻只允许一个线程进行访问。<code>synchronized</code>用的锁和<code>ReentrantLock</code>都是排它锁。</p><p><strong>读写锁</strong>可以再同一时刻允许多个读线程访问。Java提供了<code>ReentrantReadWriteLock</code>类作为读写锁的默认实现，内部维护了两个锁：一个读锁，一个写锁。通过分离读锁和写锁，使得在“读多写少”的环境下，大大地提高了性能。</p><blockquote><p>注意，即使用读写锁，在写线程访问时，所有的读线程和其它写线程均被阻塞。</p></blockquote><h2 id="JDK-中接口和类"><a href="#JDK-中接口和类" class="headerlink" title="JDK 中接口和类"></a>JDK 中接口和类</h2><h3 id="抽象类AQS-AQLS-AOS"><a href="#抽象类AQS-AQLS-AOS" class="headerlink" title="抽象类AQS/AQLS/AOS"></a>抽象类AQS/AQLS/AOS</h3><p><strong>AQS</strong>（AbstractQueuedSynchronizer）是在JDK 1.5 发布的，提供了一个“队列同步器”的基本功能实现。而AQS里面的“资源”是用一个<code>int</code>类型的数据来表示的，有时候我们的业务需求资源的数量超出了<code>int</code>的范围，所以在JDK 1.6 中，多了一个<strong>AQLS</strong>（AbstractQueuedLongSynchronizer）。它的代码跟AQS几乎一样，只是把资源的类型变成了<code>long</code>类型。</p><p>AQS和AQLS都继承了一个类叫<strong>AOS</strong>（AbstractOwnableSynchronizer）。这个类也是在JDK 1.6 中出现的。这个类只有几行简单的代码。它是用于表示锁与持有者之间的关系（独占模式）。</p><h3 id="接口Condition-Lock-ReadWriteLock"><a href="#接口Condition-Lock-ReadWriteLock" class="headerlink" title="接口Condition/Lock/ReadWriteLock"></a>接口Condition/Lock/ReadWriteLock</h3><p>juc.locks包下共有三个接口：<code>Condition</code>、<code>Lock</code>、<code>ReadWriteLock</code>。其中，Lock和ReadWriteLock从名字就可以看得出来，分别是锁和读写锁的意思。Lock接口里面有一些获取锁和释放锁的方法声明，而ReadWriteLock里面只有两个方法，分别返回“读锁”和“写锁”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lock接口中有一个方法是可以获得一个<code>Condition</code>。</p><p>每个对象都可以用继承自<code>Object</code>的<strong>wait/notify</strong>方法来实现<strong>等待/通知机制</strong>。而Condition接口也提供了类似Object监视器的方法，通过与<strong>Lock</strong>配合来实现等待/通知模式。</p><p>Condition和Object的wait/notify基本相似。其中，Condition的await方法对应的是Object的wait方法，而Condition的<strong>signal/signalAll</strong>方法则对应Object的notify/notifyAll()。</p><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p><code>ReentrantLock</code>是一个非抽象类，它是<code>Lock</code>接口的JDK默认实现，实现了锁的基本功能。从名字上看，它是一个<strong>可重入锁</strong>，从源码上看，它内部有一个抽象类<code>Sync</code>，是继承了<code>AQS</code>，自己实现的一个同步器。同时，<code>ReentrantLock</code>内部有两个非抽象类<code>NonfairSync</code>和<code>FairSync</code>，它们都继承了<code>Sync</code>。从名字上看得出，分别是<strong>非公平同步器</strong>和<strong>公平同步器</strong>的意思。这意味着<code>ReentrantLock</code>可以支持<strong>公平锁</strong>和<strong>非公平锁</strong></p><p>通过看着两个同步器的源码可以发现，它们的实现都是<strong>独占</strong>的。都调用了AOS的<code>setExclusiveOwnerThread</code>方法，所以<code>ReentrantLock</code>的锁的”独占“的，也就是说，它的锁都是<strong>排他锁</strong>，不能共享。</p><p>在<code>ReentrantLock</code>的构造方法里，可以传入一个<code>boolean</code>类型的参数，来指定它是否是一个公平锁，默认情况下是非公平的。这个参数一旦实例化后就不能修改，只能通过<code>isFair()</code>方法来查看。</p><h3 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h3><p>它是R<code>eadWriteLock</code>接口的JDK默认实现。它与<code>ReentrantLock</code>的功能类似，同样是<strong>可重入</strong>的，支持<strong>非公平锁</strong>和<strong>公平锁</strong>。不同的是，它还支持<strong>读写锁</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line"><span class="keyword">final</span> Sync sync;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ReadLock</span><span class="params">(ReentrantReadWriteLock lock)</span> </span>&#123;</span><br><span class="line">            sync = lock.sync;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">WriteLock</span><span class="params">(ReentrantReadWriteLock lock)</span> </span>&#123;</span><br><span class="line">            sync = lock.sync;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法，初始化两个锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">    readerLock = <span class="keyword">new</span> ReadLock(<span class="keyword">this</span>);</span><br><span class="line">    writerLock = <span class="keyword">new</span> WriteLock(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取读锁和写锁的方法</span></span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.<span class="function">WriteLock <span class="title">writeLock</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.<span class="function">ReadLock  <span class="title">readLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> readerLock; &#125;</span><br></pre></td></tr></table></figure><p>ReentrantReadWriteLock实现了读写锁，但它有一个小弊端，就是在“写”操作的时候，其它线程不能写也不能读。我们称这种现象为“写饥饿”。</p><h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><p>来自Java 8  它没有实现<code>Lock</code>接口和<code>ReadWriteLoc</code>k接口，但它其实是实现了“读写锁”的功能，并且性能比<code>ReentrantReadWriteLock</code>更高。<code>StampedLock</code>还把读锁分为了<strong>乐观读锁</strong>和<strong>悲观读锁</strong>两种。</p><p>官方代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> x, y;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> StampedLock sl = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 写锁的使用</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">double</span> deltaY)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">long</span> stamp = sl.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       x += deltaX;</span><br><span class="line">       y += deltaY;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       sl.unlockWrite(stamp); <span class="comment">// 释放写锁</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 乐观读锁的使用</span></span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">long</span> stamp = sl.tryOptimisticRead(); <span class="comment">// 获取乐观读锁</span></span><br><span class="line">     <span class="keyword">double</span> currentX = x, currentY = y;</span><br><span class="line">     <span class="keyword">if</span> (!sl.validate(stamp)) &#123; <span class="comment">// //检查乐观读锁后是否有其他写锁发生，有则返回false</span></span><br><span class="line">        stamp = sl.readLock(); <span class="comment">// 获取一个悲观读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          currentX = x;</span><br><span class="line">          currentY = y;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           sl.unlockRead(stamp); <span class="comment">// 释放悲观读锁</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 悲观读锁以及读锁升级写锁的使用</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">moveIfAtOrigin</span><span class="params">(<span class="keyword">double</span> newX, <span class="keyword">double</span> newY)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">long</span> stamp = sl.readLock(); <span class="comment">// 悲观读锁</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (x == <span class="number">0.0</span> &amp;&amp; y == <span class="number">0.0</span>) &#123;</span><br><span class="line">         <span class="comment">// 读锁尝试转换为写锁：转换成功后相当于获取了写锁，转换失败相当于有写锁被占用</span></span><br><span class="line">         <span class="keyword">long</span> ws = sl.tryConvertToWriteLock(stamp); </span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (ws != <span class="number">0L</span>) &#123; <span class="comment">// 如果转换成功</span></span><br><span class="line">           stamp = ws; <span class="comment">// 读锁的票据更新为写锁的</span></span><br><span class="line">           x = newX;</span><br><span class="line">           y = newY;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123; <span class="comment">// 如果转换失败</span></span><br><span class="line">           sl.unlockRead(stamp); <span class="comment">// 释放读锁</span></span><br><span class="line">           stamp = sl.writeLock(); <span class="comment">// 强制获取写锁</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       sl.unlock(stamp); <span class="comment">// 释放所有锁</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="并发集合容器"><a href="#并发集合容器" class="headerlink" title="并发集合容器"></a>并发集合容器</h1><h2 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h2><p>常用容器类架构</p><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8%E7%B1%BB.png" alt=""></p><h3 id="并发Map"><a href="#并发Map" class="headerlink" title="并发Map"></a>并发Map</h3><h4 id="ConcurrentHashMap类"><a href="#ConcurrentHashMap类" class="headerlink" title="ConcurrentHashMap类"></a><code>ConcurrentHashMap</code>类</h4><h5 id="ConcurrentMap接口"><a href="#ConcurrentMap接口" class="headerlink" title="ConcurrentMap接口"></a>ConcurrentMap接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    <span class="comment">//如果插入的key相同，则不替换原有的value值；</span></span><br><span class="line">    <span class="function">V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    <span class="comment">//增加了对value的判断，如果要删除的key-value不能与Map中原有的key-value对应上，则不会删除该元素;</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//替换元素</span></span><br><span class="line">    <span class="comment">//增加了对value值的判断，如果key-oldValue能与Map中原有的key-value对应上，才进行替换操作；</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//替换元素</span></span><br><span class="line">    <span class="comment">//如果key存在则直接替换</span></span><br><span class="line">    <span class="function">V <span class="title">replace</span><span class="params">(K key, V value)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConcurrentHashMap原理"><a href="#ConcurrentHashMap原理" class="headerlink" title="ConcurrentHashMap原理"></a><code>ConcurrentHashMap</code>原理</h5><p><code>ConcurrentHashMap</code>提供了一种粒度更细的加锁机制来实现在多线程下更高的性能，这种机制叫分段锁(Lock Striping)。</p><p>就是<strong>将数据分段，对每一段数据分配一把锁</strong>。当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><p><code>ConcurrentHashMap</code>是由Segment数组结构和HashEntry数组结构组成。Segment是一种可重入锁ReentrantLock，HashEntry则用于存储键值对数据。</p><p>一个<code>ConcurrentHashMap</code>里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构， 一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构（同HashMap一样，它也会在长度达到8的时候转化为红黑树）的元素， 每个Segment守护者一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。</p><h4 id="ConcurrentSkipListMap类"><a href="#ConcurrentSkipListMap类" class="headerlink" title="ConcurrentSkipListMap类"></a><code>ConcurrentSkipListMap</code>类</h4><h5 id="ConcurrentNavigableMap接口"><a href="#ConcurrentNavigableMap接口" class="headerlink" title="ConcurrentNavigableMap接口"></a>ConcurrentNavigableMap接口</h5><p><code>ConcurrentNavigableMap</code>接口继承了<code>NavigableMap</code>接口，这个接口提供了针对给定搜索目标返回最接近匹配项的导航方法。</p><h5 id="ConcurrentSkipListMap原理"><a href="#ConcurrentSkipListMap原理" class="headerlink" title="ConcurrentSkipListMap原理"></a><code>ConcurrentSkipListMap</code>原理</h5><p><code>ConcurrentNavigableMap</code>接口的主要实现类是<code>ConcurrentSkipListMap</code>类。从名字上来看，它的底层使用的是跳表（SkipList）的数据结构。跳表是一种<strong>空间换时间</strong>的数据结构，可以使用CAS来保证并发安全性。</p><h3 id="并发Queue"><a href="#并发Queue" class="headerlink" title="并发Queue"></a>并发Queue</h3><p>JDK提供了对队列和双端队列的线程安全的类：<code>ConcurrentLinkedDeque</code>和<code>ConcurrentLinkedQueue</code>。这两个类是使用CAS来实现线程安全的。</p><h3 id="并发Set"><a href="#并发Set" class="headerlink" title="并发Set"></a>并发Set</h3><p>JDK提供了<code>ConcurrentSkipListSet</code>，是线程安全的有序的集合。底层是使用<code>ConcurrentSkipListMap</code>实现。</p><p>google的guava框架的线程安全set <code>Set&lt;String&gt; s = Sets.newConcurrentHashSet();</code></p><h1 id="CopyOnWrite"><a href="#CopyOnWrite" class="headerlink" title="CopyOnWrite"></a>CopyOnWrite</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>CopyOnWrite是计算机设计领域中的一种优化策略，也是一种在并发场景下常用的设计思想——写入时复制思想。</p><p>就是当有多个调用者同时去请求一个资源数据的时候，有一个调用者出于某些原因需要对当前的数据源进行修改，这个时候系统将会复制一个当前数据源的副本给调用者修改。</p><p>CopyOnWrite容器即<strong>写时复制的容器</strong>,当我们往一个容器中添加元素的时候，不直接往容器中添加，而是将当前容器进行copy，复制出来一个新的容器，然后向新容器中添加我们需要的元素，最后将原容器的引用指向新容器。</p><p>可以在并发的场景下对容器进行”读操作”而不需要”加锁”，从而达到读写分离的目的。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>CopyOnWriteArrayList经常被用于“读多写少”的并发场景，是因为CopyOnWriteArrayList无需任何同步措施，大大增强了读的性能。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>CopyOnWriteArrayList每次执行写操作都会将原容器进行拷贝了一份，数据量大的时候，内存会存在较大的压力，可能会引起频繁Full GC（ZGC因为没有使用Full GC）</li><li>opyOnWriteArrayList由于实现的原因，写和读分别作用在不同新老容器上，在写操作执行过程中，读不会阻塞，但读取到的却是老容器的数据。</li></ol><blockquote><p>如果我们希望写入的数据马上能准确地读取，请不要使用CopyOnWrite容器。</p></blockquote><h1 id="线程通信工具类"><a href="#线程通信工具类" class="headerlink" title="线程通信工具类"></a>线程通信工具类</h1><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>作用：限制线程的数量。</p><p>提供的功能就是多个线程彼此“打信号”。而这个“信号”是一个<code>int</code>类型的数据，也可以看成是一种“资源”。</p><p>可以在构造函数中传入初始资源总数，以及是否使用“公平”的同步器。默认情况下，是非公平的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下使用非公平</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要的方法是acquire方法和release方法。acquire()方法会申请一个permit，而release方法会释放一个permit。当然，你也可以申请多个acquire(int permits)或者释放多个release(int permits)。</p><p>每次acquire，permits就会减少一个或者多个。如果减少到了0，再有其他线程来acquire，那就要阻塞这个线程直到有其它线程release permit为止。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>Semaphore往往用于资源有限的场景中，去限制线程的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(<span class="keyword">int</span> value, Semaphore semaphore)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire(); <span class="comment">// 获取permit</span></span><br><span class="line">                System.out.println(String.format(<span class="string">"当前线程是%d, 还剩%d个资源，还有%d个线程在等待"</span>,</span><br><span class="line">                        value, semaphore.availablePermits(), semaphore.getQueueLength()));</span><br><span class="line">                <span class="comment">// 睡眠随机时间，打乱释放顺序</span></span><br><span class="line">                Random random =<span class="keyword">new</span> Random();</span><br><span class="line">                Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                semaphore.release(); <span class="comment">// 释放permit</span></span><br><span class="line">                System.out.println(String.format(<span class="string">"线程%d释放了资源"</span>, value));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(i, semaphore)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Semaphore内部有一个继承了AQS的同步器Sync，重写了<code>tryAcquireShared</code>方法。在这个方法里，会去尝试获取资源。</p><p>如果获取失败（想要的资源数量小于目前已有的资源数量），就会返回一个负数（代表尝试获取资源失败）。然后当前线程就会进入AQS的等待队列。</p><h2 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h2><p>Exchanger类用于两个线程交换数据。它支持泛型，也就是说你可以在两个线程之间传送任何数据。</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"这是线程A，得到了另一个线程的数据："</span></span><br><span class="line">                        + exchanger.exchange(<span class="string">"这是来自线程A的数据"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"这个时候线程A是阻塞的，在等待线程B的数据"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"这是线程B，得到了另一个线程的数据："</span></span><br><span class="line">                        + exchanger.exchange(<span class="string">"这是来自线程B的数据"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><blockquote><p>这个时候线程A是阻塞的，在等待线程B的数据 </p><p>这是线程B，得到了另一个线程的数据：这是来自线程A的数据 </p><p>这是线程A，得到了另一个线程的数据：这是来自线程B的数据</p></blockquote><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>线程等待直到计数器减为0时开始工作。CountDown代表计数递减，Latch表示屏障。</p><p>假设某个线程在执行任务之前，需要等待其它线程完成一些前置任务，必须等所有的前置任务都完成，才能开始执行本线程的任务。</p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>玩游戏的时候，在游戏真正开始之前，一般会等待一些前置任务完成，比如“加载地图数据”，“加载人物模型”，“加载背景音乐”等等。只有当所有的东西都加载完成后，玩家才能真正进入游戏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义前置任务线程</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PreTaskThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String task;</span><br><span class="line">        <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PreTaskThread</span><span class="params">(String task, CountDownLatch countDownLatch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.task = task;</span><br><span class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Random random = <span class="keyword">new</span> Random();</span><br><span class="line">                Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                System.out.println(task + <span class="string">" - 任务完成"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设有三个模块需要加载</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主任务</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"等待数据加载..."</span>);</span><br><span class="line">                System.out.println(String.format(<span class="string">"还有%d个前置任务"</span>, countDownLatch.getCount()));</span><br><span class="line">                countDownLatch.await();</span><br><span class="line">                System.out.println(<span class="string">"数据加载完成，正式开始游戏！"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前置任务</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载地图数据"</span>, countDownLatch)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载人物模型"</span>, countDownLatch)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载背景音乐"</span>, countDownLatch)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>内部定义了一个AQS的实现类Sync。</p><blockquote><p>构造器中的<strong>计数值（count）实际上就是闭锁需要等待的线程数量</strong>。这个值只能被设置一次，而且CountDownLatch<strong>没有提供任何机制去重新设置这个计数值</strong>。</p></blockquote><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>理解：循环的屏障，作用跟CountDownLatch类似，但是可以重复使用。</p><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><p>如果玩一个游戏有多个“关卡”，那使用CountDownLatch显然不太合适，那需要为每个关卡都创建一个实例。那我们可以使用CyclicBarrier来实现每个关卡的数据加载等待功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PreTaskThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String task;</span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PreTaskThread</span><span class="params">(String task, CyclicBarrier cyclicBarrier)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.task = task;</span><br><span class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 假设总共三个关卡</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">                    Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                    System.out.println(String.format(<span class="string">"关卡%d的任务%s完成"</span>, i, task));</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                cyclicBarrier.reset(); <span class="comment">// 重置屏障</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"本关卡所有前置任务完成，开始游戏..."</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载地图数据"</span>, cyclicBarrier)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载人物模型"</span>, cyclicBarrier)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载背景音乐"</span>, cyclicBarrier)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>关卡1的任务加载人物模型完成<br>关卡1的任务加载背景音乐完成<br>关卡1的任务加载地图数据完成<br>本关卡所有前置任务完成，开始游戏…<br>关卡2的任务加载人物模型完成<br>关卡2的任务加载背景音乐完成<br>关卡2的任务加载地图数据完成<br>本关卡所有前置任务完成，开始游戏…<br>关卡3的任务加载背景音乐完成<br>关卡3的任务加载人物模型完成<br>关卡3的任务加载地图数据完成<br>本关卡所有前置任务完成，开始游戏…</p></blockquote><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p><code>CyclicBarrier</code>没有分为<code>await()</code>和<code>countDown()</code>，而是只有单独的一个<code>await()</code>方法。</p><p>一旦调用await()方法的线程数量等于构造方法中传入的任务总量（这里是3），就代表达到屏障了。<code>CyclicBarrier</code>允许我们在达到屏障的时候可以执行一个任务，可以在构造方法传入一个<code>Runnable</code>类型的对象。上述案例就是在达到屏障时，输出“本关卡所有前置任务完成，开始游戏…”。</p><p><code>CyclicBarrier</code>内部使用的是Lock + Condition实现的等待/通知模式</p><h2 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h2><p>JDK 1.7出现，移相器，增强的<code>CyclicBarrier</code>.</p><p><code>CyclicBarrier</code>，可以发现它在构造方法里传入“任务总量”<code>parties</code>之后，就不能修改这个值了，并且每次调用<code>await()</code>方法也只能消耗一个<code>parties</code>计数。但Phaser可以动态地调整任务总量！</p><h3 id="变量解释"><a href="#变量解释" class="headerlink" title="变量解释"></a>变量解释</h3><ul><li><p>party：对应一个线程，数量可以通过register或者构造参数传入;</p></li><li><p>arrive：对应一个party的状态，初始时是unarrived，当调用<code>arriveAndAwaitAdvance()</code>或者 <code>arriveAndDeregister()</code>进入arrive状态，可以通过<code>getUnarrivedParties()</code>获取当前未到达的数量;</p></li><li><p>register：注册一个party，每一阶段必须所有注册的party都到达才能进入下一阶段;</p></li><li><p>deRegister：减少一个party。</p></li><li><p>phase：阶段，当所有注册的party都arrive之后，将会调用Phaser的<code>onAdvance()</code>方法来判断是否要进入下一阶段。</p></li></ul><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><p>假设我们游戏有三个关卡，但只有第一个关卡有新手教程，需要加载新手教程模块。但后面的第二个关卡和第三个关卡都不需要。我们可以用Phaser来做这个需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhaserDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PreTaskThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String task;</span><br><span class="line">        <span class="keyword">private</span> Phaser phaser;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PreTaskThread</span><span class="params">(String task, Phaser phaser)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.task = task;</span><br><span class="line">            <span class="keyword">this</span>.phaser = phaser;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 第二次关卡起不加载NPC，跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; <span class="string">"加载新手教程"</span>.equals(task)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">                    Thread.sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                    System.out.println(String.format(<span class="string">"关卡%d，需要加载%d个模块，当前模块【%s】"</span>,</span><br><span class="line">                            i, phaser.getRegisteredParties(), task));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从第二个关卡起，不加载NPC</span></span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; <span class="string">"加载新手教程"</span>.equals(task)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"下次关卡移除加载【新手教程】模块"</span>);</span><br><span class="line">                        phaser.arriveAndDeregister(); <span class="comment">// 移除一个模块</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        phaser.arriveAndAwaitAdvance();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phaser phaser = <span class="keyword">new</span> Phaser(<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</span><br><span class="line">                System.out.println(String.format(<span class="string">"第%d次关卡准备完成"</span>, phase + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">return</span> phase == <span class="number">3</span> || registeredParties == <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载地图数据"</span>, phaser)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载人物模型"</span>, phaser)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载背景音乐"</span>, phaser)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> PreTaskThread(<span class="string">"加载新手教程"</span>, phaser)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><blockquote><p>关卡1，需要加载4个模块，当前模块【加载地图数据】<br>关卡1，需要加载4个模块，当前模块【加载背景音乐】<br>关卡1，需要加载4个模块，当前模块【加载人物模型】<br>关卡1，需要加载4个模块，当前模块【加载新手教程】<br>下次关卡移除加载【新手教程】模块<br>第1次关卡准备完成<br>关卡2，需要加载3个模块，当前模块【加载人物模型】<br>关卡2，需要加载3个模块，当前模块【加载地图数据】<br>关卡2，需要加载3个模块，当前模块【加载背景音乐】<br>第2次关卡准备完成<br>关卡3，需要加载3个模块，当前模块【加载人物模型】<br>关卡3，需要加载3个模块，当前模块【加载地图数据】<br>关卡3，需要加载3个模块，当前模块【加载背景音乐】<br>第3次关卡准备完成</p></blockquote><blockquote><p>Phaser不在意具体有哪些线程arrive，只要达到它当前阶段的parties值，就触发屏障。是没有分辨具体是哪个线程的功能的，它在意的只是数量。</p></blockquote><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>内部使用了两个基于Fork-Join框架的原子类辅助。</p><h1 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>Fork/Join框架是一个实现了ExecutorService接口的多线程处理器，它专为那些可以通过递归分解成更细小的任务而设计，最大化的利用多核处理器来提高应用程序的性能。</p><p>与其他ExecutorService相关的实现相同的是，Fork/Join框架会将任务分配给线程池中的线程。而与之不同的是，Fork/Join框架在执行任务时使用了<strong>工作窃取算法</strong>。</p><h2 id="工作窃取算法"><a href="#工作窃取算法" class="headerlink" title="工作窃取算法"></a>工作窃取算法</h2><p>工作窃取算法指的是在多线程执行不同任务队列的过程中，某个线程执行完自己队列的任务后从其他线程的任务队列里窃取任务来执行。</p><h2 id="Fork-Join的具体实现"><a href="#Fork-Join的具体实现" class="headerlink" title="Fork/Join的具体实现"></a>Fork/Join的具体实现</h2><p>Fork/Join框架简单来讲就是对任务的分割与子任务的合并，所以要实现这个框架，先得有<strong>任务</strong>。在Fork/Join框架里提供了抽象类<code>ForkJoinTask</code>来实现任务。</p><h3 id="ForkJoinTask"><a href="#ForkJoinTask" class="headerlink" title="ForkJoinTask"></a>ForkJoinTask</h3><p>ForkJoinTask是一个类似普通线程的实体，但是比普通线程轻量得多。</p><h4 id="fork-方法"><a href="#fork-方法" class="headerlink" title="fork()方法"></a>fork()方法</h4><p>使用线程池中的空闲线程异步提交任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本文所有代码都引自Java 8</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title">fork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t;</span><br><span class="line">    <span class="comment">// ForkJoinWorkerThread是执行ForkJoinTask的专有线程，由ForkJoinPool管理</span></span><br><span class="line">    <span class="comment">// 先判断当前线程是否是ForkJoin专有线程，如果是，则将任务push到当前线程所负责的队列里去</span></span><br><span class="line">    <span class="keyword">if</span> ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread)</span><br><span class="line">        ((ForkJoinWorkerThread)t).workQueue.push(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         <span class="comment">// 如果不是则将线程加入队列</span></span><br><span class="line">        <span class="comment">// 没有显式创建ForkJoinPool的时候走这里，提交任务到默认的common线程池中</span></span><br><span class="line">        ForkJoinPool.common.externalPush(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>把任务推入当前工作线程的工作队列里</strong>。</p><h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h4><p>等待处理任务的线程处理完毕，获得返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="comment">// doJoin()方法来获取当前任务的执行状态</span></span><br><span class="line">    <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">        <span class="comment">// 任务异常，抛出异常</span></span><br><span class="line">        reportException(s);</span><br><span class="line">    <span class="comment">// 任务正常完成，获取返回值</span></span><br><span class="line">    <span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * doJoin()方法用来返回当前任务的执行状态</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</span><br><span class="line">    <span class="comment">// 先判断任务是否执行完毕，执行完毕直接返回结果（执行状态）</span></span><br><span class="line">    <span class="keyword">return</span> (s = status) &lt; <span class="number">0</span> ? s :</span><br><span class="line">    <span class="comment">// 如果没有执行完毕，先判断是否是ForkJoinWorkThread线程</span></span><br><span class="line">    ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread) ?</span><br><span class="line">        <span class="comment">// 如果是，先判断任务是否处于工作队列顶端（意味着下一个就执行它）</span></span><br><span class="line">        <span class="comment">// tryUnpush()方法判断任务是否处于当前工作队列顶端，是返回true</span></span><br><span class="line">        <span class="comment">// doExec()方法执行任务</span></span><br><span class="line">        (w = (wt = (ForkJoinWorkerThread)t).workQueue).</span><br><span class="line">        <span class="comment">// 如果是处于顶端并且任务执行完毕，返回结果</span></span><br><span class="line">        tryUnpush(<span class="keyword">this</span>) &amp;&amp; (s = doExec()) &lt; <span class="number">0</span> ? s :</span><br><span class="line">        <span class="comment">// 如果不在顶端或者在顶端却没未执行完毕，那就调用awitJoin()执行任务</span></span><br><span class="line">        <span class="comment">// awaitJoin()：使用自旋使任务执行完成，返回结果</span></span><br><span class="line">        wt.pool.awaitJoin(w, <span class="keyword">this</span>, <span class="number">0L</span>) :</span><br><span class="line">    <span class="comment">// 如果不是ForkJoinWorkThread线程，执行externalAwaitDone()返回任务结果</span></span><br><span class="line">    externalAwaitDone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ForkJoinPool.join()会使线程免于阻塞。</p><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/forkJoin%E6%B5%81%E7%A8%8B%E5%9B%BE.PNG" alt=""></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>创建任务的时候我们一般不直接继承ForkJoinTask，而是继承它的子类<strong>RecursiveTask/RecursiveAction</strong></p><p><strong>RecursiveAction</strong>可以看做是无返回值的<strong>ForkJoinTask</strong></p><p><strong>RecursiveTask是有返回值的ForkJoinTask</strong>。</p><h3 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h3><p>ForkJoinPool是用于执行ForkJoinTask任务的执行（线程）池。</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sun</span>.misc.Contended</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinPool</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 任务队列 双端队列，ForkJoinTask存放在这里。</span></span><br><span class="line">    <span class="keyword">volatile</span> WorkQueue[] workQueues;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程的运行状态 ForkJoinPool的运行状态。SHUTDOWN状态用负数表示，其他用2的幂次表示。</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> runState;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建ForkJoinWorkerThread的默认工厂，可以通过构造函数重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公用的线程池，其运行状态不受shutdown()和shutdownNow()的影响</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ForkJoinPool common;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法，没有任何安全检查和参数校验，由makeCommonPool直接调用</span></span><br><span class="line">    <span class="comment">// 其他构造方法都是源自于此方法</span></span><br><span class="line">    <span class="comment">// parallelism: 并行度，</span></span><br><span class="line">    <span class="comment">// 默认调用java.lang.Runtime.availableProcessors() 方法返回可用处理器的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ForkJoinPool</span><span class="params">(<span class="keyword">int</span> parallelism,</span></span></span><br><span class="line"><span class="function"><span class="params">                         ForkJoinWorkerThreadFactory factory, // 工作线程工厂</span></span></span><br><span class="line"><span class="function"><span class="params">                         UncaughtExceptionHandler handler, // 拒绝任务的handler</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> mode, // 同步模式</span></span></span><br><span class="line"><span class="function"><span class="params">                         String workerNamePrefix)</span> </span>&#123; <span class="comment">// 线程名prefix</span></span><br><span class="line">        <span class="keyword">this</span>.workerNamePrefix = workerNamePrefix;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">        <span class="keyword">this</span>.ueh = handler;</span><br><span class="line">        <span class="keyword">this</span>.config = (parallelism &amp; SMASK) | mode;</span><br><span class="line">        <span class="keyword">long</span> np = (<span class="keyword">long</span>)(-parallelism); <span class="comment">// offset ctl counts</span></span><br><span class="line">        <span class="keyword">this</span>.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程池原理&quot;&gt;&lt;a href=&quot;#线程池原理&quot; class=&quot;headerlink&quot; title=&quot;线程池原理&quot;&gt;&lt;/a&gt;线程池原理&lt;/h1&gt;&lt;p&gt;Java中的线程池顶层接口是&lt;code&gt;Executor&lt;/code&gt;接口，&lt;code&gt;ThreadPoolExec
      
    
    </summary>
    
    
      <category term="编程书籍" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="Java" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出多线程学习笔记-基础篇</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/juc/juc-note/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/juc/juc-note/</id>
    <published>2020-04-27T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程就是<strong>应用程序在内存中分配的空间，也就是正在运行的程序</strong></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>让一个线程执行一个子任务，这样一个进程就包含了多个线程，每个线程负责一个单独的子任务。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>他们两个本质的区别是<strong>是否单独占有内存地址空间及其它系统资源（比如I/O）</strong></li><li><strong>进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位</strong>，即CPU分配时间的单位 。</li></ol><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>上下文切换（有时也称做进程切换或任务切换）是指 CPU 从一个进程（或线程）切换到另一个进程（或线程）。上下文是指<strong>某一时间点 CPU 寄存器和程序计数器的内容。</strong>任务从保存到再加载的过程就是一次上下文切换。</p><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>寄存器是cpu内部的少量的速度很快的闪存，通常存储和访问计算过程的中间值提高计算机程序的运行速度。</p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器一个专用的寄存器，用于表明指令序列中 CPU 正在执行的位置，存的值为正在执行的指令的位置或者下一个将要被执行的指令的位置，具体实现依赖于特定的系统。</p><h2 id="线程组和线程优先级"><a href="#线程组和线程优先级" class="headerlink" title="线程组和线程优先级"></a>线程组和线程优先级</h2><h3 id="线程组ThreadGroup"><a href="#线程组ThreadGroup" class="headerlink" title="线程组ThreadGroup"></a>线程组ThreadGroup</h3><p>每个Thread必然存在于一个ThreadGroup中，Thread不能独立于ThreadGroup存在。执行main()方法线程的名字是main，如果在new Thread时没有显式指定，那么默认将父线程（当前执行new Thread的线程）线程组设置为自己的线程组。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><h5 id="获取当前线程组的名字"><a href="#获取当前线程组的名字" class="headerlink" title="获取当前线程组的名字"></a>获取当前线程组的名字</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getThreadGroup().getName()</span><br></pre></td></tr></table></figure><h5 id="复制线程组"><a href="#复制线程组" class="headerlink" title="复制线程组"></a>复制线程组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制一个线程数组到一个线程组</span></span><br><span class="line">Thread[] threads = <span class="keyword">new</span> Thread[threadGroup.activeCount()];</span><br><span class="line">TheadGroup threadGroup = <span class="keyword">new</span> ThreadGroup();</span><br><span class="line">threadGroup.enumerate(threads);</span><br></pre></td></tr></table></figure><p>线程组里可以有其他线程组。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><ul><li><p>Java中线程优先级可以指定，范围是1~10。Java只是给操作系统一个优先级的<strong>参考值</strong>，线程最终<strong>在操作系统的优先级</strong>是多少还是由操作系统决定。</p></li><li><p>Java中的优先级来说不是特别的可靠，<strong>Java程序中对线程所设置的优先级只是给操作系统一个建议，操作系统不一定会采纳。而真正的调用顺序，是由操作系统的线程调度算法决定的</strong>。</p></li><li><p>Java提供一个<strong>线程调度器</strong>来监视和控制处于<strong>RUNNABLE状态</strong>的线程。线程的调度策略采用<strong>抢占式</strong>，优先级高的线程比优先级低的线程会有更大的几率优先执行。在优先级相同的情况下，按照“先到先得”的原则。每个Java程序都有一个默认的主线程，就是通过JVM启动的第一个线程main线程。</p></li><li><p>还有一种线程称为<strong>守护线程（Daemon）</strong>，守护线程默认的优先级比较低。如果某线程是守护线程，那如果所有的非守护线程结束，这个守护线程也会自动结束。一个线程默认是非守护线程，可以通过Thread类的setDaemon(boolean on)来设置。</p></li></ul><h2 id="线程的6个状态"><a href="#线程的6个状态" class="headerlink" title="线程的6个状态"></a>线程的6个状态</h2><h3 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h3><p>处于NEW状态的线程此时尚未启动。这里的尚未启动指的是还没调用Thread实例的start()方法。</p><h3 id="RUNNABLE"><a href="#RUNNABLE" class="headerlink" title="RUNNABLE"></a>RUNNABLE</h3><p>表示当前线程正在运行中。处于RUNNABLE状态的线程在Java虚拟机中运行，也有可能在等待其他系统资源（比如I/O）。</p><blockquote><p>Java线程的<strong>RUNNABLE</strong>状态其实是包括了传统操作系统线程的<strong>ready</strong>和<strong>running</strong>两个状态的。</p></blockquote><h3 id="BLOCKED"><a href="#BLOCKED" class="headerlink" title="BLOCKED"></a>BLOCKED</h3><p>阻塞状态。处于BLOCKED状态的线程正等待锁的释放以进入同步区。</p><h3 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h3><p>等待状态。处于等待状态的线程变成RUNNABLE状态需要其他线程唤醒。</p><p>调用如下3个方法会使线程进入等待状态:</p><ul><li><p>Object.wait()：使当前线程处于等待状态直到另一个线程唤醒它；</p></li><li><p>Thread.join()：等待线程执行完毕，底层调用的是Object实例的wait方法；</p></li></ul><ul><li>LockSupport.park()：除非获得调用许可，否则禁用当前线程进行线程调度。</li></ul><h3 id="TIMED-WAITING"><a href="#TIMED-WAITING" class="headerlink" title="TIMED_WAITING"></a>TIMED_WAITING</h3><p>超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒，拥有了去<strong>争夺锁</strong>的资格。</p><p>调用如下方法会使线程进入超时等待状态：</p><ul><li><p>Thread.sleep(long millis)：使当前线程睡眠指定时间；</p></li><li><p>Object.wait(long timeout)：线程休眠指定时间，等待期间可以通过notify()/notifyAll()唤醒；</p></li><li><p>Thread.join(long millis)：等待当前线程最多执行millis毫秒，如果millis为0，则会一直执行；</p></li><li><p>LockSupport.parkNanos(long nanos)： 除非获得调用许可，否则禁用当前线程进行线程调度指定时间；</p></li><li><p>LockSupport.parkUntil(long deadline)：同上，也是禁止线程进行调度指定时间；</p></li></ul><h3 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h3><p>终止状态。此时线程已执行完毕。</p><h3 id="Java线程状态转换图"><a href="#Java线程状态转换图" class="headerlink" title="Java线程状态转换图"></a>Java线程状态转换图</h3><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt=""></p><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/Java%E5%BC%82%E5%B8%B8%E7%BB%93%E6%9E%84.png" alt="Java异常结构总结图"></p><h2 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h2><ul><li><p>Thread.interrupt()：中断线程。这里的中断线程并不会立即停止线程，而是设置线程的中断状态为true（默认是flase）；</p></li><li><p>Thread.interrupted()：测试当前线程是否被中断。线程的中断状态受这个方法的影响，意思是调用一次使线程中断状态设置为true，连续调用两次会使得这个线程的中断状态重新转为false；</p></li><li><p>Thread.isInterrupted()：测试当前线程是否被中断。与上面方法不同的是调用这个方法并不会影响线程的中断状态。</p></li></ul><h1 id="Java多线程创建方式"><a href="#Java多线程创建方式" class="headerlink" title="Java多线程创建方式"></a>Java多线程创建方式</h1><h2 id="多线程入门类和接口"><a href="#多线程入门类和接口" class="headerlink" title="多线程入门类和接口"></a>多线程入门类和接口</h2><h3 id="Thread类和Runnable接口"><a href="#Thread类和Runnable接口" class="headerlink" title="Thread类和Runnable接口"></a>Thread类和Runnable接口</h3><ol><li>继承<code>Thread</code>类，并重写<code>run</code>方法；</li><li>实现<code>Runnable</code>接口的<code>run</code>方法；</li></ol><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java 8 函数式编程，可以省略MyThread类</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Java 8 匿名内部类"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Thread的构造方法"><a href="#Thread的构造方法" class="headerlink" title="Thread的构造方法"></a>Thread的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread(Runnable target)</span><br><span class="line">Thread(Runnable target, String name)</span><br></pre></td></tr></table></figure><h4 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h4><ul><li><p>currentThread()：静态方法，返回对当前正在执行的线程对象的引用；</p></li><li><p>start()：开始执行线程的方法，java虚拟机会调用线程内的run()方法；</p></li><li><p>yield()：yield在英语里有放弃的意思，同样，这里的yield()指的是<strong>当前线程愿意让出</strong>对当前处理器的占用。这里需要注意的是，就算当前线程调用了yield()方法，程序在调度的时候，也还有可能继续运行这个线程的；</p></li><li><p>sleep()：静态方法，使当前线程睡眠一段时间；</p></li><li><p>join()：使当前线程等待另一个线程执行完毕之后再继续执行，内部调用的是Object类的<code>wait</code>方法实现的；</p></li></ul><h3 id="Callable、Future与FutureTask"><a href="#Callable、Future与FutureTask" class="headerlink" title="Callable、Future与FutureTask"></a>Callable、Future与FutureTask</h3><p>使用<code>Runnable</code>和<code>Thread</code>来创建一个新的线程。但是它们有一个弊端，就是<code>run</code>方法是没有返回值的。希望开启一个线程去执行一个任务，并且这个任务执行完成后有一个返回值。</p><h4 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h4><p><code>Callable</code>一般是配合线程池工具<code>ExecutorService</code>来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义Callable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟计算需要一秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使用</span></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        Future&lt;Integer&gt; result = executor.submit(task);</span><br><span class="line">        <span class="comment">// 注意调用get方法会阻塞当前线程，直到得到结果。</span></span><br><span class="line">        <span class="comment">// 所以实际编码中建议使用可以设置超时时间的重载get方法。</span></span><br><span class="line">        System.out.println(result.get()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//是否取消成功，参数表示是否采用中断的方式取消线程执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> paramBoolean)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> paramLong, TimeUnit paramTimeUnit)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cancel</code>方法是试图取消一个线程的执行，<strong>并不一定能取消成功</strong>。因为该线程可能已完成，已取消，或者其他因素。</p><h4 id="FutureTask类"><a href="#FutureTask类" class="headerlink" title="FutureTask类"></a>FutureTask类</h4><p>FutureTask实现了RunnableFuture接口，该接口继承了Runnable和Future接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义Callable，与上面一样</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟计算需要一秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">// 使用</span></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Task());</span><br><span class="line">        executor.submit(futureTask);</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FutureTask能够在高并发环境下<strong>确保任务只执行一次</strong>。</p><h5 id="FutureTask的几种状态值说明"><a href="#FutureTask的几种状态值说明" class="headerlink" title="FutureTask的几种状态值说明"></a>FutureTask的几种状态值说明</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="comment">//初始创建时的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当任务执行完毕，FutureTask会将执行结果设置给outcome属性，在设置之前会将FutureTask的状态修改为COMPLETING。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当任务执行完毕，FutureTask会将执行结果设置给outcome属性，在设置之后会将FutureTask的状态修改为NORMAL。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//当任务在执行的过程中抛了异常，FutureTask会将异常信息设置给outcome属性，</span></span><br><span class="line">    <span class="comment">//在设置之前会将FutureTask的状态修改为COMPLETING，在设置之后将状态修改为EXCEPTIONAL。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//当外部想要取消任务，而又不允许当任务正在执行的时候被取消时会将FutureTask的状态修改为CANCELLED。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//当外部想要取消任务，同时允许当任务正在执行的时候被取消时，会先将FutureTask的状态设置为INTERRUPTING，</span></span><br><span class="line">    <span class="comment">//然后设置执行任务的线程的中断标记位。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//当外部想要取消任务，同时允许当任务正在执行的时候被取消时，会先将FutureTask的状态设置为INTERRUPTING，</span></span><br><span class="line">    <span class="comment">//然后设置执行任务的线程的中断标记位，最后将Future的状态设置为INTERRUPTED。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>FutureTask的状态流转可能流程：</p><ul><li><p>NEW—&gt;COMPLETING—&gt;NORMAL（任务执行正常）</p></li><li><p>NEW—&gt;COMPLETING—&gt;EXCEPTIONAL（任务执行异常）</p></li><li><p>NEW—&gt;CANCELLED（不允许执行中的取消）</p></li><li><p>NEW—&gt;INTERRUPTING—&gt;INTERRUPTED（允许执行中的取消）</p></li></ul><h1 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h1><h2 id="锁与同步"><a href="#锁与同步" class="headerlink" title="锁与同步"></a>锁与同步</h2><p>Java中，锁的概念都是基于对象的，一个锁同一时间只能被一个线程持有。线程同步是线程按照一定的顺序执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//为方法加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Thread A "</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Thread B "</span> + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        <span class="comment">//防止线程B先得到锁</span></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//线程B一样</span></span><br></pre></td></tr></table></figure><h2 id="等待通知机制"><a href="#等待通知机制" class="headerlink" title="等待通知机制"></a>等待通知机制</h2><p>假如线程A现在持有了一个锁<code>lock</code>并开始执行，它可以使用<code>lock.wait()</code>让自己进入等待状态。这个时候，<code>lock</code>这个锁是被释放了的。</p><p>这时，线程B获得了<code>lock</code>这个锁并开始执行，它可以在某一时刻，使用<code>lock.notify()</code>，通知之前持有<code>lock</code>锁并进入等待状态的线程A，说“线程A你不用等了，可以往下执行了”。</p><blockquote><p>需要注意的是，这个时候线程B并没有释放锁<code>lock</code>，除非线程B这个时候使用<code>lock.wait()</code>释放锁，或者线程B执行结束自行释放锁，线程A才能得到<code>lock</code>锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"ThreadA: "</span> + i);</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//线程B一样</span></span><br></pre></td></tr></table></figure><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>Java中<code>volitile</code>关键字能够保证内存的可见性，如果用<code>volitile</code>关键字声明了一个变量，在一个线程里面改变了这个变量的值，那其它线程是立马可见更改后的值的。</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>JDK提供了<code>PipedWriter</code>、 <code>PipedReader</code>、 <code>PipedOutputStream</code>、 <code>PipedInputStream</code>。其中，前面两个是基于字符的，后面两个是基于字节流的。</p><p>我们一个线程需要先另一个线程发送一个信息（比如字符串）或者文件等等时，就需要使用管道通信了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.线程ReaderThread开始执行，</span></span><br><span class="line"><span class="comment"> * 2.线程ReaderThread使用管道reader.read()进入”阻塞“，</span></span><br><span class="line"><span class="comment"> * 3.线程WriterThread开始执行，</span></span><br><span class="line"><span class="comment"> * 4.线程WriterThread用writer.write("test")往管道写入字符串，</span></span><br><span class="line"><span class="comment"> * 5.线程WriterThread使用writer.close()结束管道写入，并执行完毕，</span></span><br><span class="line"><span class="comment"> * 6.线程ReaderThread接受到管道输出的字符串并打印，</span></span><br><span class="line"><span class="comment"> * 7.线程ReaderThread执行完毕。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pipe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> PipedReader reader;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ReaderThread</span><span class="params">(PipedReader reader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.reader = reader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is reader"</span>);</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((receive = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>)receive);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> PipedWriter writer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WriterThread</span><span class="params">(PipedWriter writer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.writer = writer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is writer"</span>);</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.write(<span class="string">"test"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        PipedWriter writer = <span class="keyword">new</span> PipedWriter();</span><br><span class="line">        PipedReader reader = <span class="keyword">new</span> PipedReader();</span><br><span class="line">        writer.connect(reader); <span class="comment">// 这里注意一定要连接，才能通信</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ReaderThread(reader)).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> WriterThread(writer)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="keyword">this</span> is reader</span><br><span class="line"><span class="keyword">this</span> is writer</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h2 id="其他通信相关"><a href="#其他通信相关" class="headerlink" title="其他通信相关"></a>其他通信相关</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join()方法是Thread类的一个实例方法。它的作用是让当前线程陷入“等待”状态，等join的这个线程执行完成后，再继续执行当前线程。</p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>sleep方法是Thread类的一个静态方法。它的作用是让当前线程睡眠一段时间。</p><h3 id="join和sleep区别"><a href="#join和sleep区别" class="headerlink" title="join和sleep区别"></a>join和sleep区别</h3><ul><li><p>sleep方法是不会释放当前的锁的，而wait方法会。</p></li><li><p>wait可以指定时间，也可以不指定；而sleep必须指定时间。</p></li><li><p>wait释放cpu资源，同时释放锁；sleep释放cpu资源，但是不释放锁，所以易死锁。</p></li><li><p>wait必须放在同步块或同步方法中，而sleep可以在任意位置</p></li></ul><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal是一个本地线程副本变量工具类。内部是一个<strong>弱引用</strong>的Map来维护。</p><p>ThreadLocal为<strong>线程本地变量</strong>或<strong>线程本地存储</strong>。严格来说，ThreadLocal类并不属于多线程间的通信，而是让每个线程有自己”独立“的变量，线程之间互不影响。它为每个线程都创建一个<strong>副本</strong>，每个线程可以访问自己内部的副本变量。</p><p>ThreadLocal类最常用的就是set方法和get方法。</p><h3 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h3><p>InheritableThreadLocal类与ThreadLocal类稍有不同，Inheritable是继承的意思。它不仅仅是当前线程可以存取副本值，而且它的子线程也可以存取这个副本值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a&gt;相关概念&lt;/h1&gt;&lt;h2 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;
      
    
    </summary>
    
    
      <category term="编程书籍" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="Java" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出多线程学习笔记-原理篇</title>
    <link href="https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/juc/juc-theory/"/>
    <id>https://github.com/tzcqupt/tzcqupt.github.io/2020/04/28/juc/juc-theory/</id>
    <published>2020-04-27T16:00:00.000Z</published>
    <updated>2022-11-01T12:55:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><h2 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h2><h3 id="运行时内存的划分"><a href="#运行时内存的划分" class="headerlink" title="运行时内存的划分"></a>运行时内存的划分</h3><p>对于每一个线程来说，<strong>栈都是私有的，堆是共有的。</strong></p><p>线程<strong>私有</strong>的数据区：<strong>虚拟机栈、本地方法栈、程序计数器</strong>。</p><p>所有线程<strong>共享</strong>的数据区：<strong>方法区、堆</strong>。</p><p>在<strong>栈</strong>中的变量（局部变量、⽅法定义参数、异常处理器参数）不会在线程 </p><p>之间共享。<strong>堆中</strong>的变量是共享的，内存可见性针对的是<strong>共享变量</strong>。</p><h3 id="堆中的内存不可见问题"><a href="#堆中的内存不可见问题" class="headerlink" title="堆中的内存不可见问题"></a>堆中的内存不可见问题</h3><p>JMM ==&gt;Java内存模型</p><p><img src="https://gitee.com/tzcqupt/blog-image/raw/master/img/JMM%E6%8A%BD%E8%B1%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.PNG" alt=""></p><ol><li><p>线程<strong>A</strong>⽆法直接访问线程<strong>B</strong>的⼯作内存，线程间通信必须经过主内存。</p></li><li><p>根据JMM的规定，线程对共享变量的所有操作都必须在⾃⼰的本地内存中进⾏，不能直接从主内存中读取。</p><blockquote><p>先在本地内存中找到共享变量，发现共享变量更新了，就从主内存中拷贝新的值到本地内存，最后从本地内存读取。</p></blockquote></li><li><p><strong>JMM</strong>通过控制主内存与每个线程的本地内存之间的交互，来提供内存可⻅性保证。</p></li></ol><h1 id="重排序与happens-before"><a href="#重排序与happens-before" class="headerlink" title="重排序与happens-before"></a>重排序与happens-before</h1><h2 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h2><p>计算机执行程序时，为了提高性能，编译器和处理器对指令做出重排。</p><p>指令重排可以保证串⾏语义⼀致，但是没有义务保证多线程间的语义也⼀致。</p><h2 id="顺序一致性模型和JMM保证"><a href="#顺序一致性模型和JMM保证" class="headerlink" title="顺序一致性模型和JMM保证"></a>顺序一致性模型和JMM保证</h2><h3 id="数据竞争与顺序一致性"><a href="#数据竞争与顺序一致性" class="headerlink" title="数据竞争与顺序一致性"></a>数据竞争与顺序一致性</h3><p>数据竞争：在⼀个线程中写⼀个变量，在另⼀个线程读同⼀个变量，并且写和读没有通过同步来排序。 </p><p>JMM保证：如果程序是正确同步的，程序的执⾏将具有顺序⼀致性。</p><blockquote><p>正确使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>等关键字来实现<strong>多线程下的同步</strong>。</p></blockquote><h2 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h2><p>程序员只要遵循happens-before规则，那他写的程序就能保证在JMM中具有强的内存可见性。</p><p>如果操作A happens-before操作B，那么操作A在内存上所做的操作对操作B都是可见的，不管它们在不在一个线程。</p><h3 id="天然的happens-before"><a href="#天然的happens-before" class="headerlink" title="天然的happens-before"></a>天然的happens-before</h3><ul><li><p>程序顺序规则：一个线程中的每一个操作，happens-before于该线程中的任意后续操作。</p></li><li><p>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</p></li><li><p>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</p></li><li><p>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</p></li><li><p>start规则：如果线程A执行操作ThreadB.start()启动线程B，那么A线程的ThreadB.start（）操作happens-before于线程B中的任意操作、</p></li><li><p>join规则：如果线程A执行操作ThreadB.join（）并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</p></li></ul><h1 id="volatitle"><a href="#volatitle" class="headerlink" title="volatitle"></a>volatitle</h1><h2 id="相关概念回顾"><a href="#相关概念回顾" class="headerlink" title="相关概念回顾"></a>相关概念回顾</h2><h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><p><strong>线程之间的可见性，当一个线程修改了共享变量时，另一个线程可以读取到这个修改后的值</strong>。</p><h3 id="重排序-1"><a href="#重排序-1" class="headerlink" title="重排序"></a>重排序</h3><p>为优化程序性能，对原有的指令执行顺序进行优化重新排序。重排序可能发生在多个阶段，比如编译重排序、CPU重排序等。</p><h3 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h3><p>是一个给程序员使用的规则，只要程序员在写代码的时候遵循happens-before规则，JVM就能保证指令在多线程之间的顺序性符合程序员的预期。</p><h2 id="volatile的内存语义"><a href="#volatile的内存语义" class="headerlink" title="volatile的内存语义"></a>volatile的内存语义</h2><ol><li>保证变量的<strong>内存可见性</strong></li><li>禁止volatile变量与普通变量<strong>重排序</strong>。</li></ol><h3 id="JMM内存屏障插⼊策略"><a href="#JMM内存屏障插⼊策略" class="headerlink" title="JMM内存屏障插⼊策略"></a><strong>JMM</strong>内存屏障插⼊策略</h3><ul><li><p>在每个volatile写操作前插⼊⼀个StoreStore屏障； </p></li><li><p>在每个volatile写操作后插⼊⼀个StoreLoad屏障； </p></li><li><p>在每个volatile读操作后插⼊⼀个LoadLoad屏障； </p></li><li><p>在每个volatile读操作后再插⼊⼀个LoadStore屏障。</p></li></ul><h3 id="volatile与普通变量的重排序规则"><a href="#volatile与普通变量的重排序规则" class="headerlink" title="volatile与普通变量的重排序规则"></a>volatile与普通变量的重排序规则</h3><ol><li><p>如果第⼀个操作是volatile读，那⽆论第⼆个操作是什么，都不能重排序； </p></li><li><p>如果第⼆个操作是volatile写，那⽆论第⼀个操作是什么，都不能重排序； </p></li><li><p>如果第⼀个操作是volatile写，第⼆个操作是volatile读，那不能重排序。 </p></li></ol><blockquote><p>第一个操作是普通变量读，第二个操作是volatile变量读，可以重排序</p></blockquote><h2 id="volatile用途"><a href="#volatile用途" class="headerlink" title="volatile用途"></a>volatile用途</h2><p>功能上锁比volatile强大，性能上，volatile更有优势。</p><h1 id="synchronzied与锁"><a href="#synchronzied与锁" class="headerlink" title="synchronzied与锁"></a>synchronzied与锁</h1><p><strong>Java</strong>多线程的锁都是基于对象的，Java中的每⼀个对象都可以作为⼀个锁。 </p><h2 id="synchronzied关键字"><a href="#synchronzied关键字" class="headerlink" title="synchronzied关键字"></a>synchronzied关键字</h2><h3 id="3种形式"><a href="#3种形式" class="headerlink" title="3种形式"></a>3种形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在实例方法上，锁为当前实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instanceLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在静态方法上，锁为当前Class对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">classLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号里面的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>指的是某一块代码区域，它同一时刻只能由一个线程执行。</p><h3 id="等价的写法"><a href="#等价的写法" class="headerlink" title="等价的写法"></a>等价的写法</h3><h4 id="锁为当前实例"><a href="#锁为当前实例" class="headerlink" title="锁为当前实例"></a>锁为当前实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在实例方法上，锁为当前实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instanceLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号里面的对象，也就是当前实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁为Class对象"><a href="#锁为Class对象" class="headerlink" title="锁为Class对象"></a>锁为Class对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键字在静态方法上，锁为当前Class对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">classLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字在代码块上，锁为括号里面的对象，为Class对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blockLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.getClass()) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几种锁"><a href="#几种锁" class="headerlink" title="几种锁"></a>几种锁</h2><p>Java 6 为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁“。在Java 6 以前，所有的锁都是”重量级“锁。</p><p>Java 6后，一个对象有4种锁状态。</p><p>无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。</p><p>锁降级情况，参考JVM学习。锁降级发生在Stop The World期间，当JVM进入安全点的时候，会检查是否有闲置的锁，然后进行降级。</p><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p>每个Java对象都有对象头。如果是非数组类型，则用2个字宽来存储对象头，如果是数组，则会用3个字宽来存储对象头。在32位处理器中，一个字宽是32位；在64位虚拟机中，一个字宽是64位。</p><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashCode或锁信息等</td></tr><tr><td>32/64bit</td><td>Class Metadata Address</td><td>存储到对象类型数据的指针</td></tr><tr><td>32/64bit</td><td>Array length</td><td>数组的长度（如果是数组）</td></tr></tbody></table><p>当对象状态为偏向锁时，<code>Mark Word</code>存储的是偏向的线程ID；当状态为轻量级锁时，<code>Mark Word</code>存储的是指向线程栈中<code>Lock Record</code>的指针；当状态为重量级锁时，<code>Mark Word</code>为指向堆中的monitor对象的指针。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>每一个对象都可以当做一个锁，当多个线程同时请求某个对象锁时，对象锁会设置几种状态用来区分请求的线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Contention List：所有请求锁的线程将被首先放置到该竞争队列</span><br><span class="line">Entry List：Contention List中那些有资格成为候选人的线程被移到Entry List</span><br><span class="line">Wait Set：那些调用wait方法被阻塞的线程被放置到Wait Set</span><br><span class="line">OnDeck：任何时刻最多只能有一个线程正在竞争锁，该线程称为OnDeck</span><br><span class="line">Owner：获得锁的线程称为Owner</span><br><span class="line">!Owner：释放锁的线程</span><br></pre></td></tr></table></figure><p>当一个线程尝试获得锁时，如果该锁已经被占用，则会将该线程封装成一个<code>ObjectWaiter</code>对象插入到Contention List的队列的队首，然后调用<code>park</code>函数挂起当前线程。</p><p>当线程释放锁时，会从Contention List或EntryList中挑选一个线程唤醒，被选中的线程叫做<code>Heir presumptive</code>即假定继承人，假定继承人被唤醒后会尝试获得锁，但<code>synchronized</code>是非公平的，所以假定继承人不一定能获得锁。这是因为对于重量级锁，线程先自旋尝试获得锁，这样做的目的是为了减少执行操作系统同步操作带来的开销。如果自旋不成功再进入等待队列。这对那些已经在等待队列中的线程来说，稍微显得不公平，还有一个不公平的地方是自旋线程可能会抢占了Ready线程的锁。</p><p>果线程获得锁后调用<code>Object.wait</code>方法，则会将线程加入到WaitSet中，当被<code>Object.notify</code>唤醒后，会将线程从WaitSet移动到Contention List或EntryList中去。需要注意的是，当调用一个锁对象的<code>wait</code>或<code>notify</code>方法时，<strong>如当前锁的状态是偏向锁或轻量级锁则会先膨胀成重量级锁</strong>。</p><h3 id="锁的升级流程"><a href="#锁的升级流程" class="headerlink" title="锁的升级流程"></a>锁的升级流程</h3><p>每一个线程在准备获取共享资源时。</p><ol><li><p>检查MarkWord里面是不是放的自己的ThreadId ,如果是，表示当前线程是处于 “偏向锁” 。</p></li><li><p>如果MarkWord不是自己的ThreadId，锁升级，这时候，用CAS来执行切换，新的线程根据MarkWord里面现有的ThreadId，通知之前线程暂停，之前线程将Markword的内容置为空。</p></li><li><p>两个线程都把锁对象的HashCode复制到自己新建的用于存储锁的记录空间，接着开始通过CAS操作， 把锁对象的MarKword的内容修改为自己新建的记录空间的地址的方式竞争MarkWord。</p></li><li><p>第三步中成功执行CAS的获得资源，失败的则进入自旋 。</p></li><li><p>自旋的线程在自旋过程中，成功获得资源(即之前获的资源的线程执行完成并释放了共享资源)，则整个状态依然处于 轻量级锁的状态，如果自旋失败 。</p></li><li><p>进入重量级锁的状态，这个时候，自旋的线程进行阻塞，等待之前线程执行完成并唤醒自己。</p></li></ol><h1 id="CAS与原子操作"><a href="#CAS与原子操作" class="headerlink" title="CAS与原子操作"></a>CAS与原子操作</h1><h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。</p><p>多用于”写多读少“的环境，避免频繁失败和重试影响性能。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为CAS的技术来保证线程执行的安全性。</p><p>没有锁存在，不可能出现死锁的情况。</p><p>多用于“读多写少“的环境，避免频繁加锁影响性能。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>CAS全称：比较并交换（Compare And Swap）。</p><p>CAS种有3个值：V：要更新的变量(var)、E：预期值(expected)、N：新值(new)。</p><p>比较并交换过程如下：</p><p>判断V是否等于E，如果等于，将V的值设置为N；如果不等，说明已经有其它线程更新了V，则当前线程放弃更新，什么都不做。</p><blockquote><p><strong>预期值E本质上指的是“旧值”</strong>。</p></blockquote><p><strong>CAS是一种原子操作</strong>，它是一种系统原语，是一条CPU的原子指令，从CPU层面保证它的原子性。</p><blockquote><p>当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</p></blockquote><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><p>一个值原来是A，变成了B，又变回了A。</p><p>解决思路：在变量前面追加<strong>版本号或者时间戳</strong>。JDK1.5开始，atomic包里提供了一个类<code>AtomicStampedReference</code>类来解决ABA问题。</p><p>这个类的<code>compareAndSet</code>方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果二者都相等，才使用CAS设置为新的值和标志。</p><h3 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h3><p>CAS多与自旋结合。如果自旋CAS长时间不成功，会占用大量的CPU资源。</p><p>解决思路：让JVM支持处理器提供的<strong>pause指令</strong>。</p><p>pause指令能让自旋失败时cpu睡眠一小段时间再继续自旋，从而使得读操作的频率低很多,为解决内存顺序冲突而导致的CPU流水线重排的代价也会小很多。</p><h3 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h3><ol><li>使用JDK 1.5开始就提供的<code>AtomicReference</code>类保证对象之间的原子性，把多个变量放到一个对象里面进行CAS操作；</li><li>使用锁。锁内的临界区代码可以保证只有当前线程能操作。</li></ol><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><h2 id="AQS简介"><a href="#AQS简介" class="headerlink" title="AQS简介"></a>AQS简介</h2><p><strong>AQS</strong>是<code>AbstractQueuedSynchronizer</code>的简称，即<code>抽象队列同步器</code>。</p><ul><li><p>抽象：抽象类，只实现一些主要逻辑，有些方法由子类实现；</p></li><li><p>队列：使用先进先出（FIFO）队列存储数据；</p></li><li><p>同步：实现了同步的功能。</p></li></ul><p>AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的同步器，比如我们提到的ReentrantLock，Semaphore，ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的。</p><h2 id="AQS数据结构"><a href="#AQS数据结构" class="headerlink" title="AQS数据结构"></a>AQS数据结构</h2><p>AQS内部使用了一个volatile的变量state来作为资源的标识。同时定义了几个获取和改变state的protected方法，子类可以覆盖这些方法来实现自己的逻辑：<code>getState()、setState()、compareAndSetState()</code></p><p>AQS类本身实现的是一些排队和阻塞的机制，比如具体线程等待队列的维护（如获取资源失败入队/唤醒出队等）。它内部使用了一个先进先出（FIFO）的双端队列，并使用了两个指针head和tail用于标识队列的头部和尾部。</p><h2 id="资源共享模式"><a href="#资源共享模式" class="headerlink" title="资源共享模式"></a>资源共享模式</h2><ul><li><p>独占模式（Exclusive）：资源是独占的，一次只能一个线程获取。如<code>ReentrantLock</code>。</p></li><li><p>共享模式（Share）：同时可以被多个线程获取，具体的资源个数可以通过参数指定。如<code>Semaphore/CountDownLatch</code>。</p></li></ul><p>同时实现两种模式的同步类，如<code>ReadWriteLock</code>。</p><p>AQS源码定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标记一个结点（对应的线程）在共享模式下等待</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="comment">// 标记一个结点（对应的线程）在独占模式下等待</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// waitStatus的值，表示该结点（对应的线程）已被取消</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED = <span class="number">1</span>; </span><br><span class="line">    <span class="comment">// waitStatus的值，表示后继结点（对应的线程）需要被唤醒</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// waitStatus的值，表示该结点（对应的线程）在等待某一条件</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">/*waitStatus的值，表示有资源可用，新head结点需要继续唤醒后继结点（共享模式下，多线程并发释放资源，而head唤醒其后继结点后，需要把多出来的资源留给后面的结点；设置新的head结点时，会继续唤醒其后继结点）*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待状态，取值范围，-3，-2，-1，0，1</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line">    <span class="keyword">volatile</span> Node prev; <span class="comment">// 前驱结点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next; <span class="comment">// 后继结点</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread; <span class="comment">// 结点对应的线程</span></span><br><span class="line">    Node nextWaiter; <span class="comment">// 等待队列里下一个等待条件的结点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断共享模式的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AQS里面的addWaiter私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用了Node的这个构造函数</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// 其它代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java内存模型&quot;&gt;&lt;a href=&quot;#Java内存模型&quot; class=&quot;headerlink&quot; title=&quot;Java内存模型&quot;&gt;&lt;/a&gt;Java内存模型&lt;/h1&gt;&lt;h2 id=&quot;Java内存模型的抽象结构&quot;&gt;&lt;a href=&quot;#Java内存模型的抽象结构&quot; c
      
    
    </summary>
    
    
      <category term="编程书籍" scheme="https://github.com/tzcqupt/tzcqupt.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="Java" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://github.com/tzcqupt/tzcqupt.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
